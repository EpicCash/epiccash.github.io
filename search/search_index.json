{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Project is created and managed by community made out of volunteers, same as this documentation -  please let us know if something should be improved or added, we will do our best to make it better!</p> <p> As a developer you can find here how to build, use and integrate our software.</p> <p> For others we have useful guides, articles and materials explaining our technology and mission.</p> <p></p> <ul> <li> EpicCash.com Website  </li> <li> Epic-Cash GitHub  </li> </ul> <p></p>"},{"location":"#mimblewimble-epic-cash-tech","title":"Mimblewimble &amp; Epic-Cash tech","text":"<ul> <li> Mimblewimble  - Explaining Mimblewimble</li> <li> Overview  - Tech introduction to the EPIC</li> <li> Core software  - Epic-Cash components</li> </ul>"},{"location":"integrations/","title":"Introduction","text":"<p>Author:  blacktyg3r |   BT Labs </p> <p>The Epic-Cash project is using the Mimblewimble protocol which is still a relatively new technology.  Interactive transactions are not easy to implement in the production,  and documentation is still developing. Our Blockchain privacy features will bring more challenges than other projects  with transparent and public ledgers that are easy to query to get i.e. balances or transaction history by anyone.</p> <p>This document aims to help developers with the integration process, and should be considered only us guidance.  To fully understand concepts and terminology it is recommended to read other sections of the  EPIC Developers Documentation and Epic-Cash Wiki on GitHub.</p>"},{"location":"integrations/#interactive-transactions","title":"Interactive Transactions","text":"<p>The Epic-Cash Blockchain does not store any transaction data on the ledger, it uses Interactive  Transactions (NIT), that means exchanging transaction slates<sup>1</sup> requires all the  participants to sign the transaction before posting it to the network. Sender can not finish the transaction  without the recipient signature, and this introduces need of both wallets being online at some point during  the process.</p> <p><sup>1. Transaction slate - partial transaction data (i.e. participants details, amounts, used outputs, etc.)  that is not complete yet.</sup></p>"},{"location":"integrations/#overview","title":"Overview","text":"<p>SRS vs RSR Workflow</p> <p>Transaction can be initialized by both, the sender or the receiver, this gives us two different workflows:</p> <ul> <li>Sender-Receiver-Sender when transaction is initialized by sender</li> <li>Receiver-Sender-Receiver when transaction is initialized by the recipient (like issuing an invoice)</li> </ul> <p>Wallet that initializes the transaction (1st step) is also responsible for finalization and posting it to  the network (3rd step). </p> <p>While SRS workflow will be the best choice for most cases, RSR can be used i.e. in e-commerce  (asking client to pay for the product or service).</p> <p>Despite different transaction methods that may change the user's experience,  wallet's back-end will always have to use these functions (also available as API endpoints):</p> <p>SRS Workflow:</p> <ol> <li><code>init_send_tx</code>     Used by the sender's wallet to initialize the transaction slate.</li> <li><code>receive_txs</code>     Used by the receiver's wallet to process initialized transaction slate, produces response slate.</li> <li><code>finalize_tx</code>     Used by the sender's wallet to finalize the transaction signed by the recipient.</li> <li><code>post_tx</code>      Used by the sender's wallet to post final transaction slate to the network.</li> </ol> <p>and</p> <p>RSR Workflow:</p> <ol> <li><code>issue_invoice_tx</code>     Used by the receiver's wallet to initialize new invoice payment.</li> <li><code>process_invoice_tx</code>     Used by the sender's wallet to processes an invoice transaction created by the recipient.</li> <li><code>finalize_invoice_tx</code>     Used by the receiver's wallet to finalizes an invoice transaction signed by the payer.</li> <li><code>post_tx</code>     Used by the receiver's wallet to post final transaction slate to the network.</li> </ol> <p>Warning</p> <p>At the moment of writing this document this workflow is considered as experimental and not tested in  the production, use with caution.</p> <p>After successful executing of the <code>post_tx</code> function coins are sent to the recipient, until then transaction  can be canceled by both wallets. Transaction is considered as finished if and only if status <code>confirmed</code>  in the wallet local database have value <code>True</code>. </p> <p>Coins are safu, always!</p> <p>One of the big advantages of the NIT's implementation is no risk of losing funds due to mistyped wallet  address or connection problems, transaction either appears in the right wallet or nothing happens.</p>"},{"location":"integrations/#transaction-slates","title":"Transaction Slates","text":"<p>To exchange the EPIC coins, users must exchange transaction slates in one form or another. A transaction slate is a blob containing the necessary data to be included at each step of the transaction building process. Different transaction methods are basically different methods of exchanging slates to improve the end-user's experience.</p> <p>Explaining Transaction Slates</p> <p>Imagine you want to give someone a collection of two precious gold coins. In order to make that transaction legit for the accounting purposes, you document some details, such as:</p>  Transaction Slate Template <pre><code>Date: \nParticipiants:\n    - Sender    : \n    - Recipient : \nProducts:\n    - \n    -\nDescription: \nSignatures:\n    - Sender    : \n    - Recipient :\n    - Accountant :\n</code></pre> <ul> <li>So here, we enter the specific details, such as:</li> </ul>  Transaction Slate: Round I <pre><code>Date: \"2023-04-26\"\nParticipiants:\n    - Sender    : \"John Doe\"\n    - Recipient : \nProducts:\n    - \"Coin 1\"\n    - \"Coin 2\"\nDescription: \"Gold coins, perfect condition.\"\nSignatures:\n    - Sender      : \"&lt;John's Signature&gt;\"\n    - Recipient   :\n    - Accountant :\n</code></pre> <ul> <li>Now it's time to send the document to the receiver, let's use a delivery company,  with an extra service to ensure your document is properly secured. Once it  will be delivered and processed by the receiver it may look like this:</li> </ul>  Transaction Slate: Round II <pre><code>Date: \"2023-04-26\"\nParticipiants:\n    - Sender    : \"John Doe\"\n    - Recipient : \"Steven Clark\"\nProducts:\n    - \"Coin 1\"\n    - \"Coin 2\"\nDescription: \"Gold coins, perfect condition.\"\nSignatures:\n    - Sender      : \"&lt;John's Signature&gt;\"\n    - Recipient   : \"&lt;Steve's Signature&gt;\"\n    - Accountant :\n</code></pre> <ul> <li>Now, using the same delivery service, the sender-signed document is returned to you. When it arrives,      there is an authorized accountant with you to prove the authenticity of the coins, approve the document      parameters and put the final signature on it:</li> </ul>  Transaction Slate: Round III <pre><code>Date: \"2023-04-26\"\nParticipiants:\n    - Sender    : \"John Doe\"\n    - Recipient : \"Steven Clark\"\nProducts:\n    - \"Coin 1\"\n    - \"Coin 2\"\nDescription: \"Gold coins, perfect condition.\"\nSignatures:\n    - Sender      : \"&lt;John's Signature&gt;\"\n    - Recipient   : \"&lt;Steve's Signature&gt;\"\n    - Accountant : \"&lt;Accountant's Signature&gt;\"\n</code></pre> <ul> <li>The process is finished, the document is now a valid proof of ownership of the coins!</li> </ul> <p>Doesn't sound that complicated, right? Now, let's translate that example to the Mimblewimble language:</p> <ul> <li>Transaction slate is like the document we exchange with the receiver,</li> <li>JSON payload is like content of that document, each round adds more details,</li> <li>Transaction method (i.e. HTTP/S, Epicbox, etc.) is like the delivery company,</li> <li>Data encryption is this special delivery service protecting your parcel,</li> <li>The Mimblewimble protocol, same as the authorized accountant, validates the entire process</li> </ul> <p></p> <p>The three rounds mentioned above are related to the order of the functions used by the wallet:</p> <ul> <li>Round I: <code>init_send_tx</code></li> <li>Round II:  <code>receive_txs</code></li> <li>Round III:<ol> <li><code>finalize_tx</code></li> <li><code>post_tx</code> </li> </ol> </li> </ul> <p>Public vs Private</p> <p>Now that we know how it works using a transparent and public ledger,  let's outline the key differences when compared to the secure and private EPIC Blockchain:</p> <ul> <li>Participiant's data is not linkable, nor trackable, no addresses or meta-data are stored,</li> <li>Transaction details are encrypted (sealed), and no one except the participating wallets can look inside, </li> <li>Signatures are secured by cryptographic functions, not possible to cheat,</li> <li>Blockchain keeps the data needed to prove ownership of the coins, but does     not say (or know) who actually owns them, there is no way to query asset balances</li> </ul>"},{"location":"integrations/#wallet-addresses","title":"Wallet Addresses","text":"<p>In the Mimblewimble protocol there is no wallet addresses!</p> <p>With that being said, we do need them in order to make transactions available for the users.</p>"},{"location":"integrations/#https-addresses","title":"HTTP/S Addresses","text":"<p>What is not present on the protocol level was built on top of it - this is how HTTP/S Transaction method was  created, where wallet address is an IP (or domain) of the machine where wallet is running. While for private users this immediately raises a privacy concerns (sharing the IP address), for commercial use is actually a great  solution. How exactly <code>HTTP/S Transaction</code> method works will be explained later, for now let's outline key points:</p> <p>Pros</p> <ul> <li>Highly customizable URL links working as wallet address</li> <li>Having own custom domain URL to keep brand consistency, i.e.      <code>ExampleShop.com/pay</code> as payment address </li> <li>Static and user-friendly addresses instead of long and ugly strings</li> <li>Multiple different URLs pointing to the same wallet</li> <li>Peer2Peer connection between wallets, no intermediate service</li> </ul> <p>Cons</p> <ul> <li>Configuration requires some tech experience </li> <li>Hosting machine must be reachable for network traffic, i.e. open ports and firewall rules</li> <li>Sender's and receiver's wallet must be running in the same time in order to transact</li> <li>Connection problems may result with need to re-send the transactions</li> </ul> <p>It is clear that this type of addresses are great match for commercial cases like  exchange deposits, e-commerce payments, branding, etc. Unfortunately in the same time it is complicated for  standard users without tech experience - this is why we had to introduce something more user-friendly.</p>"},{"location":"integrations/#epicbox-addresses","title":"Epicbox Addresses","text":"<p>Epicbox is not just an address, it is completely new transaction workflow with multiple benefits focused primarily on creating smooth experience for the end-users. Stealth-like, not queryable and static wallet  addresses used to exchange transaction slates with similar to other cryptocurrency projects fashion:</p> <p>Pros</p> <ul> <li>Highly private and secure with almost no meta-data leak during the transaction process</li> <li>No extra configuration or tech experience needed, working out of the box</li> <li>No need for both wallets to be online at the same time</li> <li>Mobile wallet friendly</li> </ul> <p>Cons</p> <ul> <li>Not customizable and not as user-friendly as HTTP/S addresses</li> <li>Requires intermediate service to store pending transactions</li> </ul> <p>It seems like the biggest tradeoff in this case is the requirement of intermediate service handling communication  between the wallets, but why this should not raise any concerns will be explained in the next sections.</p>"},{"location":"integrations/#tor-addresses","title":"TOR Addresses","text":"<p>For those who value privacy we have also integrated anonymous communication between the wallets over  TOR routing protocol. </p> <p>Using TOR</p> <p>Taking into consideration legal problems with using TOR it is very unlikely for someone to use this  workflow in production for now (it is planned to eventually update that section though).</p>"},{"location":"integrations/#transaction-methods","title":"Transaction Methods","text":"<p>EPIC Wallet supports multiple (five at the moment) transaction methods. Let's briefly look at all of them:</p> <p></p>"},{"location":"integrations/#https","title":"HTTP/S","text":"<p>To use this method receiver have to run <code>HTTP/S Listener</code>, share the URL address (IP or domain) pointing to  it and make sure it is reachable for others outside the LAN network, i.e. port (by default 3415) is open and  firewall rule created.</p> <p>Transaction will be successfully finished if and only if both parties are online during the entire process which  should take no longer than few seconds. Failed transaction can be cancelled by sender to unlock locked funds.</p> <ul> <li>How to send with HTTP/S: **Wallet CLI Documentation **</li> </ul>"},{"location":"integrations/#epicbox","title":"Epicbox","text":"<p>To use this method both sender and receiver have to run <code>Epicbox listener</code>.</p> <p>Epicbox server will work as temporary storage to make it possible to transact without the need of both parties  being online at the same time. It will also remove the need of sharing receivers IP address and handling the ports.</p> <ul> <li>How to send with Epicbox: Wallet CLI Documentation</li> </ul>"},{"location":"integrations/#tor","title":"TOR","text":"<p>To use this method receiver have to run HTTP/S Listener and share the TOR address.</p> <p>Transaction will be successfully finished if and only if both parties are online during the process which  should take less than a minute. Failed transaction can be cancelled by sender to unlock locked funds.</p> <ul> <li>How to send with TOR: Wallet CLI Documentation</li> </ul>"},{"location":"integrations/#transaction-files","title":"Transaction Files","text":"<p>This method requires to do all 3 steps manually giving the user a lot of flexibility how to do it, i.e. via e-mail, messengers, USB drives, Bluetooth, etc. Transaction slates are saved as text files, users have to  exchange them between each other until all the details are completed and final file is ready to post to the network. </p> <ul> <li>How to send with Transaction Files: Epic-Cash GitHub</li> </ul>"},{"location":"integrations/#emojis-strings","title":"Emojis Strings","text":"<p>Very similar to the transaction files method except in this case instead of files we use emojis strings.</p> <p>Example Emojis Transaction Slate</p> <p>\ud83e\udd49\ud83c\udfa8\ud83d\udccf\ud83e\udd1b\ud83e\ude9e\ud83e\udd7c\ud83d\udcb8\ud83e\udd0e\ud83d\ude9f\ud83e\uddde\ud83d\udcf7\ud83d\ude36\ud83e\ude92\ud83c\ude36\ud83c\udf5a  [....] \ud83e\udda8\ud83d\udcf5\ud83d\udced\ud83d\ude21\ud83e\udda6\ud83e\udd1e\ud83d\udc09\ud83e\uddb7\ud83e\udd8f \ud83d\udc2a\ud83d\udcbe</p> <ul> <li>How to send with Emojis: Epic-Cash GitHub</li> </ul>"},{"location":"integrations/exchanges/","title":"Exchanges","text":"<p>Author:  blacktyg3r |   BT Labs </p>"},{"location":"integrations/exchanges/#motivation","title":"Motivation","text":"<p>The goal of this section is to help with the integration of our protocol by exchanges. This document is in construction phase, support is welcome and often updates are expected.</p>"},{"location":"integrations/exchanges/#before-start","title":"Before Start","text":"<p>Please familiarize yourself with the following before proceeding:</p> <ul> <li>Building and running EPIC Node </li> <li>Building and running EPIC Wallet</li> <li>Building and hosting Epicbox Server</li> <li>Using EPIC Wallet Foreign and Owner API</li> <li>Web servers, i.e. Nginx</li> <li>Domain configurations</li> <li>Linux and command line skills</li> </ul>"},{"location":"integrations/exchanges/#handling-users-accounts-and-wallets","title":"Handling User's Accounts and Wallets","text":"<p>At this stage of our development, we do not recommend making separate wallets (or separate accounts within the wallet)  for each exchange account. Although that would be tempting to do, this solution will not scale well with growing  number of users. Key points why:</p> <p>EPIC Wallet Scaling Issues</p> <ul> <li>Each new wallet (or new wallet account) will require separate long-running background      process (listener) in order to receive deposits or send withdrawals,</li> <li>Each new wallet instance will require HDD space for configuration files, SQL database and      transaction history that will grow with time,</li> <li>Each new wallet instance will require separate ports to receive deposits via HTTP/S,</li> <li>Wallet binary file can process only one operation at the time, to handle a dozen/hundreds of operations      in the same time will require same amount of separate binary files,</li> <li>Creating infrastructure to manage thousands of wallets will require huge amount of resources</li> </ul> <p>Although we believe to solve scaling issues in the future, it is not the case for now.</p> <p>Recommendation</p> <p>Our recommendation is to run one wallet instance (or few in order to load-balance, cold and hot storage,  etc. - depending on i.e. traffic conditions - it is up to your engineers) to receive deposits and use local  database to keep track of the account balances.</p>"},{"location":"integrations/exchanges/#deposits-workflow","title":"Deposits Workflow","text":"<p>EPIC Wallet introduces multiple ways to handle transactions, <code>HTTP/S Method</code> is considered by our team as  best for this job, here's why:</p> <p>HTTP/S Method for Deposits</p> <p>Taking in to consideration that exchange have right resources:</p> <ul> <li>It is not a problem to host 24/7 running process to listen for incoming transactions</li> <li>It is not a problem to open ports, configure domain, create firewall rules</li> <li>It is a big advantage to have customizable and flexible URL links as wallet address</li> <li>Users will have friendly and easy to use URLs for deposits, i.e. <code>exchange.com/epiccash/&lt;ACCOUNT_ID&gt;</code></li> <li>Does not require any extra steps, i.e. uploading/downloading transaction files </li> <li>Incoming transaction data is a POST request with JSON payload, easy to process</li> <li>It takes a few seconds to finish the transaction</li> </ul> <p>This workflow is already tested in production for years, exchanges that are/were using it: </p> <ul> <li>ViteX DEX</li> <li>Bitmart CEX</li> </ul> <p>Since the Epic-Cash is a privacy focused blockchain with no transparent ledger, wallet addresses, visible balances or  transaction history it is crucial to design a system to monitor incoming deposits and credit them to the right  accounts. Below key points of our recommendation how to approach it using web server like Nginx and wallet web APIs :</p> <p>Recommendation</p> <ul> <li>Each exchange account should generate unique deposit URL link for the user</li> <li>URL should be made out of:<ul> <li>static part i.e. <code>exchange.com/epiccash/</code></li> <li>unique part like account ID or username, i.e. <code>&lt;ACCOUNT_ID&gt;</code></li> </ul> </li> <li>URL link should point to the working wallet <code>HTTP/S listener</code></li> <li>Using the web server like nginx you can configure to catch all incoming requests with pattern      <code>exchange.com/epiccash/*</code> and redirect them to your running listener (by default <code>localhost:3415</code>)</li> <li>Sender uses a unique link to call your wallet endpoint and send a JSON payload</li> <li>In the JSON payload you can see all the transaction details:<ul> <li> Example: Transaction Payload <pre><code>{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"receive_tx\",\n    \"params\": [\n        {\n            \"amount\": \"100000\",\n            \"fee\": \"700000\",\n            \"height\": \"1933953\",\n            \"id\": \"64da15cc-be9d-440e-8788-b8d396d44c36\",\n            \"lock_height\": \"0\",\n            \"num_participants\": 2,\n            \"participant_data\": [\n                {\n                    ....\n                }\n            ],\n            \"payment_proof\": null,\n            \"ttl_cutoff_height\": null,\n            \"tx\": {\n                \"body\": {\n                    \"inputs\": [\n                        ...\n                    ],\n                    \"kernels\": [\n                       ...\n                    ],\n                    \"outputs\": [\n                       ....\n                    ]\n                },\n                \"offset\": \"8...2e98\"\n            },\n            \"version_info\": {\n                \"block_header_version\": 6,\n                \"orig_version\": 3,\n                \"version\": 3\n            }\n        },\n        null,\n        null\n    ]\n}\n</code></pre> </li> </ul> </li> <li>From the request headers you can parse the unique account ID (part of the URL)</li> <li>From the request JSON payload you can parse the transaction <code>id</code> (UUID format)</li> <li>From the request JSON payload you can parse the transaction <code>height</code></li> </ul> <p>Using workflow above you can receive the deposit and collect details needed for next step which is getting  the transaction status. In order to get updated transaction status you will have to wait for the next block<sup>1</sup> to be mined on the network (on average 1 minute, but this can be anywhere between 1 second and few minutes).  Using transaction block <code>height</code> you can compare it with current blockchain height and when it is <code>transaction_height</code> + 1 you can get the transaction status<sup>1</sup> .</p> <p><sup>1 With current network traffic 99% of transactions are placed in the very next block, but  this may change with time, you can rise this number to 2 or 3 blocks.</sup> </p> <p>Get The Transaction Status</p> <ul> <li>Using transaction <code>id</code> from the received JSON payload you can query wallet database to find      the corresponding record</li> <li> Example: Get Wallet Transaction by UUID via CLIvia Owner API <ul> <li>Request:      <pre><code>epic-wallet txs -t 64da15cc-be9d-440e-8788-b8d396d44c36\n</code></pre></li> <li>Response:      <pre><code>Transaction Log - Account 'default' - Block Height: 1934426\n----------------------------------------------------------------------------------------------------------\n Id  Type         Shared Transaction Id  Creation Time        TTL   Confirmed?  Confirmation Time    Num.    \n\n==========================================================================================================\n 63  Received Tx  64da15cc-...-b8d44c36  2023-04-24 21:28:35  None  true        2023-04-24 21:49:37  0      \n----------------------------------------------------------------------------------------------------------\n\nWallet Outputs - Account 'default' - Block Height: 1934426\n----------------------------------------------------------------------------------------------------------\n Output Commitment  MMR Index  Block Height  Locked Until  Status   Coinbase?  # Confirms  Value       Tx\n==========================================================================================================\n 08035a8.....14eb2  None       1933954       0             Unspent  false      473         0.00100000  63\n----------------------------------------------------------------------------------------------------------\n\nTransaction Messages - Transaction '63'\n---------------------------------------------------------------------------------------------------------\n Participant Id  Message  Public Key                   Signature\n=========================================================================================================\n 0                        03ad997bf321db8....2ba6cbbe  3045022100add309e15845...38d06ff1dec74aae\n---------------------------------------------------------------------------------------------------------\n 1               None     0200b0c60160e....7394a80a24da8f1d83a7464a01  None\n---------------------------------------------------------------------------------------------------------\n</code></pre></li> </ul> <ul> <li>Request:      <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"retrieve_txs\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"refresh_from_node\": true,\n        \"tx_id\": null,\n        \"tx_slate_id\": \"64da15cc-be9d-440e-8788-b8d396d44c36\"\n    },\n    \"id\": 1\n}\n</code></pre></li> <li>Response:      <pre><code>{\n    \"amount_credited\": \"100000\", \n    \"amount_debited\": \"0\", \n    \"confirmation_ts\": \"2023-04-24T21:49:37.640611277Z\", \n    \"confirmed\": true, \n    \"creation_ts\": \"2023-04-24T21:28:35.521869348Z\", \n    \"fee\": null, \n    \"id\": 63, \n    \"kernel_excess\": \"0824aea8c5....e9bde6\", \n    \"kernel_lookup_min_height\": 1933953,\n    \"messages\": \n        {\"messages\": [\n            {\"id\": \"0\", \"message\": \"\", \"message_sig\": \"add30...dec74aae\", \"public_key\": \"03ad...b0a022\"}, \n            {\"id\": \"1\", \"message\": null, \"message_sig\": null, \"public_key\": \"020..4a01\"}\n        ]}, \n    \"num_inputs\": 0, \n    \"num_outputs\": 1, \n    \"parent_key_id\": \"02000..0000\", \n    \"payment_proof\": null, \n    \"stored_tx\": null, \n    \"ttl_cutoff_h eight\": null, \n    \"tx_slate_id\": \"64da15cc-be9d-440e-8788-b8d396d44c36\", \n    \"tx_type\": \"TxReceived\"\n}\n</code></pre></li> </ul> </li> </ul> <p><code>id</code> vs  <code>tx_slate_id</code></p> <p>You can notice 2 different id fields in the transaction data and the wallet history:</p> <p> <code>tx_slate_id</code> is a <code>UUID</code> string that should be used to identify the transactions,      it is unique for each transaction.</p> <p> <code>id</code> is an integer stored in the local wallet database, it is used only as local ID,      in most cases you can ignore that field.</p> <p>Either of the mentioned id's are stored on the blockchain, the only field that can be quered on  the blockchain explorer is the value of the <code>Output Commitment</code>, which does not help with getting any transaction details, it will only show that given output exists on the blockchain.</p> <p>Successful Deposit</p> <p>Once you can confirm that transaction (deposit) have <code>confirmed</code> status updated to <code>true</code> you can be 100% certain  that deposit was successful, transaction is already on-chain and can not be cancelled or changed. At this point balance in your wallet is updated and user's coins are waiting for network confirmations to become spendable. </p> <p>It is up to the sender's wallet to decide how many network confirmations is needed (minimum 1 which on average takes  1 minute), hence it is strongly recommend for you to decide on your own how many confirmations you want to wait  before updating exchange account balance. We recommend to use at least 3 confirmations, but anything between  3-10 is reasonable and safe.</p> <p>Unsuccessful Deposit</p> <p>If <code>confrimed</code> status is not changed to <code>true</code> after number of blocks you decided to wait we can assume that  transaction wasn't successful (which may happen for multiple reasons, usually caused by poor connection on the  client side) and should be cancelled in your wallet. You should also notify user about failed deposit and ask to send the coins again.</p> Example: Cancel The Transaction via CLIvia Owner API <pre><code>epic-wallet cancel -t 64da15cc-be9d-440e-8788-b8d396d44c36\n</code></pre> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"cancel_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"tx_id\": null,\n        \"tx_slate_id\": \"64da15cc-be9d-440e-8788-b8d396d44c36\"\n    },\n    \"id\": 1\n}\n</code></pre> <p>It is recommended to always cancel not confirmed transactions to keep wallet free from 'ghost' pending balances.</p> <p>Wallet Operations Are Time Consuming</p> <p>Keep in mind that each wallet operation that requires updating data from the EPIC Node (i.e. confirming  the transaction status, refreshing balance, etc.) is taking time, and the more outputs and transaction are in the wallet the more time it takes. It is recommended to carefully design logic responsible for it,  i.e. implement task queue, configure timeouts etc. Also, it is recommended to have own database to keep  track of the transactions and clean the wallet history (i.e. cron job) when it's getting heavy to avoid timeouts.</p> <p>Using a local EPIC Node will bring substential savings in runtimes.</p>"},{"location":"integrations/exchanges/#withdrawals-workflow","title":"Withdrawals Workflow","text":"<p>Unfortunately, while <code>HTTP/S Method</code> is a great method to receive transactions from the users, it is not easy to send the coins the same way:</p> <p>HTTP/S Method Drawbacks</p> <ul> <li>Need to open/forward device ports for outside connections</li> <li>Need to create firewall rule for above ports</li> <li>Need to be online during the process in order to receive coins</li> <li>Using private IP address as wallet address</li> </ul> <p>For multiple reasons, i.e. those mentioned above, receiving via this method is not supported in our mobile  wallets: Epic-Pay and Stack-Wallet. </p> <p>To deliver a much better experience for both - users and developers, we recommend using the <code>Epicbox Method</code>  to process user's withdraws.</p> <p> Epicbox Workflow Scheme </p> <p>Recommendation</p> <ul> <li>Using separate wallet instance to process the withdrawals</li> <li>Running 24/7 <code>epicbox listener</code> on that wallet instance</li> <li>Ask user to provide epicbox address for each withdraw request</li> <li> Validate the address In order to make sure address provided by the users is valid you can do simple checks. <p>esZft8D3Fhv1pYmApQBXgWKquzYNTEPaKTGvGUfpbMuuGDXbunz1@epicbox.epic.tech</p> <ul> <li>Part before the @ is a wallet public key represented in base58 encoding,     it has to start with an <code>es</code> and have exactly 52 characters</li> <li>Part after the @ is domain of the epicbox server, it can be different but will      always start with subdomain <code>epicbox</code> </li> </ul> </li> <li>Process the request using the <code>epicbox method</code> <ul> <li> Example: Send Transaction With Epicbox  Before making a CLI/API calls make sure you have <code>epicbox listener</code> running:<ul> <li><code>epic-wallet listen -m epicbox</code></li> </ul> via CLIvia Owner API <ul> <li>Request:      <pre><code>epic-wallet send -m epicbox -d &lt;address@epicbox.domain.com&gt; &lt;amount&gt;\n</code></pre></li> <li>Response:      <pre><code>INFO     Tx created: &lt;amount&gt; epic to &lt;address@epicbox.domain.com&gt; (strategy 'smallest')\nDEBUG    Connecting to the epicbox server at wss://epicbox.domain.com:443 ..\nDEBUG    Starting to send slate with id [3b2fd6fb-fc63-4a39-89b6-c6a308952c1f]\nDEBUG    Slate sent successfully!\nCommand  'send' completed successfully\n</code></pre></li> </ul> <ul> <li>Request:      <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"init_send_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"args\": {\n            \"src_acct_name\": null,\n            \"amount\": \"10000000\",\n            \"minimum_confirmations\": 3,\n            \"max_outputs\": 500,\n            \"num_change_outputs\": 1,\n            \"selection_strategy_is_use_all\": false,\n            \"message\": \"Withdraw for acccount ID: XX\",\n            \"target_slate_version\": null,\n            \"payment_proof_recipient_address\": \"\",\n            \"ttl_blocks\": null,\n            \"send_args\": {\n                \"method\": \"epicbox\",\n                \"dest\": \"address@epicbox.domain.com\",\n                \"finalize\": true,\n                \"post_tx\": true,\n                \"fluff\": false\n              }\n        }\n    },\n    \"id\": 1\n}\n</code></pre></li> <li>Response (automatically sent to the receiver):      <pre><code>{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"Ok\": {\n            \"amount\": \"10000000\",\n            \"fee\": \"800000\",\n            \"height\": \"1434533\",\n            \"id\": \"tx_slate_id\",\n            \"lock_height\": \"0\",\n            \"num_participants\": 2,\n            \"participant_data\": [{\n                \"id\": \"0\",\n                \"message\": \"Withdraw for acccount ID: XX\",\n                \"message_sig\": \"...\",\n                \"part_sig\": null,\n                \"public_blind_excess\": \"...\",\n                \"public_nonce\": \"...\"\n            }],\n            \"payment_proof\": {\n                \"receiver_address\": \"...\",\n                \"receiver_signature\": null,\n                \"sender_address\": \"...\"\n            },\n            \"ttl_cutoff_height\": null,\n            \"tx\": {\n                \"body\": {\n                    \"inputs\": [{\n                        \"commit\": \"...\",\n                        \"features\": \"Coinbase\"\n                    }],\n                    \"kernels\": [{\n                        \"excess\": \"....\",\n                        \"excess_sig\": \"....\",\n                        \"features\": \"Plain\",\n                        \"fee\": \"800000\",\n                        \"lock_height\": \"0\"\n                    }],\n                    \"outputs\": [{\n                        \"commit\": \"....\",\n                        \"features\": \"Plain\",\n                        \"proof\": \"....\"\n                    }]\n                },\n                \"offset\": \"...\"\n            },\n            \"version_info\": {\n                \"orig_version\": 3,\n                \"version\": 3,\n                \"block_header_version\": 6\n            }\n        }\n    }\n}\n</code></pre></li> </ul> </li> </ul> </li> <li>Once transaction is initialized next steps are handled by epicbox server and listener:<ul> <li>receiver will have to open the wallet and download the transaction slate from the epicbox server</li> <li>receiver's <code>epicbox listener</code> will send the response slate to the epicbox server</li> <li>sender's <code>epicbox listener</code> will download the response slate from the epicbox server</li> <li>sender's <code>epicbox listener</code> will finalize and post the transaction to the network</li> </ul> </li> <li>In order to confirm that transaction was successfully finalized:<ul> <li>Use <code>tx_slate_id</code> and query the wallet local database for transaction status</li> <li>In the <code>epicbox listener</code> logs look for:     <pre><code>Slate [tx_slate_id] received back from [address@epicbox.domain.com] for [amount] epics\nSlate [tx_slate_id] finalized successfully\n</code></pre></li> </ul> </li> </ul> <p>Unsuccessful Withdraw</p> <p>This type of transaction will be 'pending' until receiver's wallet will respond. It is hard to say how long it should be possible to finalize before considering it as failed attempt,  anything between 24-48h sound reasonable. After that time sender's wallet should cancel the transaction  to release the locked outputs and display feedback on user's account about unsuccessful withdraw.</p> <p>Control Wallet Outputs</p> <p>Make sure that wallet instance responsible for withdraws is always full of outputs ready to use for the  transaction requests.</p> <ul> <li> Example: Check Wallet Outputs via CLIvia Owner API <ul> <li>Request:      <pre><code>epic-wallet outputs\n</code></pre></li> <li>Response:      <pre><code>Wallet Outputs - Account 'default' - Block Height: 1944887\n---------------------------------------------------------------------------------------------------\n Output Commitment  MMR Index  Block Height   Status       Coinbase?  # Confirms  Value         Tx \n===================================================================================================\n 0848c1...477c3a37  None       1943905        Locked       false      983         4.84205263    45 \n---------------------------------------------------------------------------------------------------\n 081e76...ff3da6fd  None       1943927        Locked       false      961         0.49421578    45 \n---------------------------------------------------------------------------------------------------\n 08b7ef...751d85b3  None       1943927        Locked       false      961         0.49421578    45\n</code></pre></li> </ul> <ul> <li>Request:      <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"retrieve_outputs\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"include_spent\": false,\n        \"refresh_from_node\": true,\n        \"tx_id\": null\n    },\n    \"id\": 1\n}\n</code></pre></li> <li>Response :      <pre><code>{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"Ok\": [\n            true,\n            [\n                {\n                    \"commit\": \"...\",\n                    \"output\": {\n                        \"commit\": \"...\",\n                        \"height\": \"1\",\n                        \"is_coinbase\": true,\n                        \"key_id\": \"...\",\n                        \"lock_height\": \"4\",\n                        \"mmr_index\": null,\n                        \"n_child\": 0,\n                        \"root_key_id\": \"...\",\n                        \"status\": \"Unspent\",\n                        \"tx_log_entry\": 0,\n                        \"value\": \"1457920000\"\n                    }\n                },\n                {\n                    \"commit\": \"...\",\n                    \"output\": {\n                        \"commit\": \"...\",\n                        \"height\": \"2\",\n                        \"is_coinbase\": true,\n                        \"key_id\": \"...\",\n                        \"lock_height\": \"5\",\n                        \"mmr_index\": null,\n                        \"n_child\": 1,\n                        \"root_key_id\": \"...\",\n                        \"status\": \"Unspent\",\n                        \"tx_log_entry\": 1,\n                        \"value\": \"1457920000\"\n                    }\n                }\n            ]\n        ]\n    }\n}\n</code></pre></li> </ul> </li> </ul> <p>If your wallet is running out of outputs, you can create them by sending to the same wallet with change:</p> <pre><code>epic-wallet send -m self -d &lt;account_name&gt; &lt;amount&gt; -o &lt;number_of_new_outputs&gt;\n</code></pre> <p>Imagine you have only one output for 100 coins, you can then use the above method, send to yourself 1 coin and remaining 99 devide in to 10 new outputs, 9.99 coins each. This will result with 11 outputs in total,  but will cost some fee for each new created output. <code>-o</code> flag can be added to every <code>send</code> command.</p> <p>Always keep less than 100 outputs in your wallet!</p>"},{"location":"node/","title":"Introduction","text":""},{"location":"node/#building-and-running-epic-node","title":"Building and running EPIC node","text":"<ul> <li> Running Epic-Cash Windows  - EPIC blockchain on Windows.</li> <li> Running Epic-Cash Linux  - EPIC blockchain on Linux distributions.</li> <li> Build EPIC Node  - Epic Node - Build, Configuration and Running</li> </ul>"},{"location":"node/#understand-the-epic-node-implementation","title":"Understand the EPIC Node implementation","text":"<ul> <li> RUST docs </li> <li> Dandelion - introduction  - About transaction propagation and cut-through. Stemming and fluffing!</li> <li> Dandelion - simulation  - Dandelion simulation - aggregating transaction without lock_height Stemming and fluffing!</li> <li> Chain Synchronization  - About how Epic's blockchain is synchronized</li> <li> Merkle - Introduction  - Technical explanation of EPIC's favorite kind of merkle trees</li> <li> Merkle - Proof Graph  - Example merkle proof with pruning applied</li> <li> Blocks and Headers  - How Epic tracks blocks and headers on the chain</li> <li> Contract ideas  - Ideas on how to implement contracts</li> <li> Internal Pool  - Technical explanation of the transaction pool</li> <li> Pruning  - Technical explanation of pruning</li> </ul>"},{"location":"node/cli/","title":"Node CLI","text":"<p>**Node Command Line API **</p> <p>You can manage your EPIC Node (server) by using built-in CLI.</p> <p>Get compiled binaries from the Downloads section or build from source github.com/epiccash</p>"},{"location":"node/cli/#usage","title":"Usage","text":"WindowsLinux Usage<pre><code>epic.exe [FLAGS] [SUBCOMMAND]\n</code></pre> Usage<pre><code>sudo ./epic [FLAGS] [SUBCOMMAND]\n</code></pre>"},{"location":"node/cli/#flags","title":"Flags","text":"<pre><code>--floonet        Run epic against the Floonet (as opposed to mainnet)\n-h, --help       Prints help information\n-V, --version    Prints version information\n</code></pre>"},{"location":"node/cli/#subcommands","title":"Subcommands","text":""},{"location":"node/cli/#client","title":"<code>client</code>","text":"<p>Communicates with the Epic server</p> <p>CLI commands</p> <pre><code>USAGE:\n    epic client [SUBCOMMAND]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nSUBCOMMANDS:\n    ban                   Ban peer\n    help                  Prints this message or the help of the given subcommand(s)\n    listconnectedpeers    Print a list of currently connected peers\n    status                Current status of the Epic chain\n    unban                 Unban peer\n</code></pre> <p><code>ban</code> <pre><code>USAGE:\n    epic client ban --peer &lt;peer&gt;\n\nOPTIONS:\n    -p, --peer &lt;peer&gt;    Peer ip and port (e.g. 10.12.12.13:13414)\n</code></pre></p> <p><code>unban</code> <pre><code>USAGE:\n    epic client unban --peer &lt;peer&gt;\n\nOPTIONS:\n    -p, --peer &lt;peer&gt;    Peer ip and port (e.g. 10.12.12.13:13414)\n</code></pre></p> <p><code>listconnectedpeers</code> <pre><code>USAGE:\n    epic client listconnectedpeers\n</code></pre></p> <p><code>status</code> <pre><code>USAGE:\n    epic client status\n</code></pre></p>"},{"location":"node/cli/#server","title":"<code>server</code>","text":"<p>Control the Epic server</p> <p>CLI commands</p> <pre><code>USAGE:\n    epic server [OPTIONS] [SUBCOMMAND]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -a, --api_port &lt;api_port&gt;          Port on which to start the api server (e.g. transaction pool api)\n    -c, --config_file &lt;config_file&gt;    Path to a epic-server.toml configuration file\n    -p, --port &lt;port&gt;                  Port to start the P2P server on\n    -s, --seed &lt;seed&gt;                  Override seed node(s) to connect to\n    -w, --wallet_url &lt;wallet_url&gt;      The wallet listener to which mining rewards will be sent\n\nSUBCOMMANDS:\n    config    Generate a configuration epic-server.toml file in the current directory\n    help      Prints this message or the help of the given subcommand(s)\n    run    Print    Run the Epic server in this console\n</code></pre>"},{"location":"node/errors/","title":"Errors","text":"<p>There is two kind of errors that can appear when making a call on the API v2: basic JSON-RPC errors and API result errors</p>"},{"location":"node/errors/#json-rpc-errors","title":"JSON-RPC Errors","text":"<p>These errors are often due to a misconstrued JSON body, for example:</p> <p>there is not enough parameters:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"WrongNumberOfArgs. Expected 4. Actual 5\"\n  },\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>or invalid type of data entered:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"InvalidArgStructure \\\"start_height\\\" at position 1.\"\n  },\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>or method not found:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Method not found\"\n  },\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>this list of errors is not exhaustive, for more information about the possible error objects see the JSON RPC 2.0 specifications.</p>"},{"location":"node/errors/#api-result-errors","title":"API Result Errors","text":"<p>These type of errors are due to an API error during the query.  This type of error is wrapped into the result.</p> <p>For example, trying to ban a peer that's already banned:</p> <pre><code>{\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Err\": {\n      \"Internal\": \"ban peer error: PeerNotFound\"\n    }\n  }\n}\n</code></pre> <p>or a block that doesn't exist:</p> <pre><code>{\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Err\": \"NotFound\"\n  }\n}\n</code></pre>"},{"location":"node/foreign/","title":"Foreign","text":"<p>Foreign (public) node API</p> <p>This API is used to query node about various information on the blockchain. Foreign (public) API is designed to be used also by users other than owner. If your Foreign API is public, others can use it to get blockchain information. </p> <p>This API is used by wallets to interact with the blockchain, validate and send transactions.</p> <p>By default, node API is exposed only for local connections and requires authentication.</p> <p></p> <p>When running <code>epic</code> node with defaults, foreign API URL is available at <code>localhost:3413/v2/foreign</code>.</p> <p><code>Basic Authentication</code> credentials:</p> <ul> <li>user: <code>epic</code>, </li> <li>password saved in <code>~/.epic/main/.api_secret</code> file.</li> </ul> <p>In order to change API URL, authentication and other settings go to (by default) <code>~/.epic/main/epic-server.toml</code> file.</p> <p>Make sure your <code>epic</code> node is running before calling API endpoints.</p> <p>API call must be done via <code>POST</code> requests with <code>JSON</code> payload.</p>"},{"location":"node/foreign/#examples","title":"Examples","text":"<p>How to send POST request via cURL</p> Windows PowerShellUnix Terminal <ul> <li>With authentication <pre><code>curl -u \"epic:$(cat ~/.epic/main/.api_secret)\" -d '{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"get_version\\\", \\\"params\\\": [], \\\"id\\\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/foreign\n</code></pre></li> <li>Without authentication <pre><code>curl -d '{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"get_version\\\", \\\"params\\\": [], \\\"id\\\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/foreign\n</code></pre></li> </ul> <ul> <li>With authentication <pre><code>curl -u \"epic:$(cat ~/.epic/main/.api_secret)\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"get_version\", \"params\": [], \"id\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/foreign\n</code></pre></li> <li>Without authentication <pre><code>curl -d '{\"jsonrpc\": \"2.0\", \"method\": \"get_version\", \"params\": [], \"id\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/foreign\n</code></pre></li> </ul> <p></p> <p>Example API call:</p> PythonNodeJS <p><code>pip install requests</code></p> Python 3.5+<pre><code>from typing import Union\n\nimport requests\n\napi_secret_path = '~\\.epic\\main\\.api_secret'\napi_secret = open(api_secret_path, 'r').read()\napi_user = 'epic'\napi_url = \"http://localhost:3413/v2\"\n\n\ndef api_call(method: str, params: Union[list, dict], api_type: str):\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': method,\n        'params': params\n        }\n\n    url = f\"{api_url}/{api_type}\"\n    auth = (api_user, api_secret)\n    response = requests.post(url=url, json=payload, auth=auth)\n\n    try:\n        if response.status_code in [200, 201]:\n            return response.json()\n    except Exception as e:\n        print(e)\n\n    return response.text\n\n\nforeign_call = api_call(method='get_version', params=[], api_type='foreign')\nprint(foreign_call)\n\nowner_call = api_call(method='get_status', params=[], api_type='owner')\nprint(owner_call)\n</code></pre> <p><code>npm install request</code></p> NodeJS 18.0+<pre><code>const request = require('request');\n\nconst host = \"localhost:3413\"\nconst user = 'epic';\nconst api_secret = \" \";  // `cat ~/.epic/main/.api_secret`\nconst url = `http://${user}:${api_secret}@${host}/v2`\n\nconst foreign_method = 'get_version';\nconst foreign_params = [];\nconst foreign_payload = {\n    id: 1,\n    method: foreign_method,\n    params: foreign_params,\n    jsonrpc: '2.0'\n}\n\nconst owner_method = 'get_status';\nconst owner_params = [];\nconst owner_payload = {\n    id: 1,\n    method: owner_method,\n    params: owner_params,\n    jsonrpc: '2.0'\n}\n\n\n// Foreign API Call\nrequest({\n    url: `${url}/foreign}`,\n    method: \"POST\",\n    json: true,\n    body: foreign_payload\n}, function (error, response, body){\n    console.log(body);\n});\n\n\n// Owner API Call\nrequest({\n    url: `${url}/owner}`,\n    method: \"POST\",\n    json: true,\n    body: owner_payload\n}, function (error, response, body){\n    console.log(body);\n});\n</code></pre>"},{"location":"node/foreign/#methods","title":"Methods","text":""},{"location":"node/foreign/#get_version","title":"<code>get_version</code>","text":"<p>Returns the node version and block header version (used by epic-wallet).</p> RequestResponse <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_version\",\n  \"params\": [],\n  \"id\": 1\n}\n</code></pre> <pre><code>{\n\"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"node_version\": \"3.0.0\",\n      \"block_header_version\": 6\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_header","title":"<code>get_header</code>","text":"<p>Gets block header given either a height, a hash or an unspent output commitment. Only one parameter is required. If multiple parameters are provided only the first one in the list is used.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_header\",\n    \"params\": [null, \"00000100c54dcb7a9cbb03aaf55da511aca2c98b801ffd45046b3991e4f697f9\", null],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"cuckoo_solution\": [\n        9886309,\n        35936712,\n        43170402,\n        48069549,\n        70022151,\n        97464262,\n        107044653,\n        108342481,\n        118947913,\n        130828808,\n        144192311,\n        149269998,\n        179888206,\n        180736988,\n        207416734,\n        227431174,\n      ],\n      \"edge_bits\": 29,\n      \"hash\": \"00000100c54dcb7a9cbb03aaf55da511aca2c98b801ffd45046b3991e4f697f9\",\n      \"height\": 374336,\n      \"kernel_root\": \"d294e6017b9905b288dc62f6f725c864665391c41da20a18a371e3492c448b88\",\n      \"nonce\": 4715085839955132421,\n      \"output_root\": \"12464313f7cd758a7761f65b2837e9b9af62ad4060c97180555bfc7e7e5808fa\",\n      \"prev_root\": \"e22090fefaece85df1441e62179af097458e2bdcf600f8629b977470db1b6db1\",\n      \"previous\": \"0000015957d92c9e04c6f3aec8c5b9976f3d25f52ff459c630a01a643af4a88c\",\n      \"range_proof_root\": \"4fd9a9189e0965aa9cdeb9cf7873ecd9e6586eac1dd9ca3915bc50824a253b02\",\n      \"secondary_scaling\": 561,\n      \"timestamp\": \"2019-10-03T16:08:11+00:00\",\n      \"total_difficulty\": 1133587428693359,\n      \"total_kernel_offset\": \"0320b6f8a4a4180ed79ecd67c8059c1d7bd74afe144d225395857386e5822314\",\n      \"version\": 2\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_block","title":"<code>get_block</code>","text":"<p>Gets block details given either a height, a hash or an unspent output commitment. Only one parameter is required. If multiple parameters are provided only the first one in the list is used.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_block\",\n    \"params\": [374274, null, null],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"header\": {\n        \"cuckoo_solution\": [\n          1263501,\n          14648727,\n          42430559,\n          58137254,\n          68666726,\n          72784903,\n          101936839,\n          104273571,\n          123886748,\n          131179768,\n          155443226,\n        ],\n        \"edge_bits\": 29,\n        \"hash\": \"000001e16cb374e38c979c353a0aaffbf5b939da7688f69ad99efda6c112ea9b\",\n        \"height\": 374274,\n        \"kernel_root\": \"e17920c0e456a6feebf19e24a46f510a85f21cb60e81012f843c00fe2c4cad6e\",\n        \"nonce\": 4354431877761457166,\n        \"output_root\": \"1e9daee31b80c6b83573eacfd3048a4af57c614bd36f9acd5fb50fbd236beb16\",\n        \"prev_root\": \"9827b8ffab942e264b6ac81f2b487e3de65e411145c514092ce783df9344fa8a\",\n        \"previous\": \"00001266a73ba6a8032ef8b4d4f5508407ffb1c270c105dac06f4669c17af020\",\n        \"range_proof_root\": \"3491b8c46a3919df637a636ca72824377f89c4967dcfe4857379a4a82b510069\",\n        \"secondary_scaling\": 571,\n        \"timestamp\": \"2019-10-03T15:15:35+00:00\",\n        \"total_difficulty\": 1133438031814173,\n        \"total_kernel_offset\": \"63315ca0be65c9f6ddf2d3306876caf9f458a01d1a0bf50cc4d3c9b699161958\",\n        \"version\": 2\n      },\n      \"inputs\": [],\n      \"kernels\": [\n        {\n          \"excess\": \"08761e9cb1eea5bfcf771d1218b5ec802798d6eecaf75faae50ba3a1997aaef009\",\n          \"excess_sig\": \"971317046c533d21dff3e449cc9380c2be10b0274f70e009aa2453f755239e3299883c09a1785b15a141d89d563cdd59395886c7d63aba9c2b6438575555e2c4\",\n          \"features\": \"Coinbase\",\n          \"fee\": 0,\n          \"lock_height\": 0\n        }\n      ],\n      \"outputs\": [\n        {\n          \"block_height\": 374274,\n          \"commit\": \"09d33615563ba2d65acc2b295a024337166b9f520122d49730c73e8bfb43017610\",\n          \"merkle_proof\": \"00000000003e6f5e000000000000000f60fe09a7601a519d9be71135404580ad9de0964c70a7619b1731dca2cd8c1ae1dce9f544df671d63ff0e05b58f070cb48e163ca8f44fb4446c9fe1fc9cfef90e4b81e7119e8cf60acb9515363ecaea1ce20d2a8ea2f6f638f79a33a19d0d7b54cfff3daf8d21c243ba4ccd2c0fbda833edfa2506b1b326059d124e0c2e27cda90268e66f2dcc7576efac9ebbb831894d7776c191671c3294c2ca0af23201498a7f5ce98d5440ca24116b40ac98b1c5e38b28c8b560afc4f4684b81ab34f8cf162201040d4779195ba0e4967d1dd8184b579208e9ebebafa2f5004c51f5902a94bf268fd498f0247e8ba1a46efec8d88fa44d5ecb206fbe728ee56c24af36442eba416ea4d06e1ea267309bc2e6f961c57069e2525d17e78748254729d7fdec56720aa85fe6d89b2756a7eeed0a7aa5d13cfb874e3c65576ec8a15d6df17d7d4856653696b10fb9ec205f5e4d1c7a1f3e2dd2994b12eeed93e84776d8dcd8a5d78aecd4f96ae95c0b090d104adf2aa84f0a1fbd8d319fea5476d1a306b2800716e60b00115a5cca678617361c5a89660b4536c56254bc8dd7035d96f05de62b042d16acaeff57c111fdf243b859984063e3fcfdf40c4c4a52889706857a7c3e90e264f30f40cc87bd20e74689f14284bc5ea0a540950dfcc8d33c503477eb1c60\",\n          \"mmr_index\": 4091742,\n          \"output_type\": \"Coinbase\",\n          \"proof\": \"7adae7bcecf735c70eaa21e8fdce1d3c83d7b593f082fc29e16ff2c64ee5aaa15b682e5583257cf351de457dda8f877f4d8c1492af3aaf25cf5f496fce7ca54a0ef78cc61c4252c490386f3c69132960e9edc811add6415a6026d53d604414a5f4dd330a63fcbb005ba908a45b2fb1950a9529f793405832e57c89a36d3920715bc2d43db16a718ecd19aeb23428b5d3eeb89d73c28272a7f2b39b8923e777d8eb2c5ce9872353ba026dc79fdb093a6538868b4d184215afc29a9f90548f9c32aa663f9197fea1cadbb28d40d35ed79947b4b2b722e30e877a15aa2ecf95896faad173af2e2795b36ce342dfdacf13a2f4f273ab9927371f52913367d1d58246a0c35c8f0d2330fcddb9eec34c277b1cfdaf7639eec2095930b2adef17e0eb94f32e071bf1c607d2ef1757d66647477335188e5afc058c07fe0440a67804fbdd5d35d850391ead3e9c8a3136ae1c42a33d5b01fb2c6ec84a465df3f74358cbc28542036ae4ef3e63046fbd2bce6b12f829ed193fb51ea87790e88f1ea686d943c46714b076fb8c6be7c577bca5b2792e63d5f7b8f6018730b6f9ddaf5758a5fa6a3859d68b317ad4383719211e78f2ca832fd34c6a222a8488e40519179209ad1979f3095b7b7ba7f57e81c371989a4ace465149b0fe576d89473bc596c54cee663fbf78196e7eb31e4d56604c5226e9242a68bda95e1b45473c52f63fe865901839e82079a9935e25fe8d44e339484ba0a62d20857c6b3f15ab5c56b59c7523b63f86fa8977e3f4c35dc8b1c446c48a28947f9d9bd9992763404bcba95f94b45d643f07bb7c352bfad30809c741938b103a44218696206ca1e18f0b10b222d8685cc1ed89d5fdb0c7258b66486e35c0fd560a678864fd64c642b2b689a0c46d1be6b402265b7808cd61a95c2b4a4df280e3f0ec090197fb039d32538d05d3f0a082f5\",\n          \"proof_hash\": \"cfd97db403c274220bb0dbaf3ecc88e483c0b707d8e6f16dfda37cd4f2c3211c\",\n          \"spent\": false\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_tip","title":"<code>get_tip</code>","text":"<p>Returns details about the state of the current fork tip.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_tip\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"height\": 374350,\n      \"last_block_pushed\": \"000000543c69a0306b5463b92939643442a44a6d9be5bef72bea9fc1d718d310\",\n      \"prev_block_to_last\": \"000001237c6bac162f1add2b122fab6a254b9fcc2c4b4c8c632a8c39855521f1\",\n      \"total_difficulty\": 1133621604919005\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_kernel","title":"<code>get_kernel</code>","text":"<p>Returns a <code>LocatedTxKernel</code> based on the kernel excess. The <code>min_height</code> and <code>max_height</code> parameters are both optional. If not supplied, <code>min_height</code> will be set to 0 and <code>max_height</code> will be set to the head of the chain. The method will start at the block height <code>max_height</code> and traverse the kernel MMR backwards, until either the kernel is found or min_height is reached.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_kernel\",\n    \"params\": [\"09c868a2fed619580f296e91d2819b6b3ae61ab734bf3d9c3eafa6d9700f00361b\", null, null],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"height\": 374557,\n      \"mmr_index\": 2211662,\n      \"tx_kernel\": {\n        \"excess\": \"09c868a2fed619580f296e91d2819b6b3ae61ab734bf3d9c3eafa6d9700f00361b\",\n        \"excess_sig\": \"1720ec1b94aa5d6ba4d567f7446314f9a6d064eea69c5675cc5659f65f290d80b0e9e3a48d818cadba0a4e894bbc6eb6754b56f53813e2ee0b1447969894ca4a\",\n        \"features\": \"Coinbase\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_outputs","title":"<code>get_outputs</code>","text":"<p>Retrieves the details about specifics outputs. Supports retrieval of multiple outputs in a single request. Support retrieval by both commitment string and block height. Last field are for whether or not the response will include rangeproof and merkle proof.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_outputs\",\n    \"params\": [\"09bab2bdba2e6aed690b5eda11accc13c06723ca5965bb460c5f2383655989af3f\",\"08ecd94ae293863286e99d37f4685f07369bc084ba74d5c59c7f15359a75c84c03\"],376150, 376154, true, true],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": [\n      {\n        \"block_height\": 374568,\n        \"commit\": \"09bab2bdba2e6aed690b5eda11accc13c06723ca5965bb460c5f2383655989af3f\",\n        \"merkle_proof\": null,\n        \"mmr_index\": 4093403,\n        \"output_type\": \"Transaction\",\n        \"proof\": \"e30aa961d6f89361a9a3c60f73e3551f50a3887212e524b5874ac50c1759bb95bc8e588d82dd51d84c7cbaa9abe79e0b8fe902bcfda17276c24d269fbf636aa2016c65a760a02e18338a33e83dec8e51fbfd953ee5b765d97ce39ba0850790d2104812a1d15d5eaa174de548144d3a7d413906d85e22f89065ef727910ee4c573494520c43e36e83dacee8096666aa4033b5e8322e72930c3f8476bb7be9aef0838a2ad6c28f4f5212708bf3e5954fc3971d66b7835383b96406fa65415b64ecd53a747f41d785c3e3615c18dfdbe39a0920fefcf6bc55fe65b4b215b1ad98c80fdafbef6f21ab60596f2d9a3e7bc45d750e807d5eb883dadde1625d4f20af9f1315b8bea08c97fad922afe2000c84c9eb5f96b2a24da7a637f95c1102ecfc1257e19bc4120082f5ee76448c90abd55108256f8341e0f4009cfc3906a598de465467ee1ee072bfd3384e1a0b9039192d1edc33092d7b09d1164c4fc4c378227a391600a8a5d5ba5fe36a2a4eabe0dbae270aefa5a5f2df810cda79211805206ad93ae08689e2675aad025db3499d43f1effc110dfb2f540ccd6eb972c02f98e8151535c099381c8aeb1ea8aad2cfdf952e6ab9d26e74a5611d943d02315e212eb06ce2cd20b4675e6f245e5302cdb8b31d46bb2e718b50ecfad2d440323826570447c2498376c8bad6e4ee97bde41c47f6a20eea406d758c53fb9e8542f114c1a277a6335ad97fdc542c6bbec756dc4a9085c319fe6f0c9e1bb043f01a43c12aa6f4dff8b1220e7f16bc56dee9ccb59fb7c3b7aa6bb33b41c33d8e4b03b6b9cb89491504210dd691b46ffe2862387339d2b62a9dc4c20d629e23eb8b06490c4999433c1b4626fb4d21517072bd8e82511c115ee47bf9a5e40f0a74177f5b573db2e277459877a01b172e026cbb3f76aaf0c61f244584f3a76804dea62175a80d777238\",\n        \"proof_hash\": \"660d706330fc36f611c50d90cb965fddf750cc91f8891a58b5e39b83a5fc6b46\",\n        \"spent\": false\n      },\n      {\n        \"block_height\": 376151,\n        \"commit\": \"08ecd94ae293863286e99d37f4685f07369bc084ba74d5c59c7f15359a75c84c03\",\n        \"merkle_proof\": \"6b2abbd334c9d75409461fba9c1acd4a8d7bc2ab0bc43143f42388b2a3a87b881505ccf8ffc8737fa6fd4fe412a082d974911bd223eae612d0d1d7ddcc09b5e6079c40b011405b2ccb49ce32473c93aea6d843488d5765fea114d3368d34cd05fcb8c2de3903fbaf39b1f064c809f9f1c0d47959d81a508957040eda55c6dce6dd8c43a79c72faffacfabe1d73055790b6249de2f7c603f186cb109eee58fb1426ea48cb781f88df9acd8996d235fe6bfe60e02aae6e3bfe38ed2599baca1430b3b637072d9bdcdc7644f873728e3cd38eff7124ea848cfad67f8e114cf8595c89a3686a4271cfb2b5098597c315c01d04270ca8f70262af967a947f49adacfa4aad8b6fd196dd0ef4e5cefa132c38c7e5f43db12b3d74f0a8d83c3404e73c6b25a12bff70a8ef4526c89b1558810bb744ede53f8c4cc8cc2555e953637722adb41ea5752281cf1f75599f7e59b17f11f5f9ce4f6b2da4141a3398f51d8b834cdc8b00f61915a41d200572a10bb2102cbae7e94aa7ced3c388dcd58282932c99a8fa66f6fc511ff3e8c60d442bbdb49cca1166328ca8c9bbc97d024570b4cc1ca6c7dba3db223e9e27fd9345b94d3cf10e2b54915b87c57e32965bc2db1b1f956d1962812738ca9b2c93fd7825adf4dffddc97aa85ca0f3f412f02d30678a816d2efbfb6778305fd5e610b6e8af30030bc059880c337bfde326b392d5dcd7c36cb0076fbccc7099b94f1f03bdb525d6e3818b6d50b93ced802957a4b03892c71b6679052bd35e92ceea71a96b22b2ed2c129755f0c74fa172f43da2790f3132a7e57e408d2fc5f1126b088cd0398e6dedcb237242e6720e12e8d7a5a1e196eda6241cfee1cc85e9d20af67f3f9bdf91160516ebcd0b8da6bb7b12229e1112b22c9f1aaef1d75441465cfee2ac1c47b5255514316ed4637e192b00ff28491168f2f2b00\",\n        \"mmr_index\": 4107711,\n        \"output_type\": \"Coinbase\",\n        \"proof\": \"7083884b5f64e4e61fb910d2c3c603f7c94490716d95e7144b4c927d0ca6ccc0e069cc285e25f38ee90c402ef26005cad2b4073eeba17f0ae3ea2b87095106ef00634f321d8a49c2feaad485bc9ee552564a6a883c99886d0d3a85af3490d718f5a5cbc70f9dcc9bf5d987fb6072132a4c247d4bbd4af927532a887b1e4250b7277771f6b82f43f4fb5a48089ed58e7d3190a19197e07acfed650f8b2cd5f103e994fb3d3735c5727f06f302bd1f182586297dd57a7951ff296bdf6106704abedc39db77f1293effaa7496a77d19420a6208bc1c589b33dad9540cb6180cccf5e085006b01309419f931e54531d770e5fe00eca584072692a7e4883fd65ed4a7c460665608ab96bf0c7d564fe96a341f14066db413a6fddc359eb11f6f962aca70ca1414c35d7941ce06b77d0a0606081b78d5e64a4501f8e8eba9f0e0889042bc54b4cbfd71087a95af63e0306dba214084d4860b0ce66dc80af44224e5a6fef55800650b05cf1639f81bfdc30950f3634d1fd4375d50c22c7f13f3dfb690e5f155a535aff041b7f800bfe74c60f606e8ab47df60754a0e08221c2a50abe643bb086433afd040a7e6290d1d00b3fe657be3bb05c67f90eb183c2acb53c81e1ca15cd8d35fe9d7d52d8f455398e905bdc77ffb211697d477af25704cf9896e8ce797f4fed03e2ba1615e3ad5646eecaa698470f99437d01d5193f041201502763e8bde51e6dc830b5c676d05c8f7f87c4972c578b8d9d5922ba29f6e4a89a123311d02b5ac44a7d5307f7ed5e4e66aaf749afc76c6fc1114445d6fafeea816a0f985eeacdbe9e6d32a8514ca4aaf7faad4e9d43cde55327ac84bac4d70a9319840e136e713aa31d639e43302f3c71a79f08f4e5c9a19a48d4b46403734cd8f3cc9b67bc26ea8e2a01e63a6f5be6e044e8ed5db5f26d15d25de75f672a79315c5e2407e\",\n        \"proof_hash\": \"7cf77fdaecef6c6fc01edca744c1521581f854a9bac0153971edbb1618fc36ad\",\n        \"spent\": false\n      },\n      {\n        \"block_height\": 376154,\n        \"commit\": \"095c12db5e57e4a1ead0870219bda4ebfb1419f6ab1501386b9dd8dc9811a8c5ff\",\n        \"merkle_proof\": \"00000000003eadc6000000000000000e13c509a17cbb0d81634215cd2482ab6d9eb58b332fcbe6b2c4fa458a63d3cb0dfe3614ebe6e52657870df225d132179fa1ea0fdc2105f0e51d03bc3765a9cd059c60d434a7cae0a3d669b37588c25410f57405c841312cfa50cf514678877a3f4ce8bd3e57723ba75a2b7d61027b2088fbabebdb7336b97ea88b00a7e809a6245def980eba18d987601f4cbd6c3cc9f12a5684fe7a1bc2565a9f8ab63c2db1afa8304f5e23d4754cd97f29c8b06dcb3de4f6d3a83079676b6e9941afe5553a7195384b564ecd6d37522cb5e452cc930d2b549af22698a8fd9bf6cad05a06b09e3f6e672b94e82c0255394b5c187ab76fda653a2491378997ba3d49f9d9c34ca93bc627fe5d98b327c03d429b5473f62672e9d73c4eafd9cb8f62e5158a1ec7eb56653696b10fb9ec205f5e4d1c7a1f3e2dd2994b12eeed93e84776d8dcd8a5d78aecd4f96ae95c0b090d104adf2aa84f0a1fbd8d319fea5476d1a306b2800716e60b00115a5cca678617361c5a89660b4536c56254bc8dd7035d96f05de62b042d16acaeff57c111fdf243b859984063e3fcfdf40c4c4a52889706857a7c3e90e264f30f40cc87bd20e74689f14284bc5ea0a540950dfcc8d33c503477eb1c60\",\n        \"mmr_index\": 4107717,\n        \"output_type\": \"Coinbase\",\n        \"proof\": \"073593bc475478f1e4b648ab261df3b0a6e5a58a617176dd0c8f5e0e1d58b012b40eb9b341d16ee22baf3645ea37705895e731dee5c220b58b0f780d781806a10dfa33e870d0494fba18aaa8a7a709bfb3ddf9eb3e4e75a525b382df68dc6f710275cdffb623373c47c1310ae63479826f435ca4520fdc13bb0d995b7d9a10a7587d61bd4a51c9e32c87f3eb6b0f862cdff19a9ac6cb04d6f7fafb8e94508a851dcf5dc6acea4271bb40117a45319da5522b966091b089698f4f940842458b5b49e212d846be35e0c2b98a00ac3d0b7ceaf081272dbed8abd84fe8f26d57bac1340e8184602436ed8c4470ef9dc214df3405de0e71703abec4456b15e122a94706852bb476213ceadf00529d00d8d3b16dc57f4e4a9a86dacfa719e00366728de42f3f830e73f6113f1e391fab07eba1b40f6466203b0ce14701230e934f6138c575660a03dbb0e59d7295df3115a4fc0909a5520d74657b319fc83481079ad6c13400175e39fa2b86071ba563ce8836320713ef8f55d4e90bee3f57df96c7aef0f2e896f57192fae9675471cd9751bcaf2b15e5a65a9733a6f7f9b8147b8f6e8dac51d056018d411fd252225cf88e56f143143f49e8a0d2e43c10de0442dbc84966817532b1256b6769db987526790a389c371a1fe7a36eacffef82877b4db7a9b5e58722ffbd0fc4fdbd7624365ee326bb8b1e60b999f513715b30f37ef6116eabf53b3524b46c33a1fac49205b39e24aa388d823269c1fc43c3599a06b69433a0a47a03bd871321afb7846a6dbfd5891bd84f89c556231745c929d08445f66f332857bfda1c4f86ae58a01007b7303f870ac24e0ba72d84c0ef4903ac2ff777e2c2dcb4d8e303c74e0c8a559686b4d4c25024ee97601787d4e5a97224af41e5d35d91744292f5a41f64d4e1cae77bebebd77a473f3b54e86f7221aac230942f0468\",\n        \"proof_hash\": \"5dd69c083e2c0fd797a499bbafedee0728849afa3476034280ecadf6eb4bffc2\",\n        \"spent\": false\n      },\n      {\n        \"block_height\": 376153,\n        \"commit\": \"0948cb346b7affe004a6f84fa4b5b44995830f1c332b03537df4c258d51d1afb50\",\n        \"merkle_proof\": \"00000000003eadc4000000000000000dfe3614ebe6e52657870df225d132179fa1ea0fdc2105f0e51d03bc3765a9cd059c60d434a7cae0a3d669b37588c25410f57405c841312cfa50cf514678877a3f4ce8bd3e57723ba75a2b7d61027b2088fbabebdb7336b97ea88b00a7e809a6245def980eba18d987601f4cbd6c3cc9f12a5684fe7a1bc2565a9f8ab63c2db1afa8304f5e23d4754cd97f29c8b06dcb3de4f6d3a83079676b6e9941afe5553a7195384b564ecd6d37522cb5e452cc930d2b549af22698a8fd9bf6cad05a06b09e3f6e672b94e82c0255394b5c187ab76fda653a2491378997ba3d49f9d9c34ca93bc627fe5d98b327c03d429b5473f62672e9d73c4eafd9cb8f62e5158a1ec7eb56653696b10fb9ec205f5e4d1c7a1f3e2dd2994b12eeed93e84776d8dcd8a5d78aecd4f96ae95c0b090d104adf2aa84f0a1fbd8d319fea5476d1a306b2800716e60b00115a5cca678617361c5a89660b4536c56254bc8dd7035d96f05de62b042d16acaeff57c111fdf243b859984063e3fcfdf40c4c4a52889706857a7c3e90e264f30f40cc87bd20e74689f14284bc5ea0a540950dfcc8d33c503477eb1c60\",\n        \"mmr_index\": 4107716,\n        \"output_type\": \"Coinbase\",\n        \"proof\": \"72950da23ad7f0d0381e2f788bf0ac6b6bcb17aaccf0373534122a95714d2d0dbf6a24822b4aab0711a595c80bc36122957111c39292f2a36a973252fb88cbda0b1d61ea8ea84f5171a61f751cac97332637b7cf74cc73144b912ba700dedaa60895f06e947f1e42a8c79d70f924f45fdcb6df5d30289f36ff77d0ae368df5775a739b7a25cbfb63f0cdbdc167b046067c2a021fe0950c7b67515b185b9e4a00ce63b795d49ae184fe5cc726d72fc05d717c4fb55dd5f65967dc282d3c47cb6f8a92cb696e5a1d8cca21214bc766e3de6271791cebf646cda97ae77035da16606f3397f71e103137358c97b9943c3e15403184f61230bd0e3954c7681a0891aa7a0cc32e82d830fb7d8759a04d1da7058630a853508df095142f22158c28bd5e3f2477ad6c8990e63d0377a0fa3d588b6584453778eb38cbaec8a33c1d3772c97a826d4a2f6953c35342993b04567e9fea6fc64fb714653f934faa1a8f635d39eb2903de4bed960a3df07dce7c2e3ff517bbc15f467d0190a579bc07b0f1a910b23269d794835bbb34e8318dcc4fd4159f8f03faa77842d445cf61af9e33caf46aa5fae0812a6476a09c0757e929271a96a245701ab14c1fdd836b92b7e763afa623017f68f1bc4eb716ce735820a1311b743dd8d5c6bb275a2e4e7d2eff8f45417b60cc937086c3e7fd3b612ae064d7237eb6a7bd1a39d8575fac312068fa060bc1ceac4df0754601edaf04ecb1b89c0661ea01a593c3763e456bebbd8487edc0ff3bc6f203965cd92b1706070c59a3795f9dee23087cea0aaec015f1b7bfe4df81818d7a37af781ca7b757ace2fa489f85215ecb85976b1c74c7f1df6d834a8bc63e887407ef6e233c55ea040bc5f2471e99ebc92f2283ff592ff751d9226bd105e68e187c91ecb236c9fa4fb060ae4d706c571ac2123da1debd12737d98be118578\",\n        \"proof_hash\": \"0ce421970d13fe9b3981e308c5d0b549982cdda9f69918289cd95ffcd09e0fc2\",\n        \"spent\": false\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_unspent_outputs","title":"<code>get_unspent_outputs</code>","text":"<p>UTXO traversal. Retrieves last utxos since a start index until a max. Last boolean is optional to whether or not return the rangeproof.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_unspent_outputs\",\n    \"params\": [1, 2, true],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"highest_index\": 2078061,\n      \"last_retrieved_index\": 30,\n      \"outputs\": [\n        {\n          \"block_height\": 1,\n          \"commit\": \"08b7e57c448db5ef25aa119dde2312c64d7ff1b890c416c6dda5ec73cbfed2edea\",\n          \"merkle_proof\": null,\n          \"mmr_index\": 1,\n          \"output_type\": \"Coinbase\",\n          \"proof\": \"9330ad8cde205f317c6537eca96b866293a0489615a9a277b4d3a597c873544c82474932b641e06ac8719604ee52e895e8cd4621b6bfb85780cd9becce14d0700b83a664db2f52a26c425fd777ad88944cdfff38043a2793ed4d9aa67e36cbfd5585579fc69dda930418af5eaf603654f6f751258d2dfc8c2113c171e130f31ec1e6cce2a718e435298fce5d64ffe1bd3464fd7c87cfa92093855be034bfe4439e928bd92ad77fd0a0e00355ee1d1a9ceb1ed0c408dcfdba8c583e7598dc700aaa9f91432097259a405f5b7315a2f7658861e3349bb0dc8bf883726a215f0149ded6613e5ac0670c0c5202247d7c27c8a7d03bdb03c9cf5455463f9b42cf87403e31f8383cc4f49a34c62ae459f5801a9eed4f0ee3dfd5f55b7011c0cae393c474abd6f8c7965b9b5fff3104dd4e39542077c0c8dd2f8ffceb6bb598512d90506d0a7184f20f1498cf458787f23284b54888c9be416d103f760406357a16b6d841a303d5c95b6b474d2d7f0fea0a2a76c897dd2110e9303f54684169421147684c6f1819c33cef3f38ec995a508450c02cd1872f8065fdee723109c18b1dd2ddde75825546ecf0df0793c353b20c946cd64122cea8c116f432336899a16ad24a2aafcb8f900e09a1147135fcf2a54cbf81db308a47a08a49c77c130e5dc5e661cd55a5cc69e607055a5b08111bf61a62ea5778f85119043633f1cab8c756d756c5a34851024ac311a596b1cd919bbca43226f0ba057f6b57de2f6955b0823c3826de7f6096c1c1b6b9b8e4063e1645c0bff32f80561aaa959d97120fbc2ecd9d2be28bd0c17811dc59a88049f6d8952ee9a0a0207693c89ca3ad1197e9bfdfc03be9d845aea8d663969217e3b494cee9e652bc9f8713e2fd5cb1843848f46c3a6ab024d0e3d57ca45454cdbda414adaa835fa147deb4ffb7129cf3a8d86726a0144794\",\n          \"proof_hash\": \"6c301688d9186c3a99444f827bdfe3b858fe87fc314737a4dc1155d9884491d2\",\n          \"spent\": false\n        },\n        {\n          \"block_height\": 29,\n          \"commit\": \"09bab1ddad0f6fec1aedcd3830c5c647515ad543929e722344e4a8d390b6fdd51b\",\n          \"merkle_proof\": null,\n          \"mmr_index\": 55,\n          \"output_type\": \"Coinbase\",\n          \"proof\": \"4a5f858d4311bdd902f4446682f27f64be376283b1171060fd2ad33d85350fee13c25a030874d6308d2b325995a3fe545eb1d85ba66e2ba002b794edfdeacb3f0fd2a690b9a78137771b3633aaef2a77f62fbe4d6b4b373c4bdb7e5f58cfae361a3b4c2e4420cc0d38465b2444e01b50e57c6ebfc2afd6dda9017e54585638bddef17d181d1fd7064d975d8bb1dcfd96c89486aed4680b4d39294a141581d1f51c1acfbb80e2ffc40f8499cdc43be04cacda1e34dd6592edfc500229aa70db1c2869f974cfe9aee0cab696c198624de8ecdaf5ae481a1e46fe79fe983209459b89492f2b24416c368394c43c60c33d0fdd1792f0a58d11763e7c8b89d27da25109db346e4d7b62935d182b45dfb659829c55922350e6f7e3452d9311e527ec5b561f4d043cef865f683fce1ce2d410d414f5bcee63c4bbc00964b0fa757bdfd68158e22c1068d871a45759fbd527883c0451db6f36b15139864b6177a78ad64d326e0152914e5313a97ed7b685e5089f2758bf072c804560306bd944831f067c3413ded09330fd788f353e4ee875d3c9303dd4ec0dda9d55b4a27d7748b3247fe85cf3d26b7004e6e3379041fad136fccdacd02b06456a50ad40a3259842c0794f2d59dbd8fa6b4af065b38c388d76b82136b633b06779e4eb05b5b62ec37cdc2986327639bafa8651318f4c00c066e6f45504ec9a96874d5510b519f434a1a88175d51f86e8ee36ae18d107cfaf83e60b2e62fff032c7539be66d776e3a52c5f9b0ee6fe08820d65cd75d35c793e5ab3914adf5a97b7dba75e90d4a4c9aa844e2f1e9464cd5fc4923b475defca4e3b03e1b33353ff91ac1084712cf4445e329ffdbe1e2da16ae71dee0e914b546fdc0db9b0fcde80822ee716e9f2eec90db7aa4417d53a1266e1e8383e20c9a9548bae35c2a8e1293a49e7afbd8011a9e66e79ed6be\",\n          \"proof_hash\": \"a64ed774d824dc55123c6c5ba46d84bac15b6ead8cb60200836c2a0e74506ab0\",\n          \"spent\": false\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_pmmr_indices","title":"<code>get_pmmr_indices</code>","text":"<p>Retrieves the PMMR indices based on the provided block height(s).</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_pmmr_indices\",\n    \"params\": [1, 200],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": {\n      \"highest_index\": 398,\n      \"last_retrieved_index\": 2,\n      \"outputs\": []\n    }\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_pool_size","title":"<code>get_pool_size</code>","text":"<p>Returns the number of transactions in the transaction pool.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_pool_size\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": 1\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_stempool_size","title":"<code>get_stempool_size</code>","text":"<p>Returns the number of transactions in the stem transaction pool.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_stempool_size\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": 0\n  }\n}\n</code></pre>"},{"location":"node/foreign/#get_unconfirmed_transactions","title":"<code>get_unconfirmed_transactions</code>","text":"<p>Returns the unconfirmed transactions in the transaction pool. Will not return transactions in the stempool.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_unconfirmed_transactions\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": [\n      {\n        \"src\": \"Broadcast\",\n        \"tx\": {\n          \"body\": {\n            \"inputs\": [\n              {\n                \"commit\": \"0992ce1827ec349e9f339ce183ffd01db39bf43999799d8191bfc267a58f0a715c\",\n                \"features\": \"Coinbase\"\n              },\n              {\n                \"commit\": \"0943a3c4ee4a22a5b086c26f8e6dc534204dafde0cf4c07e0c468d224dd79127ec\",\n                \"features\": \"Plain\"\n              }\n            ],\n            \"kernels\": [\n              {\n                \"excess\": \"083c49eaaf6380d44596f52cce4cf278cfac6dd34fbef73981002d8f1e8ee8abe4\",\n                \"excess_sig\": \"3f011e7e288231d67f42cb4f6416c4720e6170d5e3c805a52d33aa4521328f9be0303be654bc8ddcd3111aadc27c848b9cf07e0a70885ef79be70b7bb70f8c75\",\n                \"features\": {\n                  \"Plain\": {\n                    \"fee\": 7000000\n                  }\n                }\n              }\n            ],\n            \"outputs\": [\n              {\n                \"commit\": \"0873fafd4a0e4f365939e24c68eeb18aafc6674ca244a364dcdbfa8fa525e7bae1\",\n                \"features\": \"Plain\",\n                \"proof\": \"4b675be40672d5965c43d9f03880560a8ac784ee3de8768e28c236a4bc43b8c3d4bc83dee00d2b96530af9607c3b91d9a828f0234bf2aaf7e7c0e9cf936db69c04ca1b267668fbdb2f08ce05c8b119c9d886ceaafb4634b7fae7ea01966ad825dddc9ffab8093155d9c5d268160b86fcad95f4f5e66bf46ff642a51629dbdfd7bba7936846915b925d547337a1b95c33030fad4178468825936242e631797aa3a8f0a5ae0d23040938622648c8432fc247a902abad27e383affb4ec518e4f6f55f55e264bc0f99957be203cfb26d4b8e561fb36da55a50b6ef5861134c484556d701133e1dceda5ea53e731184e0a11f33d06e13ca37d03d39dd047170580534b049862fcd6c73decc7c0af45a267ed148fe6ef2cc375ffebfa8187d2fa0a134428a036d2ec1f65d3ce036b955730fc1ee43b23b574bae2b58b7adfa2a7a45cdec393d9b658857c911560aa3c44cf4435a99d68f3dbc81c82ea43e426ef0198148a90336ee72472aab5f7feea1df93ec830fe5ec642c93c1046dec955df361bfdc3ab74477f847a1b72e8735ef65a8a6d1680745c0152bfb5cbb2a4b4671491a253a1a09d5a07d55f4872c9f0a3d25e07b257926629d5bb96aed96f5debab02503eb0ac45033323cc5a46c8e5d4469ee9f3dd618a20d54d6f5740c010fe5a0fe853efeb253a6df196bd24469ac51c1be8ba84737cecdb5ab73d7c52570d2273621fb69bd7ed985bbc6999dbd2d6fd2687ae44a391d604ff232cc6b3fbedd5d1cd0cd8c658c5d56069b5a5099cc5c9f48bbf7d7e83b4f9a7bdef6eabd164c8395468f818e8cd8c1c800bc3adfd66dbcb247d1bda5a7af38c288c0beb8e0d9160bf67500094530a0f8be52e97b5c2114f5a4a333a11c7f37f4c47a437422455d8cbcfa770cdc85ec55accf48cf14550b07f1346a02fccdf280fcb24c1fb38751d889a17e\"\n              },\n              {\n                \"commit\": \"08de9e42d361cabd99e566c67f7f8599c7e6985cd285a841277f1aeb89ad6c8fe3\",\n                \"features\": \"Plain\",\n                \"proof\": \"5eb7afa00e9681e3b6425fb4256c96905303505787d6a065e88a50154410b9a371b0f879d3f97cfa00425e9c8266e180188656acdbb46cacfdfb159fb135c5eb03b08be3c231c4b21df777da2e2afe8d30db91e602dc4ceed71aeb1b45a0266cfeadc4acbf9fdf7a67f67408fbbea7bf14182bc407373d243c6875373b655695604deb575369a9b28274885601b338882219c7f508aa2a0ae1d02736af2249327145f1d3d00093f9587f0e0b408692700fac0f2a048c329e81cabaa4b997dd88923fe97420125f394e21b4835e36cce9de383d9e223df1b5a6ba6f48ffeac315991189dc2716cc7ec07f6ccc8062344d5ed4fcaddf9070f44f0c59ffe8160d1f6fdfe42b40066f51e687d38b6b5255771800ac060bd8034cd68d14eee1b2f43b6d7bf20d71549ea9a50006dd30b9a795e785385801546eb9a83721a09fc34d3b69d4ccdc0ff0fb74d224048aeb66ecff5515296cadd57f42e0717cbba7c70719a10c007db4520e868efe98a51001b67952d7bda3174195a3d76b93ee4dac60137a38b2e8309cad13ef1cfb6c467f1969385e5b334b52f4fd55da440e036d2a428e9f3be905d79f717c169060468acc6d469636fed098b1aba5cd055a120314bcab55d5b8b6889321edf373517e93ef67fbe74557ec6c0211265efefa25a34ac267cf1db891c47163bfed20d2b535abfe60390c2844dcef5f0aad5fa7f1db9f726d7f223c025861069603936a22377707cdd3915e762e7061132124c716212b0e91bb7fc5d7816366f5d169d93fe75669a6ba19057bb2450958aa6f5ada09042570f46215af5a41b623d140be574b7a8c9ab24ea48da416dbe6ec0fa3b889206fb804df8d69805ceb80f1e9d4e8b664b3939491cba946d87585c830e3dab0638fa279b5e911642f18452e2731764aa62f92bbcf194c97f344c90c1931fd2c3af4bcf6b0\"\n              }\n            ]\n          },\n          \"offset\": \"0eb2c2669ce918675c72697891e5527bd13da5a499396381409219b8bbbd8129\"\n        },\n        \"tx_at\": \"2019-10-07T16:20:08.709114Z\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"node/foreign/#push_transaction","title":"<code>push_transaction</code>","text":"<p>Push new transaction to our local transaction pool. Optional fluff boolean to bypass Dandelion relay (false by default).</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"push_transaction\",\n    \"params\": [ {\n      \"body\": {\n            \"inputs\": [\n              {\n                \"commit\": \"0904cbd34d0745eb00ffc3e95c9f4746738794d00268e243e9b57163a73b384102\",\n                \"features\": \"Coinbase\"\n              }\n            ],\n            \"kernels\": [\n              {\n                \"excess\": \"08385257d22f1b8a758903f78ae12545245d620cffc50e7ee7bc852c5815513dc7\",\n                \"excess_sig\": \"e001a7349fd40d4a9dfc1df275d30906fb3b304f8c7892a20ed5c9b10923c871cbabedcf322511a9ce56f10113b48855441f681280133e121b25ea1ff7efad9e\",\n                \"features\": {\n                  \"Plain\": {\n                    \"fee\": 8000000\n                  }\n                }\n              }\n            ],\n            \"outputs\": [\n              {\n                \"commit\": \"087c3ca7419751e96cdae4908bb8a92fc2826f2ad36690420b905d51beb7409ca0\",\n                \"features\": \"Plain\",\n                \"proof\": \"379ae236937883c2e1e613fb30f1b18d2a44d4173360e94bcd07862aafaf81b3aaa1154d67287cc03efde0d3981c6da8a18e2e426f5c30afc0f2e3a75012448402d8d56df52b87f4815575a56d4da174f8187e4faae64bf883b249ceed694271f84ef62a3711d36c997dff7a11111419011e36e3a070b7552415a55faaa3999f99439edccdfe5313277147fdb42be1798442bb225c2b546f5347920584b365aa81a0365b4a706c97c89617b0e6218d2c9bc15805caab27c438ed06340cc4f8dc7bfca0e9d38864c88bb0c834372f6b662b9159134f3f8ec9b8a87878739a7e516b97419ac29e1d4a2b250321470a9a6b98d07065bb7e79afc25a5ab6fc47108f53223078a64502bd4af1a109641447dab82741ebe3fbdbd803ee7a42fe2554e78fa86bd1d1e6e3b913118e9419b0be6f976b2404447d943b5f1bac19a5809fd6834797945a62d21b1ecb6ddebbc5ef94ca9e704d033bd64afde67bd3e06e2cca3bb10190188afc0af80b48dd862b86753d8b4af314763324deb1c97cf020cb87285a47cd28874bb91c6cdf858965e8b9daafbcbc1b4817d334a97d7e25e01b2d072d8dcc6418e3dc7b8e7712632f939238e65ed0731c7af02d55a8884cd8f7f88dc0f63a21955a7364562532f5716c89e14f8f23ad78f6fe2f1649e13ea8f8185f3ee63cc174684d1ef8d8c33fb25bc802f8e05e53fe200b1ea5231f588a020942e6fd7eec67301700088dae8816c16a337120063c21e1604e009df932032812f88be6473af13f802b42d8ad6fc14230fbe13ede178319a7b6540656234ec1f2fcfa70f6faa9c4b6b8150b81fe0fdc273a9bb385d766a02041a5c3f58471d42059c17d84d13ad592aa0ccf337970e7eef06f306b13288795123c9c005b815d848f359b23450656b310f09cda9ad4b7b6931805d47dcd10a8745d834a984e2055168ac3\"\n              },\n              {\n                \"commit\": \"09a7b2c1d4b346c4ebe9c6c979e32e7740446624d5439d9d7abb82166c2545e5be\",\n                \"features\": \"Plain\",\n                \"proof\": \"5fb0ee4093a153e2ed173207dbfa02b4d185f1f313ea4cbf222558819074543f19e9bcdb595a23d4ee971aafcc614b6d2774e22cee6627bc4388297fe6ebf03e0d422f3eb8003cc8516417a6b32eb22f87e1745e0ae5bf1733f2ea253399719b1ef0067934dc548c58729604d24a44040165b32d05e82c9efc9a1f30151dd73ce893ae94709ec2fe5d0f409bb54a86604f0e92915b4f93e7adde823eccf87830ae91d71a7b99967dbcc8531fee44c20c24fb6fe2a34fe86ba5da3a9235cbcdcde033ead57d65c03903a9c9ed877bf0fab9f26d08552c64ea668d5408c84b74bc3ac8335aaaa04ebcf523d36d2207fb8770e976b6fde7d04e2148de5a4169c60b1958bb840b79a8c8f356e1f1fadc35a5a7e276fcd67c354cde546548c9bf788981f38edf5a406977826aa4524004e770b3d3cd6b26f0dc99729ffd9929fa4509b145ef0c3e4293e71b964da731a47cc9f082350acf32afb64b3b12f8383c8f2cc9880131a80ea957b2908c92f21d2db7aa5d67bafb11eb07674e52b920e67a86259dd9c5dcdd18bad182fd85ec4b659c47ea2e2e8a89c57e4d2cde87958fc2ab932e169f6805d2fb14549ac93807bc426eb4cf6d29ff6a4cf22e35dbb27f04211b06b65173501c17a3bb3ff0eecc9bb05dca23379abe457ca3010ebea69e1a2f7f3ed6531bf766007cdd1ac7d6c762785fb56f36194cc2ccaee76a499a7383288e84981b103d76cbe007f66c913eacb277746e78ae08627b279ac1f9a43ab284d8a3b32c6edcd2ea99e8ea836b31a1e2582be6c41f2282cf5fc7bdb95e4b412a5eeccad29670197873a888a100c4b2704ce75137fc997a5632d81001f9b57300a9bf99edd857065be83f835e4c49d852165ba18e1c96316c153459a913773d5d86ddc26c5cd1fff38a8fbb62506b0aef6076382674c0fa95a50a03b0c3df0a688a2cbf\"\n              }\n            ]\n          },\n          \"offset\": \"0ec14d3875ad5a366418256fe65bad2a4d4ff1914e1b9488db72dd355138ca3a\"\n        },\n        true\n    ],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": null\n  }\n}\n</code></pre> <p></p>"},{"location":"node/foreign/#rust-implementation","title":"RUST Implementation","text":"<pre><code>pub trait ForeignRpc: Sync + Send {\n    fn get_header(\n        &amp;self, \n        height: Option&lt;u64&gt;, \n        hash: Option&lt;String&gt;, \n        commit: Option&lt;String&gt;\n    ) -&gt; Result&lt;BlockHeaderPrintable, ErrorKind&gt;;\n\n    fn get_block(\n        &amp;self, \n        height: Option&lt;u64&gt;, \n        hash: Option&lt;String&gt;, \n        commit: Option&lt;String&gt;\n    ) -&gt; Result&lt;BlockPrintable, ErrorKind&gt;;\n\n    fn get_version(&amp;self) -&gt; Result&lt;Version, ErrorKind&gt;;\n\n    fn get_tip(&amp;self) -&gt; Result&lt;Tip, ErrorKind&gt;;\n\n    fn get_kernel(\n        &amp;self, \n        excess: String, \n        min_height: Option&lt;u64&gt;, \n        max_height: Option&lt;u64&gt;\n    ) -&gt; Result&lt;LocatedTxKernel, ErrorKind&gt;;\n\n    fn get_outputs(\n        &amp;self, \n        commits: Option&lt;Vec&lt;String&gt;&gt;, \n        start_height: Option&lt;u64&gt;, \n        end_height: Option&lt;u64&gt;, \n        include_proof: Option&lt;bool&gt;, \n        include_merkle_proof: Option&lt;bool&gt;\n    ) -&gt; Result&lt;Vec&lt;OutputPrintable&gt;, ErrorKind&gt;;\n\n    fn get_unspent_outputs(\n        &amp;self, \n        start_index: u64, \n        end_index: Option&lt;u64&gt;, \n        max: u64, \n        include_proof: Option&lt;bool&gt;\n    ) -&gt; Result&lt;OutputListing, ErrorKind&gt;;\n\n    fn get_pmmr_indices(\n        &amp;self, \n        start_block_height: u64, \n        end_block_height: Option&lt;u64&gt;\n    ) -&gt; Result&lt;OutputListing, ErrorKind&gt;;\n    fn get_pool_size(&amp;self) -&gt; Result&lt;usize, ErrorKind&gt;;\n\n    fn get_stempool_size(&amp;self) -&gt; Result&lt;usize, ErrorKind&gt;;\n\n    fn get_unconfirmed_transactions(&amp;self) -&gt; Result&lt;Vec&lt;PoolEntry&gt;, ErrorKind&gt;;\n\n    fn push_transaction(\n        &amp;self, \n        tx: Transaction, \n        fluff: Option&lt;bool&gt;\n    ) -&gt; Result&lt;(), ErrorKind&gt;;\n}\n</code></pre>"},{"location":"node/owner/","title":"Owner","text":"<p>Owner (private) node API</p> <p>This API is used to query node about various information on the blockchain. Owner (private) API is designed to be used only by owner of the node.</p> <p>This API is used mostly to manage your connections.</p> <p>By default, node API is exposed only for local connections and requires authentication.</p> <p></p> <p>When running <code>epic</code> node with defaults, owner API URL is available at <code>localhost:3413/v2/owner</code>.</p> <p><code>Basic Authentication</code> credentials:</p> <ul> <li>user: <code>epic</code>, </li> <li>password saved in <code>~/.epic/main/.api_secret</code> file.</li> </ul> <p>In order to change URL, authentication and other settings go to (by default) <code>~/.epic/main/epic-server.toml</code> file.</p> <p>Make sure your <code>epic</code> node is running before calling API endpoints.</p> <p>API call must be done via <code>POST</code> requests with <code>JSON</code> payload.</p>"},{"location":"node/owner/#examples","title":"Examples","text":"<p>How to send POST request via cURL</p> Windows PowerShellUnix Terminal <ul> <li>With authentication <pre><code>curl -u \"epic:$(cat ~/.epic/main/.api_secret)\" -d '{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"get_status\\\", \\\"params\\\": [], \\\"id\\\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/owner\n</code></pre></li> <li>Without authentication <pre><code>curl -d '{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"get_status\\\", \\\"params\\\": [], \\\"id\\\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/owner\n</code></pre></li> </ul> <ul> <li>With authentication <pre><code>curl -u \"epic:$(cat ~/.epic/main/.api_secret)\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"get_status\", \"params\": [], \"id\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/owner\n</code></pre></li> <li>Without authentication <pre><code>curl -d '{\"jsonrpc\": \"2.0\", \"method\": \"get_status\", \"params\": [], \"id\": 1}' -H \"Content-Type: application/json\" http://localhost:3413/v2/owner\n</code></pre></li> </ul> <p></p> <p>Example API call:</p> PythonNodeJS <p><code>pip install requests</code></p> Python 3.5+<pre><code>from typing import Union\n\nimport requests\n\napi_secret_path = '~\\.epic\\main\\.api_secret'\napi_secret = open(api_secret_path, 'r').read()\napi_user = 'epic'\napi_url = \"http://localhost:3413/v2\"\n\n\ndef api_call(method: str, params: Union[list, dict], api_type: str):\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': method,\n        'params': params\n        }\n\n    url = f\"{api_url}/{api_type}\"\n    auth = (api_user, api_secret)\n    response = requests.post(url=url, json=payload, auth=auth)\n\n    try:\n        if response.status_code in [200, 201]:\n            return response.json()\n    except Exception as e:\n        print(e)\n\n    return response.text\n\n\nforeign_call = api_call(method='get_version', params=[], api_type='foreign')\nprint(foreign_call)\n\nowner_call = api_call(method='get_status', params=[], api_type='owner')\nprint(owner_call)\n</code></pre> <p><code>npm install request</code></p> NodeJS 18.0+<pre><code>const request = require('request');\n\nconst host = \"localhost:3413\"\nconst user = 'epic';\nconst api_secret = \" \";  // `cat ~/.epic/main/.api_secret`\nconst url = `http://${user}:${api_secret}@${host}/v2`\n\nconst foreign_method = 'get_version';\nconst foreign_params = [];\nconst foreign_payload = {\n    id: 1,\n    method: foreign_method,\n    params: foreign_params,\n    jsonrpc: '2.0'\n}\n\nconst owner_method = 'get_status';\nconst owner_params = [];\nconst owner_payload = {\n    id: 1,\n    method: owner_method,\n    params: owner_params,\n    jsonrpc: '2.0'\n}\n\n\n// Foreign API Call\nrequest({\n    url: `${url}/foreign}`,\n    method: \"POST\",\n    json: true,\n    body: foreign_payload\n}, function (error, response, body){\n    console.log(body);\n});\n\n\n// Owner API Call\nrequest({\n    url: `${url}/owner}`,\n    method: \"POST\",\n    json: true,\n    body: owner_payload\n}, function (error, response, body){\n    console.log(body);\n});\n</code></pre> <p></p>"},{"location":"node/owner/#methods","title":"Methods","text":""},{"location":"node/owner/#get_status","title":"<code>get_status</code>","text":"<p>Returns various information about the node, the network and the current sync status.</p> RequestResponse <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_status\",\n  \"params\": [],\n  \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n      \"Ok\": {\n        \"protocol_version\": \"2\",\n        \"user_agent\": \"MW/Epic 3.x.x\",\n        \"connections\": \"8\",\n        \"tip\": {\n          \"height\": 371553,\n          \"last_block_pushed\": \"00001d1623db988d7ed10c5b6319360a52f20c89b4710474145806ba0e8455ec\",\n          \"prev_block_to_last\": \"0000029f51bacee81c49a27b4bc9c6c446e03183867c922890f90bb17108d89f\",\n          \"total_difficulty\": 1127628411943045\n        },\n        \"sync_status\": \"header_sync\",\n        \"sync_info\": {\n          \"current_height\": 371553,\n          \"highest_height\": 0\n        }\n      }\n    }\n}\n</code></pre>"},{"location":"node/owner/#validate_chain","title":"<code>validate_chain</code>","text":"<p>Trigger a validation of the chain state.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"validate_chain\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": null\n  }\n}\n</code></pre>"},{"location":"node/owner/#compact_chain","title":"<code>compact_chain</code>","text":"<p>Trigger a compaction of the chain state to regain storage space.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"compact_chain\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": null\n  }\n}\n</code></pre>"},{"location":"node/owner/#get_peers","title":"<code>get_peers</code>","text":"<p>Retrieves information about peers. If <code>null</code> is provided, <code>get_peers</code> will list all stored peers.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_peers\",\n    \"params\": [\"70.50.33.130:3414\"],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": [\n      {\n        \"addr\": \"70.50.33.130:3414\",\n        \"ban_reason\": \"None\",\n        \"capabilities\": {\n          \"bits\": 15\n        },\n        \"flags\": \"Defunct\",\n        \"last_banned\": 0,\n        \"last_connected\": 1570129317,\n        \"user_agent\": \"MW/Epic 3.0.0\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"node/owner/#get_connected_peers","title":"<code>get_connected_peers</code>","text":"<p>Retrieves a list of all connected peers.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_connected_peers\",\n    \"params\": [],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": [\n      {\n        \"addr\": \"35.176.195.242:3414\",\n        \"capabilities\": {\n          \"bits\": 15\n        },\n        \"direction\": \"Outbound\",\n        \"height\": 374510,\n        \"total_difficulty\": 1133954621205750,\n        \"user_agent\": \"MW/Epic 3.0.0\",\n        \"version\": 1\n      },\n      {\n        \"addr\": \"47.97.198.21:3414\",\n        \"capabilities\": {\n          \"bits\": 15\n        },\n        \"direction\": \"Outbound\",\n        \"height\": 374510,\n        \"total_difficulty\": 1133954621205750,\n        \"user_agent\": \"MW/Epic 3.0.0\",\n        \"version\": 1\n      },\n      {\n        \"addr\": \"148.251.16.13:3414\",\n        \"capabilities\": {\n          \"bits\": 15\n        },\n        \"direction\": \"Outbound\",\n        \"height\": 374510,\n        \"total_difficulty\": 1133954621205750,\n        \"user_agent\": \"MW/Epic 3.0.0\",\n        \"version\": 1\n      },\n    ]\n  }\n}\n</code></pre>"},{"location":"node/owner/#ban_peer","title":"<code>ban_peer</code>","text":"<p>Bans a specific peer.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ban_peer\",\n    \"params\": [\"70.50.33.130:3414\"],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": null\n  }\n}\n</code></pre>"},{"location":"node/owner/#unban_peer","title":"<code>unban_peer</code>","text":"<p>Unbans a specific peer.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"unban_peer\",\n    \"params\": [\"70.50.33.130:3414\"],\n    \"id\": 1\n}\n</code></pre> <pre><code>{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Ok\": null\n  }\n}\n</code></pre> <p></p>"},{"location":"node/owner/#rust-implementation","title":"RUST Implementation","text":"<pre><code>pub trait OwnerRpc: Sync + Send {\n    fn get_status(&amp;self) -&gt; Result&lt;Status, ErrorKind&gt;;\n\n    fn validate_chain(&amp;self) -&gt; Result&lt;(), ErrorKind&gt;;\n\n    fn compact_chain(&amp;self) -&gt; Result&lt;(), ErrorKind&gt;;\n\n    fn get_peers(\n        &amp;self, \n        peer_addr: Option&lt;SocketAddr&gt;\n    ) -&gt; Result&lt;Vec&lt;PeerData&gt;, ErrorKind&gt;;\n\n    fn get_connected_peers(&amp;self) -&gt; Result&lt;Vec&lt;PeerInfoDisplay&gt;, ErrorKind&gt;;\n\n    fn ban_peer(&amp;self, peer_addr: SocketAddr) -&gt; Result&lt;(), ErrorKind&gt;;\n\n    fn unban_peer(&amp;self, peer_addr: SocketAddr) -&gt; Result&lt;(), ErrorKind&gt;;\n}\n</code></pre>"},{"location":"node/stratum/","title":"Mining","text":"<p>Stratum mining server API</p> <p>This page describes the current Stratum RPC protocol implemented in EPIC.</p> <p>This API is used to communicate between <code>epic</code> stratum server and mining software.</p> <p>By default, node API is exposed only for local connections.</p> <p></p> <p>When running <code>epic</code> node with defaults, stratum API URL is available at <code>localhost:3416</code>.</p> <p>API call must be done via <code>POST</code> requests with <code>JSON</code> payload.</p>"},{"location":"node/stratum/#api-methods","title":"API Methods","text":""},{"location":"node/stratum/#getjobtemplate","title":"<code>getjobtemplate</code>","text":"<p>A message initiated by the miner. Miner can request a job with this message.</p> Request Success Response Error Response <pre><code>{\n   \"id\":\"2\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"getjobtemplate\",\n   \"params\":null\n}\n</code></pre> OK response<pre><code>{\n   \"id\":\"0\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"getjobtemplate\",\n   \"result\":{\n      \"difficulty\":1,\n      \"height\":13726,\n      \"job_id\":4,\n      \"pre_pow\":\"00010000000000003c4d0171369781424b39c81eb39de10cdf4a7cc27bbc6769203c7c9bc02cc6a1dfc6000000005b50f8210000000000395f123c6856055aab2369fe325c3d709b129dee5c96f2db60cdbc0dc123a80cb0b89e883ae2614f8dbd169888a95c0513b1ac7e069de82e5d479cf838281f7838b4bf75ea7c9222a1ad7406a4cab29af4e018c402f70dc8e9ef3d085169391c78741c656ec0f11f62d41b463c82737970afaa431c5cabb9b759cdfa52d761ac451276084366d1ba9efff2db9ed07eec1bcd8da352b32227f452dfa987ad249f689d9780000000000000b9e00000000000009954\"\n   }\n}\n</code></pre> Error response<pre><code>{\n   \"id\":\"10\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"getjobtemplate\",\n   \"error\":{\n      \"code\":-32000,\n      \"message\":\"Node is syncing - Please wait\"\n   }\n}\n</code></pre>"},{"location":"node/stratum/#job","title":"<code>job</code>","text":"<p>A message initiated by the Stratum server. Stratum server will send job automatically to connected miners. The miner SHOULD interrupt current job if job_id = 0, and SHOULD  replace the current job with this one after the current graph is complete.</p> Request Success Response <pre><code>{\n   \"id\":\"Stratum\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"job\",\n   \"params\":{\n      \"difficulty\":1,\n      \"height\":16375,\n      \"job_id\":5,\n      \"pre_pow\":\"00010000000000003ff723bc8c987b0c594794a0487e52260c5343288749c7e288de95a80afa558c5fb8000000005b51f15f00000000003cadef6a45edf92d2520bf45cbd4f36b5ef283c53d8266bbe9aa1b8daaa1458ce5578fcb0978b3995dd00e3bfc5a9277190bb9407a30d66aec26ff55a2b50214b22cdc1f3894f27374f568b2fe94d857b6b3808124888dd5eff7e8de7e451ac805a4ebd6551fa7a529a1b9f35f761719ed41bfef6ab081defc45a64a374dfd8321feac083741f29207b044071d93904986fa322df610e210c543c2f95522c9bdaef5f598000000000000c184000000000000a0cf\"\n   }\n}\n</code></pre> <p><code>No response is required for this message.</code></p>"},{"location":"node/stratum/#keepalive","title":"<code>keepalive</code>","text":"<p>A message initiated by the miner in order to keep the connection alive.</p> Request Success Response <pre><code>{\n   \"id\":\"2\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"keepalive\",\n   \"params\":null\n}\n</code></pre> <pre><code>{\n   \"id\":\"2\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"keepalive\",\n   \"result\":\"ok\",\n   \"error\":null\n}\n</code></pre>"},{"location":"node/stratum/#login","title":"<code>login</code>","text":"<p>A message initiated by the miner. Miner can log in on a EPIC Stratum server with a login, password and agent (usually statically set by the miner program).</p> Request Success Response Error Response <pre><code>{\n   \"id\":\"0\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"login\",\n   \"params\":{\n      \"login\":\"login\",\n      \"pass\":\"password\",\n      \"agent\":\"epic-miner\"\n   }\n}\n</code></pre> <pre><code>{\n   \"id\":\"1\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"login\",\n   \"result\":\"ok\",\n   \"error\":null\n}\n</code></pre> <p><code>Not yet implemented. Should return error -32500     \"Login first\" when login is required.</code></p>"},{"location":"node/stratum/#status","title":"<code>status</code>","text":"<p>A message initiated by the miner. This message allows a miner to get the status of its current worker and the network.</p> Request Success Response <pre><code>{\n   \"id\":\"2\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"status\",\n   \"params\":null\n}\n</code></pre> <pre><code>{\n   \"id\":\"5\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"status\",\n   \"result\":{\n      \"id\":\"5\",\n      \"height\":13726,\n      \"difficulty\":1,\n      \"accepted\":0,\n      \"rejected\":0,\n      \"stale\":0\n   },\n   \"error\":null\n}\n</code></pre>"},{"location":"node/stratum/#submit","title":"<code>submit</code>","text":"<p>A message initiated by the miner. When a miner find a share, it will submit it to the node.</p> Request Success Response Block Found Response Error Too Late Response Error Rejected Response <pre><code>{\n   \"id\":\"0\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"submit\",\n   \"params\":{\n      \"edge_bits\":29,\n      \"height\":16419,\n      \"job_id\":0,\n      \"nonce\":8895699060858340771,\n      \"pow\":[\n         4210040,10141596,13269632,24291934,28079062,84254573,84493890,100560174,100657333,120128285,130518226,140371663,142109188,159800646,163323737,171019100,176840047,191220010,192245584,198941444,209276164,216952635,217795152,225662613,230166736,231315079,248639876,263910393,293995691,298361937,326412694,330363619,414572127,424798984,426489226,466671748,466924466,490048497,495035248,496623057,502828197, 532838434\n         ]\n   }\n}\n</code></pre> <pre><code>{\n   \"id\":\"2\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"submit\",\n   \"result\":\"ok\",\n   \"error\":null\n}\n</code></pre> <pre><code>{\n   \"id\":\"6\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"submit\",\n   \"result\":\"blockfound - 23025af9032de812d15228121d5e4b0e977d30ad8036ab07131104787b9dcf10\",\n   \"error\":null\n}\n</code></pre> <pre><code>{\n   \"id\":\"5\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"submit\",\n   \"error\":{\n      \"code\":-32503,\n      \"message\":\"Solution submitted too late\"\n   }\n}\n</code></pre> <p>Two possibilities: the solution cannot be validated or the solution is of too low difficulty. <pre><code>{\n   \"id\":\"5\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"submit\",\n   \"error\":{\n      \"code\":-32502,\n      \"message\":\"Failed to validate solution\"\n   }\n}\n</code></pre> <pre><code>{\n   \"id\":\"5\",\n   \"jsonrpc\":\"2.0\",\n   \"method\":\"submit\",\n   \"error\":{\n      \"code\":-32501,\n      \"message\":\"Share rejected due to low difficulty\"\n   }\n}\n</code></pre></p> <p> </p>"},{"location":"node/stratum/#error-messages","title":"Error Messages","text":"<p>EPIC Stratum protocol implementation contains the following error messages:</p> Error code Error Message -32000 Node is syncing - please wait -32500 Login first -32501 Share rejected due to low difficulty -32502 Failed to validate solution -32503 Solution Submitted too late -32600 Invalid Request -32601 Method not found"},{"location":"node/stratum/#miner-behavior","title":"Miner behavior","text":"<p>Info</p> <p>Miners SHOULD, MAY or MUST respect the following rules:</p> <ul> <li>Miners SHOULD randomize the job nonce before starting</li> <li>Miners MUST continue mining the same job until the server sends a new one, though a miner MAY request a new job at any time</li> <li>Miners MUST NOT send RPC response to a job request from the server</li> <li>Miners MAY set the RPC \"id\" and expect responses to have that same id</li> <li>Miners MAY send a keepalive message</li> <li>Miners MAY send a login request (to identify which miner finds shares / solutions in the logs), the login request MUST have all 3 params.</li> <li>Miners MUST return the supplied job_id with submit messages.</li> </ul>"},{"location":"wallet/","title":"Introduction","text":""},{"location":"wallet/#building-and-using-cli-wallet","title":"Building and using CLI Wallet","text":"<ul> <li> CLI Wallet Guide  - EPIC CLI Wallet Tutorial</li> <li> Build EPIC Wallet  - Epic Wallet - Build, Configuration and Running</li> </ul>"},{"location":"wallet/#understand-the-wallet-implementation","title":"Understand the Wallet implementation","text":"<ul> <li> RUST docs </li> <li> Transaction UML  - UML of an interactive transaction (aggregating transaction without <code>lock_height</code>)</li> <li> Wallet TLS setup  - How to setup secure connection</li> <li> Wallet Design  - Epic Wallet + Library Design</li> </ul>"},{"location":"wallet/#gui-desktop-wallet","title":"GUI Desktop Wallet","text":"<p>Author:  Poolboy51 |  eccence.digital </p> <ul> <li> GUI Wallet   is an open-source electron application, layer of modern front-end interface for <code>epic-wallet cli</code>.</li> <li>Download BETA GUI v5 here: Linux, Windows, MacOS  </li> </ul> Build your own development GUI wallet with NodeJS and Electron"},{"location":"wallet/#project-setup","title":"Project setup","text":"<pre><code>git clone https://github.com/EpicCash/epic-gui-wallet.git\ncd epic-gui-wallet\nnpm install \nnpm install -g electron --unsafe-perm=true --allow-root)\n</code></pre>"},{"location":"wallet/#compiles-and-hot-reloads-for-development","title":"Compiles and hot-reloads for development","text":"<pre><code>npm run electron:serve\n</code></pre>"},{"location":"wallet/#compiles-and-minifies-for-production","title":"Compiles and minifies for production","text":"<pre><code>npm run electron:build\n</code></pre>"},{"location":"wallet/#customize-configuration","title":"Customize configuration","text":"<p>See Configuration Reference.</p>"},{"location":"wallet/#customize-epic-wallet-version","title":"Customize epic-wallet version","text":"<p>This project comes with a pre-built CLI epic-wallet, available in the relative path \"resources/bin\". If desired, you can compile and build an updated version of the CLI epic-wallet project to replace the pre-built one.</p>"},{"location":"wallet/#required-deps","title":"Required deps","text":"<pre><code>NodeJs v17.9.0\nnpm 8.5.5\n</code></pre>"},{"location":"wallet/#ubuntu","title":"Ubuntu","text":"<pre><code>sudo apt install libgtk-3-0 libgbm-dev\n</code></pre>"},{"location":"wallet/#troubleshooting","title":"Troubleshooting","text":""},{"location":"wallet/#wallet-cant-authenticate-to-node-api","title":"Wallet can't authenticate to node API","text":"<ul> <li>Error code: 0x1645779384 - Request failed with status code 401;</li> <li>Solution: Check if your Node API secret and path to file are correct;</li> </ul>"},{"location":"wallet/#node-status-is-not-accessible","title":"Node status is not accessible","text":"<ul> <li>Error code: 0x1645779384 - Request failed with status code 401;</li> <li>Solution: Check if the node api is accessible via:<ul> <li>Mainnet: http://127.0.0.1:3413/v1/status</li> <li>Usernet: http://127.0.0.1:23413/v1/status</li> </ul> </li> </ul> <p>If the node is not accessible, you may need to either: - Start the server;</p> <p>Or, alternatively: - Open the <code>epic-server.toml</code> file located at your Epic home path (e.g., \"C:\\Users\\\\\\.epic\\\" in Windows) and update the <code>api_secret_path</code> variable to point to the <code>.api_secret</code> file located at the custom wallet directory;   - Restart the server;"},{"location":"wallet/#version-300","title":"Version 3.0.0","text":"<p>created and developed by eccence.digital (https://epicfundme.com/135-eccence-digital)</p>"},{"location":"wallet/#donations","title":"Donations","text":"<p>Vitex Wallet EPIC Address:</p> <p>vite_aaac001cda9bd8e153789edefb6dc9a99ca6c37adc122692e9</p>"},{"location":"wallet/cli/","title":"CLI","text":""},{"location":"wallet/cli/#file-structure","title":"File Structure","text":"<p>When wallet is initialized for the first time by default, it will create the hidden directory <code>/.epic</code>  under your home directory (Linux: <code>/home/&lt;user&gt;/.epic/main/</code>, Windows: <code>C:/Users/&lt;username&gt;/.epic</code>).</p> <p>The Wallet maintains its state in <code>SQLITE</code> database, with the master seed  stored in a separate file. When creating a new wallet, the file structure should be as follows:</p> <pre><code>/home/&lt;user&gt;/.epic/main/\n    \u251c\u2500\u2500 epic-wallet.log\n    \u251c\u2500\u2500 epic-wallet.toml\n    \u251c\u2500\u2500 tor\n    \u2514\u2500\u2500 wallet_data\n        \u251c\u2500\u2500 wallet.seed\n        \u251c\u2500\u2500 saved_txs\n        \u2514\u2500\u2500 db\n            \u2514\u2500\u2500 sqlite\n                \u251c\u2500\u2500 epic.db\n                \u251c\u2500\u2500 epic.db-shm\n                \u2514\u2500\u2500 epic.db-wal\n</code></pre> <ul> <li><code>wallet.seed</code> file stores wallet master key encrypted with your password.</li> <li><code>tor</code>  directory with TOR configuration used for TOR transaction method.</li> </ul>"},{"location":"wallet/cli/#wallet-settings","title":"Wallet Settings","text":"<ul> <li><code>epic-wallet.toml</code> is a configuration file for the wallet, default values are generated when wallet is initialized.</li> </ul> Wallet Section <p>[wallet] section used to configure default wallet settings:</p> <pre><code>chain_type = \"Mainnet\"\n\n#host IP for wallet listener, change to \"0.0.0.0\" to receive epics\napi_listen_interface = \"127.0.0.1\"\n\n#path of TLS certificate file, self-signed certificates are not supported\n#tls_certificate_file = \"\"\n#private key for the TLS certificate\n#tls_certificate_key = \"\"\n\n#port for wallet listener\napi_listen_port = 3415\n\n#port for wallet owner api\nowner_api_listen_port = 3420\n\n#path of the secret token used by the API to authenticate the calls\n#comment it to disable basic auth\napi_secret_path = \"/home/&lt;user&gt;/.epic/main/.owner_api_secret\"\n\n#location of the node api secret for basic auth on the Epic API\nnode_api_secret_path = \"/home/&lt;user&gt;/.epic/main/.api_secret\"\n\n#where the wallet should find a running node\ncheck_node_api_http_addr = \"https://epic-radar.com/node\"\n\n#include the foreign API endpoints on the same port as the owner\n#API. Useful for networking environments like AWS ECS that make\n#it difficult to access multiple ports on a single service.\nowner_api_include_foreign = false\n\n#where to find wallet files (seed, data, etc)\ndata_file_dir = \"/home/&lt;user&gt;/.epic/main/wallet_data\"\n\n#If true, don't store calculated commits in the database\n#better privacy, but at a performance cost of having to\n#re-calculate commits every time they're used\nno_commit_cache = false\n\n#Whether to use the black background color scheme for command line\ndark_background_color_scheme = true\n\n#The exploding lifetime for keybase notification on coins received.\n#Unit: Minute. Default value 1440 minutes for one day.\n#Refer to https://keybase.io/blog/keybase-exploding-messages for detail.\n#To disable this notification, set it as 0.\nkeybase_notify_ttl = 1440\n</code></pre> Epicbox Section <p>[epicbox] section used to configure epicbox transaction method:</p> <pre><code># Domain of the epicbox server to connect to\nepicbox_domain = \"epicbox.giverofepic.com\"\n\n# Port of the domain of the epicbox server to connect\nepicbox_port = 443\n\n# Whether to allow unsecure connections without SSL (default false)\nepicbox_protocol_unsecure = false\n\n# Index of the epicbox address (default 0)\nepicbox_address_index = 0\n\n# Time interval in seconds between epicbox listener updates (default 10 seconds)\nepicbox_listener_interval = 10\n</code></pre> Tor Section <p>[tor] section used to configure values when sending or listening via TOR:</p> <pre><code># Whether to start tor listener on listener startup (default true)\nuse_tor_listener = true\n\n# TOR (SOCKS) proxy server address\nsocks_proxy_addr = \"127.0.0.1:59050\"\n\n# Directory to output TOR configuration to when sending\nsend_config_dir = \"/home/&lt;user&gt;/.epic/main/\"\n</code></pre> Logging Section <p>[logging] section used to configure logging parameters:</p> <pre><code>#whether to log to stdout\nlog_to_stdout = true\n\n#log level for stdout: Error, Warning, Info, Debug, Trace\nstdout_log_level = \"Debug\"\n\n#whether to log to a file\nlog_to_file = true\n\n#log level for file: Error, Warning, Info, Debug, Trace\nfile_log_level = \"Info\"\n\n#log file path\nlog_file_path = \"/home/&lt;user&gt;/.epic/main/epic-wallet.log\"\n\n#whether to append to the log file (true), or replace it on every run (false)\nlog_file_append = true\n\n#maximum log file size in bytes before performing log rotation\n#comment it to disable log rotation\nlog_max_size = 16777216\nlog_max_files = 32\n</code></pre>"},{"location":"wallet/cli/#commands","title":"Commands","text":""},{"location":"wallet/cli/#init","title":"<code>Init</code>","text":"<p>Create new epic-wallet instance with configuration files:</p> <pre><code>epic-wallet init\n</code></pre> <p>You'll be prompted to enter a password for the new wallet. It will be used to encrypt your private key, and you'll be asked to type it for most wallet commands.</p> <p>If you'd like to create a wallet in a directory of your choice,  you can create one in the current directory by using flag <code>-h</code>, <code>--here</code> e.g:</p> <pre><code>epic-wallet init -h\n</code></pre> <p>This will create all needed data files, including <code>epic-wallet.toml</code> and <code>wallet.seed</code>, in the current directory.  When running any <code>epic-wallet</code> command, epic will check the working directory if these files exist.  If not, it will use the default location.</p> <p>Upon a successful <code>init</code>, the wallet prints a 24-word recovery phrase, which you should always save somewhere safe.  This phrase is to recover your master seed file if it gets lost or corrupted, or if you forget the wallet password.</p> <p>If you'd prefer to use a 12-word recovery phrase, you can use the <code>-s</code> <code>--short_wordlist</code> flag.</p> <p>Initialize wallet using mnemonic seed phrase</p> <p>If you need to recreate your wallet from an existing seed, you can <code>init</code> a wallet with a recovery phrase using  the <code>-r</code>, <code>--recover</code> flag. For example, the following command initializes a recovered wallet in the current directory.</p> <p><pre><code>epic-wallet init -hr\n</code></pre> Wallet will prompt to provide your 24 or 12 word mnemonics. On the first run, the wallet will scan the entire chain and restore any outputs that belong to it.</p>"},{"location":"wallet/cli/#info","title":"<code>Info</code>","text":"<p>The <code>info</code> command summarizes wallet account balance.</p> <pre><code>epic-wallet info\n</code></pre> <p>Wallet Summary</p> <pre><code>Wallet Summary Info - Account 'default' as of height 813137\n\nConfirmed Total                  | 5779.473029600\nAwaiting Confirmation (&lt; 10)     | 0.000000000\nImmature Coinbase (&lt; 1440)       | 14.00000000\nAwaiting Finalization            | 139.851133700\nLocked by previous transaction   | 389.859133700\n-------------------------------- | -------------\nCurrently Spendable              | 5779.473029600\n</code></pre> <p>How to read balance</p> <ul> <li>Confirmed Total is your balance including both spendable coins and those awaiting confirmation.</li> <li>Awaiting Confirmation denotes the balance from transactions that have appeared on-chain,      but for which your wallet is waiting a set number of blocks before treating them as spendable (default is 10 blocks).</li> <li>Immature Coinbase will show balance of freshly mined coins, it will take 1440 confirmations      (~24h) to mature them and make spendable.</li> <li>Awaiting Finalization is the balance from transactions that have not yet appeared on-chain. This could be      due to the other party not having broadcast the transaction yet. Also, when you are the sender of a transaction,      your change output will be denoted in this field as well.</li> <li>Locked by previous transaction shows the amount of coins locked by a previous transaction you have made and      that is currently awaiting finalization. This is usually made up both of the amount being sent and of the change      outputs waiting to be returned back to your wallet.      Once the transaction appears on-chain, this balance unlocks and the output that was used will      again become available for spending.</li> </ul>"},{"location":"wallet/cli/#listen","title":"<code>Listen</code>","text":"<p>Listener is a long-running background process that listens for incoming transaction slates to process them. </p> <p>EPIC transactions are interactive, means both parties have to actively participate during the transaction  to finish the process, listeners are here to automate the whole process for the user.</p> <p>There are multiple transaction methods with corresponding listeners to handle them. Your wallet will listen for requests until the process is cancelled (<code>&lt;Ctrl-C&gt;</code>).</p> HTTP/S + TOR ListenerEpicbox Listener <p>To start listening for transactions sent via HTTP/S or TOR method: <pre><code>epic-wallet listen -m http\n</code></pre></p> <p>Optional arguments: <pre><code>-n, --no_tor        Don't start TOR listener when starting HTTP listener\n-V, --version       Prints version information\n-l, --port &lt;port&gt;   Port on which to run the wallet listener\n-e, --external      Listen on 0.0.0.0 interface to allow external connections (default 127.0.0.1)\n</code></pre></p> <p>Foreign API</p> <p>Working HTTP/S Listener will also run local <code>Foreign API</code>, it will expose some of the wallet functionality needed for others to interact with your wallet.</p> <p>More in the Foreign API Methods section.</p> <p>In order to use the TOR make sure its client is available in your system and added to env PATH.</p> <p>To start listening for transactions sent via epicbox method: <pre><code>epic-wallet listen -m epicbox\n</code></pre></p> <p>Optional arguments: <pre><code>-i, --interval &lt;interval&gt;       Epicbox listener update interval duration in seconds\n                                [possible values: 2, 5, 10, 30, 60, 120]\n-V, --version                   Prints version information\n</code></pre></p>"},{"location":"wallet/cli/#web-api","title":"Web API","text":"<p>Run the wallet's local web API, useful in production to interact with the wallet interface via HTTP API calls.</p> <p>Same as Listeners, it is a background process accessible on the local network (by default port <code>3420</code>).</p> <ul> <li>Go to the Owner API Methods section for more details.</li> </ul> <pre><code>epic-wallet owner_api\n</code></pre> <p>Optional arguments     <pre><code>--run_foreign    Also run the Foreign API (HTTP/S Listener) using only one port.\n</code></pre></p>"},{"location":"wallet/cli/#send","title":"<code>Send</code>","text":"<p>The <code>send</code> command is the first step of building an interactive transaction.  The transaction can either be an automated and synchronous exchange through  <code>HTTP/S</code>, <code>EPICBOX</code> or <code>TOR</code> methods, or it can be multiple step process done manually  by exchanging <code>transaction files</code> or <code>emoji strings</code> between the users. </p> HTTP/S MethodEpicbox MethodTOR MethodFile MethodEmoji MethodSelf Method <p>To use this method both sender and receiver have to run <code>HTTP/S Listener</code>. </p> <p>Receiver should share the URL address (IP or domain) pointing to his listener and make sure  it is reachable for the sender, i.e. port (by default <code>3415</code>) is open and firewall rule created.</p> <p>Transaction will be successfully finished if and only if both parties are online during the process  which should take no longer than few seconds. Failed transaction can be cancelled by sender to unlock locked funds.</p> <pre><code>epic-wallet send -d &lt;http_address&gt; &lt;amount&gt;\n</code></pre> <p>To use this method both sender and receiver have to run <code>EPICBOX Listener</code>. </p> <p>Epicbox server will work as temporary storage to make it possible to transact without the need of both parties  being online at the same time. It will also remove the need of sharing receivers IP address and handling the ports.</p> <p>Receiver should share with the sender the full epicbox address:</p> <p>How to get your epicbox receiving address</p> <p>Type <code>epic-wallet address</code> and copy the first address displayed in the console described as <code>Address for account - &lt;account name&gt;</code>.</p> <p>Full address will also require adding the epicbox domain from the <code>epic-wallet.toml</code> file (by default <code>epicbox.epic.tech</code>).</p> <p>The full address should look similiar to:</p> <p>esYeNScdKxUbm2tag16xAQ4k31oQAR5V5TWUUsZPLDKM1eCsBmhF@epicbox.epic.tech</p> <p>To complete the transaction both parties have to be online at some point to receive transaction slate  and sign it, this process is fully automated. Failed transaction can be cancelled by sender to unlock locked funds.</p> <pre><code>epic-wallet send -m epicbox -d &lt;epicbox_address&gt; &lt;amount&gt;\n</code></pre> <p>To use this method both sender and receiver have to run <code>HTTP/S Listener</code>. </p> <p>Transaction will be successfully finished if and only if both parties are online during the process  which should take less than a minute. Failed transaction can be cancelled by sender to unlock locked funds.</p> <p>How to get your TOR receiving address</p> <p>Type <code>epic-wallet address</code> and copy the third address displayed in the console described as  <code>TOR Onion V3 Address for account - &lt;account name&gt;</code></p> <p>The address should look similar to:</p> <p>23goa5mot5phnu3vrepdmd5brsh23wp5tfgcmekdbp77rv2jsaqci6ad</p> <pre><code>epic-wallet send -d &lt;tor_address&gt; &lt;amount&gt;\n</code></pre> <p>In order to use the TOR method make sure its client is available in your system and added to env PATH.</p> <p>This transaction method is used to create transaction files, it is up to the users how they will exchange them,  i.e. using e-mails, messangers, Bluetooth, USB sticks, etc.</p> <p>This method requires few steps to complete the transaction:</p> <ol> <li> <p>Sender is initializing the process and creates the transaction file with:</p> <p><code>epic-wallet send -m file -d &lt;file_name&gt; &lt;amount&gt;</code></p> </li> <li> <p>Sender sends created transaction file to the receiver</p> </li> <li> <p>Receiver signs the transaction using received file with:</p> <p><code>epic-wallet receive -i &lt;file_name&gt;</code></p> </li> <li> <p>Receiver have to send back the created transaction file response to the sender</p> </li> <li> <p>Sender finalizes the transaction using received response file with:</p> <p><code>epic-wallet finalize -i &lt;response_file_name&gt;</code></p> </li> </ol> <p>After 5th step the transaction is propagaded to the network and can not be cancelled.</p> <p>This transaction method is used to create emoji strings, it is up to the users how they will exchange them,  i.e. using e-mails, messangers, Bluetooth, USB sticks, etc.</p> <p>This method requires few steps to complete the transaction:</p> <ol> <li> <p>Sender is initializing the process and creates emoji string with:</p> <p><code>epic-wallet send -m emoji &lt;amount&gt;</code></p> </li> <li> <p>Sender sends created emoji string to the receiver</p> </li> <li> <p>Receiver signs the transaction using received emoji string with:</p> <p><code>epic-wallet receive -m emoji -i &lt;emoji_string&gt;</code></p> </li> <li> <p>Receiver have to send back created response emoji string to the sender</p> </li> <li> <p>Sender finalizes the transaction with received response emoji string:</p> <p><code>epic-wallet finalize -m emoji -i &lt;response_emoji_string&gt;</code></p> </li> </ol> <p>After 5th step the transaction is propagaded to the network and can not be cancelled.</p> <p>This transaction method can be used to send coins between the different wallet accounts,  it does not require any extra steps, i.e. running listeners or exchanging data manually.</p> <p>To use this method wallet requires to have at least 2 accounts,  more about creating and managing them here.</p> <pre><code>epic-wallet -a &lt;account_1_name&gt; send -m self -d &lt;account_2_name&gt; &lt;amount&gt;\n</code></pre> <p>Optional arguments     <pre><code>-o, --change_outputs &lt;change_outputs&gt;     Number of change outputs to generate [default: 1]\n-g, --message &lt;message&gt;                   Optional participant message to include\n-c, --min_conf &lt;minimum_confirmations&gt;    Minimum number of confirmations required for an output to be spendable [default: 10]\n-z, --proof_address &lt;proof_address&gt;       Recipient proof address. If not using TOR, must be provided seprarately by the recipient\n-s, --selection &lt;selection_strategy&gt;      Coin/Output selection strategy [default: smallest]  [possible values: all, smallest]\n-t, --stored_tx &lt;stored_tx&gt;               If present, use the previously stored Unconfirmed transaction with given id\n-b, --ttl_blocks &lt;ttl_blocks&gt;             If present, the number of blocks from the current after which wallets should refuse to process transactions further\n</code></pre></p>"},{"location":"wallet/cli/#receive","title":"<code>Receive</code>","text":"<p>The <code>receive</code> command processes the <code>transaction file</code> provided by the sender.</p> <p><pre><code>epic-wallet receive -i &lt;file_name&gt;\n</code></pre> Then your wallet will output another file which should be sent back to the sender. </p>"},{"location":"wallet/cli/#finalize","title":"<code>Finalize</code>","text":"<p>The <code>finalize</code> command is the final step for <code>transaction file</code> method.</p> <p><pre><code>epic-wallet finalize -i &lt;file_name&gt;\n</code></pre> The transaction building process will then be finalized and your wallet will post it to the network.</p> <p>Optional finalize arguments     <pre><code>`-n` `--nopost`     transaction would be finalized but not posted (dry-run)\n</code></pre></p>"},{"location":"wallet/cli/#post","title":"<code>Post</code>","text":"<p>Manually post a finalized transaction to the network, specify the file path using the <code>-i</code> flag. <pre><code>epic-wallet post -i &lt;file_name&gt;\n</code></pre></p>"},{"location":"wallet/cli/#proof","title":"<code>Proof</code>","text":"<p>EPIC privacy and scalability mechanics mean users no longer have the ability to simply prove a transaction  has happened by pointing to it on the chain. By default, whenever a transaction sent to a destination address  using <code>-d</code>, a payment proof is created.</p> <p>Payers can then use these proofs to resolve future payment disputes and prove they sent funds to the correct recipient.</p> <p>The sender can export the payment proof by specifying the transaction id (<code>-i</code>) (obtained by txs) or the tx-UUID (<code>-t</code>), and choosing the path for the proof file, e.g:</p> <pre><code>epic-wallet export_proof -i 4 \"proof.txt\"\n</code></pre> <p>The sender can then provide this proof to any other wallet for verification. Verification example:</p> <pre><code>epic-wallet verify_proof proof.txt\n</code></pre> <p>This will ensure that:</p> <ul> <li>The kernel for the transaction in the proof is validated and can be found on-chain.</li> <li>Both the sender and recipient's signatures correctly sign for the amount and the kernel.</li> </ul> <p>On top of that, if the receiver's address in the transaction belongs to the same wallet who's verifying,  then the user will be informed as follows: <pre><code>epic-wallet verify_proof proof.txt\n</code></pre></p>"},{"location":"wallet/cli/#outputs","title":"<code>Outputs</code>","text":"<p>To show a list of all your wallet's outputs, type:</p> <pre><code>epic-wallet outputs\n</code></pre> <p>Wallet Outputs</p> <pre><code>Wallet Outputs - Account 'default' - Block Height: 814491\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n Output Commitment                                                   MMR Index  Block Height  Locked Until  Status   Coinbase?  # Confirms  Value           Tx\n===============================================================================================================================================================\n 08f4f062b99223d2d8a1ad1ae11085ab2d7b4f1bc603f9c29748f1b918861fdf23  7498573    743936        743936        Unspent  false      70556       5198.081029600  1\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n 097fe8bf1ad6a792600d5e010d0b77c40b147ea122c176476259f100a48924d40c  7832632    790025        790025        Unspent  false      24467       581.392000000   2\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n 08645896f150bfc70f36a602a7a5f41180ae8d5db42864f19f7257542cf2c7fc98  None       811501        0             Unspent  false      2991        389.859133700   9\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n</code></pre> <p>Optional outputs arguments     <pre><code>-f, --show_full_history    If specified, display full outputs history\n-s                         To show spent outputs      \n</code></pre></p>"},{"location":"wallet/cli/#txs","title":"<code>Txs</code>","text":"<p>Every time an action is performed in your wallet (send, receive, even if uncompleted),  an entry is added to an internal transaction log containing vital information about the transaction.  Because the epic blockchain contains no identifying information whatsoever, this transaction log is necessary  for your wallet to keep track of transactions. To view the contents of your transaction log, use the command:</p> <pre><code>epic-wallet txs\n</code></pre> <p>Transaction Log</p> <pre><code>Transaction Log - Account 'default' - Block Height: 814448\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Id  Type         Shared Transaction Id                 Creation Time        TTL Cutoff Height  Confirmed?  Confirmation Time    Num.    Num.     Amount        Amount       Fee    Net           Payment   Kernel                                                              Tx\n                                                                                                                                 Inputs  Outputs  Credited      Debited             Difference    Proof                                                                         Data\n=====================================================================================================================================================================================================================================================================================\n 0   Received Tx  2b2ffc5e-8fa0-4450-b270-078df29b3e23  2020-07-28 13:18:18  None               true        2020-07-28 13:18:18  0       1        389.892       0.0          0.007  389.892       None      ddec166399348a24d2893c025b4b4d4a058f81834a663284ba23fe0bd0ac025b4b  Yes\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 1   Sent Tx      fd9b3035-73d0-4ea3-8c3e-5d45c512ad8b  2020-08-03 15:32:19  None               true        2020-08-03 15:42:20  2       1        389.8591337   390.8661337  0.007  -1.007        Yes       0834a66310df8a8b43093c025b4b4d4a058f8188ee24d2809e338e0bd0ae9e2c2c  Yes\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 2   Sent Tx      ea92fcce-8fa0-48d0-b270-078df2e22d24  2020-08-04 18:51:47  None               false       None                 1       1        139.8511337   389.8591337  0.008  -250.008      None      09fd95b4e40ce1c2d67376d46dc37ddec1aa0ae50ca9934ba271fff0b47510c72f  Yes\n     - Cancelled\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n</code></pre> <p>Optional txs arguments:     <pre><code>-i, --id &lt;id&gt;        If specified, display transaction with given Id and all associated Inputs/Outputs\n-t, --txid &lt;txid&gt;    If specified, display transaction with given TxID UUID and all associated Inputs/Outputs\n</code></pre></p>"},{"location":"wallet/cli/#cancel","title":"<code>Cancel</code>","text":"<p>Cancels an in-progress created transaction, freeing previously locked outputs for use again.</p> <pre><code>epic-wallet cancel -i &lt;id&gt;\n</code></pre> <p>Optional cancel arguments     <pre><code>-i, --id &lt;id&gt;        The ID of the transaction to cancel\n-t, --txid &lt;txid&gt;    The TxID UUID of the transaction to cancel\n</code></pre></p>"},{"location":"wallet/cli/#scan","title":"<code>Scan</code>","text":"<p>The <code>scan</code> command scans the entire UTXO (unspent tx outputs) set from the node, identifies which outputs are yours and updates your wallet state.</p> <pre><code>epic-wallet scan\n</code></pre> <p>It should not be necessary to run the scan command manually, as the wallet continually scans the  outputs on the chain. However, if for some reason you believe your outputs and transactions  are in an inconsistent state, you can initiate a manual scan to attempt to fix or restore them.</p> <p>Optional scan arguments     <pre><code>`-d` `--delete-unconfirmed` if present, scan and cancel all pending transactions, freeing up any locked outputs.\n`-h` `--start-height` lets you specify a block height from which to start the manual scan.\n</code></pre></p>"},{"location":"wallet/cli/#recover","title":"<code>Recover</code>","text":"<p>The <code>recover</code> command displays the existing wallet's 24 (or 12) word seed phrase.</p> <pre><code>epic-wallet recover\n</code></pre>"},{"location":"wallet/cli/#_1","title":"CLI","text":""},{"location":"wallet/cli/#global-options","title":"Global Options","text":"<p>There are several global wallet arguments which you can provide for every command.</p>"},{"location":"wallet/cli/#help","title":"<code>Help</code>","text":"<p>It will display all the commands and every global flag. </p> <p><code>epic-wallet help</code></p> <p>To get additional info about a specific command use <code>-h</code>, <code>--help</code> flag:</p> <p><code>epic-wallet &lt;command&gt; --help</code></p>"},{"location":"wallet/cli/#version","title":"<code>Version</code>","text":"<p>Get the wallet version </p> <pre><code>epic-wallet --version\n</code></pre>"},{"location":"wallet/cli/#network","title":"<code>Network</code>","text":"<p>By default, wallet will connect to the <code>Mainnet</code> network, for testing purposes you can use the testnet:</p> <pre><code>epic-wallet --floonet &lt;command&gt;\n</code></pre>"},{"location":"wallet/cli/#wallet-dir","title":"<code>Wallet Dir</code>","text":"<p>By default, wallet will try to read configuration files from the directory with the <code>epic-wallet</code> binary file,  if that fails it will automatically try the path from <code>epic-wallet.toml</code> file.  To set custom path use <code>-c</code>, <code>--current_dir</code> flag:</p> <pre><code>epic-wallet -c &lt;wallet_dir_path&gt; &lt;command&gt;\n</code></pre>"},{"location":"wallet/cli/#account","title":"<code>Account</code>","text":"<p>The <code>account</code> command is used to manage wallet accounts. To print the list of your existing accounts type:</p> <pre><code>epic-wallet account\n</code></pre> <p>Each account acts as a separate wallet, but they are all derived from the same master seed.  The <code>default</code> account with ID <code>0</code> is created when the wallet is initialized.</p> <p>To create a new account, pass the argument <code>-c</code> <code>--create</code> followed by name of your choice:</p> <pre><code>epic-wallet account -c &lt;account_name&gt;\n</code></pre> <p>All <code>epic-wallet</code> commands can then be used with the <code>-a</code>, <code>--account</code> flag to specify an account for the command  (otherwise <code>default</code> account is used):</p> <pre><code>epic-wallet -a &lt;account_name&gt; &lt;command&gt;\n</code></pre>"},{"location":"wallet/cli/#password","title":"<code>Password</code>","text":"<p>You could specify your password on the directly command line by providing the <code>-p</code>, <code>--password</code> flag.  Please note this will place your password in your shell's command history, so use this switch with caution. <pre><code>epic-wallet -p &lt;password&gt; &lt;command&gt;\n</code></pre></p>"},{"location":"wallet/cli/#node-api-address","title":"<code>Node API Address</code>","text":"<p>The wallet should be connected to the <code>EPIC Node</code> to stay up-to-date and verify its content.  By default, it tries to connect to the address provided in the <code>epic_wallet.toml</code> file,  alternatively you can provide the <code>-r</code>, <code>--api_server_address</code> flag: <pre><code>epic-wallet -r &lt;node_api_address&gt; &lt;command&gt;\n</code></pre></p>"},{"location":"wallet/errors/","title":"Errors","text":"<p>There is two kind of errors that can appear when making a call on the API v2: basic JSON-RPC errors and API result errors</p>"},{"location":"wallet/errors/#json-rpc-errors","title":"JSON-RPC Errors","text":"<p>These errors are often due to a misconstrued JSON body, for example:</p> <p>there is not enough parameters:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"WrongNumberOfArgs. Expected 4. Actual 5\"\n  },\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>or invalid type of data entered:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"InvalidArgStructure \\\"start_height\\\" at position 1.\"\n  },\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>or method not found:</p> <pre><code>{\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Method not found\"\n  },\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\"\n}\n</code></pre> <p>this list of errors is not exhaustive, for more information about the possible error objects see the JSON RPC 2.0 specifications.</p>"},{"location":"wallet/errors/#api-result-errors","title":"API Result Errors","text":"<p>These type of errors are due to an API error during the query.  This type of error is wrapped into the result.</p> <p>For example, trying to ban a peer that's already banned:</p> <pre><code>{\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Err\": {\n      \"Internal\": \"ban peer error: PeerNotFound\"\n    }\n  }\n}\n</code></pre> <p>or a block that doesn't exist:</p> <pre><code>{\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Err\": \"NotFound\"\n  }\n}\n</code></pre>"},{"location":"wallet/foreign/","title":"Foreign API","text":"<p>Foreign (public) wallet API</p> <p>The Foreign API contains methods that other wallets will use to interact  with the owner's wallet. This API can be exposed to the outside world.  More details: Rust API docs</p> <p>When running <code>epic-wallet</code> with defaults, foreign API URL is available at <code>localhost:3415/v2/foreign</code>.</p> <p><code>Basic Authentication</code> credentials:</p> <ul> <li>user: <code>epic</code>, </li> <li>password saved in <code>~/.epic/main/.api_secret</code> file.</li> </ul> <p>In order to change API URL, authentication and other settings go to (by default) <code>~/.epic/main/epic-wallet.toml</code> file.</p> <p>Make sure your <code>epic-wallet listen -m http</code> is running before calling API endpoints.</p> <p>API call must be done via <code>POST</code> requests with <code>JSON</code> payload.</p>"},{"location":"wallet/foreign/#methods","title":"Methods","text":""},{"location":"wallet/foreign/#check_version","title":"<code>check_version</code>","text":"<p>Return the version capabilities of the running node API, </p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"check_version\",\n    \"id\": 1,\n    \"params\": []\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"foreign_api_version\": 2,\n                \"supported_slate_versions\": [\n                    \"V3\",\n                    \"V2\"\n                ]\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/foreign/#build_coinbase","title":"<code>build_coinbase</code>","text":"<p>Builds a new unconfirmed coinbase output in the wallet,</p> RequestResponse <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"build_coinbase\",\n        \"id\": 1,\n        \"params\": [\n            {\n                \"fees\": 0,\n                \"height\": 0,\n                \"key_id\": null\n            }\n        ]\n    }\n</code></pre> <pre><code>{\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"kernel\": {\n                    \"excess\": \"0817b0f50ed29f9641d0741185205f1bfa15b80c727a7a99597fe2ceb073cfc73d\",\n                    \"excess_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b97f48d17b7a42e23a4264ba232741797fef770808ca29450e35fdc3faaa6eb04\",\n                    \"features\": \"Coinbase\",\n                    \"fee\": \"0\",\n                    \"lock_height\": \"0\"\n                },\n                \"key_id\": \"0300000000000000000000000400000000\",\n                \"output\": {\n                    \"commit\": \"09bfff863041e74c3068e8b43b2120aed60d5271c07bbf9d6172a8cefa8be6600a\",\n                    \"features\": \"Coinbase\",\n                    \"proof\": \"10437a3646185865241c3459c70cd3e1231a78098d29ba5fd9517aa5bb0890be089157af72d1827113d32a60c8708f83d86be0c154eb23e94b1e3c9130b970090626b2c7da298ce3a52bece998ebc1b8cc0bbc4a974a35194336f32b89cfc787a4dd793cc9626cf01bf08febe0f3e0e06ab6970e3fc9704be457856a693ee2d4508ccabd3ee259da025ff96d3905c62b9318072be0ee38ecd8b1d6097da655489084821d56bb693f7a98da23cdedc708d4b0e1033d0dfe14eef590a9b4776a07a2b9eff0f34ca2e51832a7b9930eaf215c30d60e4219af25c6da985e879a5552c429010be0dcf7405dce523d7c23e800227e7b39be3e8cd6186e4212c2471a038cbc543228e27b16c5e32214ca807fe2c82252cfddf77cc8082ee630bb951b02d7d56e8b857f9d8d2a514cb92695ed3d3a4056b6529b6f8e213d89935f0229755243a02f2c94ef828d1bc74f8cc960b7744d09c6b087269b2f1fcd4cf7c5d57ea45402a45bf2eeab519402e33dd51c9b5a1afb109d0994fc4d252d3820822b7c24800f37f908a8312e01c20ed3c6786c8205bc69d88ecd5484a6474cd9ab223529067eab8e4969621a8e84307b1981c26270ccb137575cc1cace7e9f465633dec761a11d1f137f7a5268ee71e5a43ea6c67400ce422dbeefc88d7568abc7ad332ef14fc6bc625f0fe5fbecbbcda32175bc7a044248b877aa2b26d14530670750961fa3acb47a3a362776aef679f2468d5c6d543cfe9d0f711c7506de6c71502bd228102eff29e53d3b8358eaaedfd1c0bbe484b544c39f14a5134b726c3c3518a0a455ddada5f9967e7ca769fe5dec827a13e01b2897f39dbd507d4a908016efaef6d3ea3888f6ef8d32087f7ddcc18124be7d1809b751585085d259827b8921d8d032a20db5dd5548d2a21727e472e1a1dcd06697953c2e015a74a7fd1aa7bc03d166\"\n                }\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/foreign/#verify_slate_messages","title":"<code>verify_slate_messages</code>","text":"<p>Verifies all messages in the slate match their public keys.</p> RequestResponse <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"verify_slate_messages\",\n        \"id\": 1,\n        \"params\": [ {\n            \"amount\": \"6000000000\",\n            \"fee\": \"8000000\",\n            \"height\": \"4\",\n            \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"lock_height\": \"4\",\n            \"ttl_cutoff_height\": null,\n            \"payment_proof\": null,\n            \"num_participants\": 2,\n            \"participant_data\": [\n            {\n                \"id\": \"0\",\n                \"message\": \"my message\",\n                \"message_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b1d4c1358be398f801eb90d933774b5218fa7e769b11c4c640402253353656f75\",\n                \"part_sig\": null,\n                \"public_blind_excess\": \"034b4df2f0558b73ea72a1ca5c4ab20217c66bbe0829056fca7abe76888e9349ee\",\n                \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n            }\n            ],\n            \"tx\": {\n                \"body\": {\n                    \"inputs\": [\n                    {\n                        \"commit\": \"08e1da9e6dc4d6e808a718b2f110a991dd775d65ce5ae408a4e1f002a4961aa9e7\",\n                        \"features\": \"Coinbase\"\n                    }\n                    ],\n                    \"kernels\": [\n                    {\n                        \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                        \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                        \"features\": \"HeightLocked\",\n                        \"fee\": \"8000000\",\n                        \"lock_height\": \"4\"\n                    }\n                    ],\n                    \"outputs\": [\n                    {\n                        \"commit\": \"094be57c91787fc2033d5d97fae099f1a6ddb37ea48370f1a138f09524c767fdd3\",\n                        \"features\": \"Plain\",\n                        \"proof\": \"2a42e9e902b70ce44e1fccb14de87ee0a97100bddf12c6bead1b9c5f4eb60300f29c13094fa12ffeee238fb4532b18f6b61cf51b23c1c7e1ad2e41560dc27edc0a2b9e647a0b3e4e806fced5b65e61d0f1f5197d3e2285c632d359e27b6b9206b2caffea4f67e0c7a2812e7a22c134b98cf89bd43d9f28b8bec25cce037a0ac5b1ae8f667e54e1250813a5263004486b4465ad4e641ab2b535736ea26535a11013564f08f483b7dab1c2bcc3ee38eadf2f7850eff7e3459a4bbabf9f0cf6c50d0c0a4120565cd4a2ce3e354c11721cd695760a24c70e0d5a0dfc3c5dcd51dfad6de2c237a682f36dc0b271f21bb3655e5333016aaa42c2efa1446e5f3c0a79ec417c4d30f77556951cb0f05dbfafb82d9f95951a9ea241fda2a6388f73ace036b98acce079f0e4feebccc96290a86dcc89118a901210b245f2d114cf94396e4dbb461e82aa26a0581389707957968c7cdc466213bb1cd417db207ef40c05842ab67a01a9b96eb1430ebc26e795bb491258d326d5174ad549401059e41782121e506744af8af9d8e493644a87d613600888541cbbe538c625883f3eb4aa3102c5cfcc25de8e97af8927619ce6a731b3b8462d51d993066b935b0648d2344ad72e4fd70f347fbd81041042e5ea31cc7b2e3156a920b80ecba487b950ca32ca95fae85b759c936246ecf441a9fdd95e8fee932d6782cdec686064018c857efc47fb4b2a122600d5fdd79af2486f44df7e629184e1c573bc0a9b3feb40b190ef2861a1ab45e2ac2201b9cd42e495deea247269820ed32389a2810ad6c0f9a296d2a2d9c54089fed50b7f5ecfcd33ab9954360e1d7f5598c32128cfcf2a1d8bf14616818da8a5343bfa88f0eedf392e9d4ab1ace1b60324129cd4852c2e27813a9cf71a6ae6229a4fcecc1a756b3e664c5f50af333082616815a3bec8fc0b75b8e4e767d719\"\n                    }\n                    ]\n                },\n                \"offset\": \"d202964900000000d302964900000000d402964900000000d502964900000000\"\n            },\n            \"version_info\": {\n                \"orig_version\": 2,\n                \"version\": 2,\n                \"block_header_version\": 6\n            }\n        }\n        ]\n    }\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"id\": 1,\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/foreign/#receive_tx","title":"<code>receive_tx</code>","text":"<p>Receive the transaction created by another party,</p> RequestResponse <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"receive_tx\",\n        \"id\": 1,\n        \"params\": [\n            {\n            \"version_info\": {\n                \"version\": 2,\n                \"orig_version\": 2,\n                \"block_header_version\": 6\n            },\n            \"num_participants\": 2,\n            \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"tx\": {\n                \"offset\": \"d202964900000000d302964900000000d402964900000000d502964900000000\",\n                \"body\": {\n                    \"inputs\": [\n                        {\n                            \"features\": \"Coinbase\",\n                            \"commit\": \"087df32304c5d4ae8b2af0bc31e700019d722910ef87dd4eec3197b80b207e3045\"\n                        },\n                        {\n                            \"features\": \"Coinbase\",\n                            \"commit\": \"08e1da9e6dc4d6e808a718b2f110a991dd775d65ce5ae408a4e1f002a4961aa9e7\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"features\": \"Plain\",\n                            \"commit\": \"0812276cc788e6870612296d926cba9f0e7b9810670710b5a6e6f1ba006d395774\",\n                            \"proof\": \"dcff6175390c602bfa92c2ffd1a9b2d84dcc9ea941f6f317bdd0f875244ef23e696fd17c71df79760ce5ce1a96aab1d15dd057358dc835e972febeb86d50ccec0dad7cfe0246d742eb753cf7b88c045d15bc7123f8cf7155647ccf663fca92a83c9a65d0ed756ea7ebffd2cac90c380a102ed9caaa355d175ed0bf58d3ac2f5e909d6c447dfc6b605e04925c2b17c33ebd1908c965a5541ea5d2ed45a0958e6402f89d7a56df1992e036d836e74017e73ccad5cb3a82b8e139e309792a31b15f3ffd72ed033253428c156c2b9799458a25c1da65b719780a22de7fe7f437ae2fccd22cf7ea357ab5aa66a5ef7d71fb0dc64aa0b5761f68278062bb39bb296c787e4cabc5e2a2933a416ce1c9a9696160386449c437e9120f7bb26e5b0e74d1f2e7d5bcd7aafb2a92b87d1548f1f911fb06af7bd6cc13cee29f7c9cb79021aed18186272af0e9d189ec107c81a8a3aeb4782b0d950e4881aa51b776bb6844b25bce97035b48a9bdb2aea3608687bcdd479d4fa998b5a839ff88558e4a29dff0ed13b55900abb5d439b70793d902ae9ad34587b18c919f6b875c91d14deeb1c373f5e76570d59a6549758f655f1128a54f162dfe8868e1587028e26ad91e528c5ae7ee9335fa58fb59022b5de29d80f0764a9917390d46db899acc6a5b416e25ecc9dccb7153646addcc81cadb5f0078febc7e05d7735aba494f39ef05697bbcc9b47b2ccc79595d75fc13c80678b5e237edce58d731f34c05b1ddcaa649acf2d865bbbc3ceda10508bcdd29d0496744644bf1c3516f6687dfeef5649c7dff90627d642739a59d91a8d1d0c4dc55d74a949e1074427664b467992c9e0f7d3af9d6ea79513e8946ddc0d356bac49878e64e6a95b0a30214214faf2ce317fa622ff3266b32a816e10a18e6d789a5da1f23e67b4f970a68a7bcd9e18825ee274b0483896a40\"\n                        }\n                    ],\n                    \"kernels\": [\n                        {\n                            \"features\": \"Plain\",\n                            \"fee\": \"7000000\",\n                            \"lock_height\": \"0\",\n                            \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n                        }\n                    ]\n                }\n            },\n            \"amount\": \"60000000000\",\n            \"fee\": \"7000000\",\n            \"height\": \"5\",\n            \"lock_height\": \"0\",\n            \"ttl_cutoff_height\": null,\n            \"payment_proof\": null,\n            \"participant_data\": [\n                {\n                    \"id\": \"0\",\n                    \"public_blind_excess\": \"033ac2158fa0077f087de60c19d8e431753baa5b63b6e1477f05a2a6e7190d4592\",\n                    \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\",\n                    \"part_sig\": null,\n                    \"message\": null,\n                    \"message_sig\": null\n                }\n            ]\n        },\n        null,\n        \"Thanks, Freeman\"\n        ]\n    }\n</code></pre> <pre><code>{\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n            \"result\": {\n                \"Ok\": {\n                    \"amount\": \"60000000000\",\n                    \"fee\": \"7000000\",\n                    \"height\": \"5\",\n                    \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n                    \"lock_height\": \"0\",\n                    \"ttl_cutoff_height\": null,\n                    \"payment_proof\": null,\n                    \"num_participants\": 2,\n                    \"participant_data\": [\n                    {\n                        \"id\": \"0\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"part_sig\": null,\n                        \"public_blind_excess\": \"033ac2158fa0077f087de60c19d8e431753baa5b63b6e1477f05a2a6e7190d4592\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    },\n                    {\n                        \"id\": \"1\",\n                        \"message\": \"Thanks, Freeman\",\n                \"message_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b30a1f1b21eade1b4bd211e1f137fbdbca1b78dc43da21b1695f6a0edf2437ff9\",\n                        \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b2b35bd28dfd2269e0670e0cf9270bd6df2d03fbd64523ee4ae622396055b96fc\",\n                        \"public_blind_excess\": \"038fe0443243dab173c068ef5fa891b242d2b5eb890ea09475e6e381170442ee16\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    }\n                    ],\n                    \"tx\": {\n                    \"body\": {\n                        \"inputs\": [\n                        {\n                            \"commit\": \"087df32304c5d4ae8b2af0bc31e700019d722910ef87dd4eec3197b80b207e3045\",\n                            \"features\": \"Coinbase\"\n                        },\n                        {\n                            \"commit\": \"08e1da9e6dc4d6e808a718b2f110a991dd775d65ce5ae408a4e1f002a4961aa9e7\",\n                            \"features\": \"Coinbase\"\n                        }\n                        ],\n                        \"kernels\": [\n                        {\n                            \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"features\": \"Plain\",\n                            \"fee\": \"7000000\",\n                            \"lock_height\": \"0\"\n                        }\n                        ],\n                        \"outputs\": [\n                        {\n                            \"commit\": \"084ee97defa8c37124d4c69baa753e2532535faa81f79ea5e0489db25297d5beb8\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"007df7dddd1efca757b2070740cc604628390eb59e151f96ff2eaa5361f5435fd1aa6ea3febc97fcfe1b3248d040c82de36180392976ba2d1147c2fb021c87ad044f1f9763934d9d3f4431417762eed03c53ce17aedb7824565c1f48fccec9c4abc0d28bd32b02ce9bee40bf6a60cf7c9c203cc24e4b779f901e12c987573698cf7f04e3aace26e71262138605424800adf3295d09f7f45dddf1855c785e98d45eae3cd111d18552e733895458df15e71a13838d789a4cb369f4ddb8aa9c503b080fd88a147245df0522d4136d36a183bd941e6cf94dffc78438b12194d4df7114d1e27a7a2f014920a321223ecbebb2b9642a22f8ed4e74883125f3e757b2f118853ffab1b68f15c1a2d021e583ff3fd1ea28720a81325b3cc2327ba9fb2fd9b2644adb7f3c7b2e319b2536a34f67e6f09346f24da6bcae1b241f8590493476dfe35b183e54f105eb219b601e0e53965409701dc1fd9562c42ad977505ea7bf264f01770569a4a358a70fb0b2c65969fac3b23954f0ca0adace0703243f1dab626509a8656e7a981709c3ac1d51694bafa55aad45c101937cbf3e45d6708c07be71419769a10a4f64f2b7d53a54eac73cdbd3279f91c5f8991a4b17621c36195a9391364fa221e8a8dee21ebc3a6eb9cd2940a3676e7ef3cdd46319bdc11f748785e49ff41bec2c3243255d83c6895bc0c893e6a772d7440a68321246b177709d3bd82d0dc2f5bca40c878e859b6f82319a386e0b7fcbc8010a25178b08418389ba7c6a77f99ac7f4ae5c686ab6574fcd0116f8573bccda3edfdff36c9c92ce2fb8bfb0ce2fe5c6b2498c6eb16fc2d40de9ddcba199a7e93d648abf39d6b248e196de7127e6b812e3080497f2a82afa69a471ab511e753e5b17a1c39c6728a065898af6674608d92a625e96e2f0258fe2eb06a27d0586d889d61f97faaa3facf58cda\"\n                        },\n                        {\n                            \"commit\": \"0812276cc788e6870612296d926cba9f0e7b9810670710b5a6e6f1ba006d395774\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"dcff6175390c602bfa92c2ffd1a9b2d84dcc9ea941f6f317bdd0f875244ef23e696fd17c71df79760ce5ce1a96aab1d15dd057358dc835e972febeb86d50ccec0dad7cfe0246d742eb753cf7b88c045d15bc7123f8cf7155647ccf663fca92a83c9a65d0ed756ea7ebffd2cac90c380a102ed9caaa355d175ed0bf58d3ac2f5e909d6c447dfc6b605e04925c2b17c33ebd1908c965a5541ea5d2ed45a0958e6402f89d7a56df1992e036d836e74017e73ccad5cb3a82b8e139e309792a31b15f3ffd72ed033253428c156c2b9799458a25c1da65b719780a22de7fe7f437ae2fccd22cf7ea357ab5aa66a5ef7d71fb0dc64aa0b5761f68278062bb39bb296c787e4cabc5e2a2933a416ce1c9a9696160386449c437e9120f7bb26e5b0e74d1f2e7d5bcd7aafb2a92b87d1548f1f911fb06af7bd6cc13cee29f7c9cb79021aed18186272af0e9d189ec107c81a8a3aeb4782b0d950e4881aa51b776bb6844b25bce97035b48a9bdb2aea3608687bcdd479d4fa998b5a839ff88558e4a29dff0ed13b55900abb5d439b70793d902ae9ad34587b18c919f6b875c91d14deeb1c373f5e76570d59a6549758f655f1128a54f162dfe8868e1587028e26ad91e528c5ae7ee9335fa58fb59022b5de29d80f0764a9917390d46db899acc6a5b416e25ecc9dccb7153646addcc81cadb5f0078febc7e05d7735aba494f39ef05697bbcc9b47b2ccc79595d75fc13c80678b5e237edce58d731f34c05b1ddcaa649acf2d865bbbc3ceda10508bcdd29d0496744644bf1c3516f6687dfeef5649c7dff90627d642739a59d91a8d1d0c4dc55d74a949e1074427664b467992c9e0f7d3af9d6ea79513e8946ddc0d356bac49878e64e6a95b0a30214214faf2ce317fa622ff3266b32a816e10a18e6d789a5da1f23e67b4f970a68a7bcd9e18825ee274b0483896a40\"\n                        }\n                        ]\n                    },\n                    \"offset\": \"d202964900000000d302964900000000d402964900000000d502964900000000\"\n                    },\n                    \"version_info\": {\n                        \"orig_version\": 2,\n                        \"version\": 2,\n                        \"block_header_version\": 6\n                    }\n                }\n            }\n    }\n</code></pre>"},{"location":"wallet/foreign/#finalize_invoice_tx","title":"<code>finalize_invoice_tx</code>","text":"<p>Finalizes an invoice transaction initiated by this wallet's <code>owner_api</code>,</p> RequestResponse <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"finalize_invoice_tx\",\n        \"id\": 1,\n        \"params\": [{\n            \"version_info\": {\n                \"version\": 2,\n                \"orig_version\": 2,\n                \"block_header_version\": 6\n            },\n            \"num_participants\": 2,\n            \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"tx\": {\n                \"offset\": \"d202964900000000d302964900000000d402964900000000d502964900000000\",\n                \"body\": {\n                    \"inputs\": [\n                        {\n                            \"features\": \"Coinbase\",\n                            \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\"\n                        },\n                        {\n                            \"features\": \"Coinbase\",\n                            \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"features\": \"Plain\",\n                            \"commit\": \"091454e23b4dbc71f546a41035d69f4c87d0f6efb5ceb119cc0d2eef80ba1928d7\",\n                            \"proof\": \"c841838499e57d3cca5dffca671596c746b3b49150ca62b94928018337dc695ec646c3e38dbd291d7e1113f72c41e0597e0956261cf9384841d6d37953c8108a0285ba2f33d3b86a235c908a7a6ff8b6a2f7d3ee4ab05dd7a1e09064a72d993fec2d4ed03c89ca390598a9340bf8512cb8e57c3d62794386101d4563a3302041dfc364b9f96f2c06eecac1b33d608c59a84bd69f3d075b60896de76babfb538e558c844c6b09feff47dbfad3854275f68c2ce2e0d9a14fc0564bb069e3558df17447557bb501c3b0b97396b0f9b1cbc5f4f50feb33fd6c6f1cbf10b1d150f7c70144e0b28fa749dc4d0d45ac4382611a8e8b2a74f40d61411fd7fd0713ed075f2ce7d30a9b16f758177d94df2e6de611d7e75b87aa8303d544937ef4afec55d17e074817342fb498fb0c6ffca85f431cb520cd434d217ca303f5d194a39d0a93c0e3c37f5e503695502dc2a5cbe31911bc557402b36a9c2749e73ca8803f2962be75001042a03c9fce5dea2189fe05e61d4a7717397ff481566e77804bd51da8fc2f98bce3bab3c2c9b1ffa19b8840a752a8e9e0825cea9927b97c9ddb425ce5a9a689fb428e0890352b5c0fe93111cfaa1e5c6e06daebdbf242630d6b53c676241c33a17faed95901282f6e67b210e187e075f77f2582c9e23f3a386147c9f6a9432418ade828620a4fa0578ac04bb59b36b4ca679fc57d749d8dd47a1a61066ba6e0ff0a434b8f8668d9c9490735dd82c1cb4bcfafb1c213385ece71ef3c66e70aaeddf2bf35674e4f4c78868dfd8475f88fac65fade11de8b372337c6bdcf2d684b89094c732b8acf2bbe4ceedcb807da51171ffae4b51a80f221fb1b4f803ad1e13dff1b4a476297478a23d6382a98c6121018872bfbd85137cb30d230bea9c8ef42848e49f3dc92333a69dd50f525b24dab0b8c286f721e57462e4a538cc6019d\"\n                        },\n                        {\n                            \"features\": \"Plain\",\n                            \"commit\": \"09414416856d650cd42abad97943f8ea32ff19e7d5d10201ff790d1ca941f578ed\",\n                            \"proof\": \"f75fbd6a43556c5a0a18a1b304ce825684560c1f5591b572ea24f704d8b00c2df2b8bcfee98ede60ccacb45e146f3bd8b31e7f84019d68493c6a80be557d42a00db146eff731720c608e27c064dd236ab00a1e4e5d062ad371c1cbf5c3bb9a50edb2e6eaff9727c13b56c0834d311680092beb6aeeb76abe2cf352a4b79698da3a06d39a78c65c9113583a3ed7aef098e08138db7b0b6bbfce9bdcbe583c65590b27634fee1a1cccb59f054132cbc00a712ff0b4d9ce6d58a4a2bf62dce49defce48a5b72236db3632728e2effce93297f675743d41d5fdb5985fd11d7f4da201832274b9d53cbbbe221b39cbb71adf16d8ec00a1ed42f5593721396202bdf6ab802ea927f1e63456b61b679bffcf0bf7151b625f5179facfd2257ffe9e0c21dac4409100860e031a49587f4ad86cef66fcece0ef177bf0bda6f12cec3be09a659dd3feb954c36f655364845bf451b207cf500e44c9d1658fbd5248d2257ad783c6e02a32565ee056731d6a7b06669e6bf373f437c33dbb3b70dd913f83343f029dc288e311d92c0c8b42b227597679ebfad3cf371923530c87da23ff994a9278df2f74ce71687d5531d9594282ce0861954df896be88a01405291f0d51169fe2317e4b0769f41d9472c5ce239f53abd16b551024bc7f705d3bcd13f4118f105685a80b1aaded0bea9884f18600a9d6066c48edc596c62a69d357de14789eb60fe61de82aed04b7d5727ac25b976d1ebf60bdcaf6359329a69cac6db212cc049b5159a6e7b83453139cab4ae57b585f0ba1c8f90906db01a610af7a7a3a66e92223d91121643ad3ebbaf61ee8a2394062b9ea4b493a410ea9937ecb09ee31696412d024e455772788cb8a3b5c82699d1b723f2013f1e3a2c4c2f558d6adc8289147d171b88d9fc41e64c30ef1b064b08f7447b6b24b425103e8588203e7328b845b719\"\n                        }\n                    ],\n                    \"kernels\": [\n                        {\n                            \"features\": \"Plain\",\n                            \"fee\": \"700000\",\n                            \"lock_height\": \"0\",\n                            \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n                        }\n                    ]\n                }\n            },\n            \"amount\": \"600000000\",\n            \"fee\": \"700000\",\n            \"height\": \"5\",\n            \"lock_height\": \"0\",\n            \"ttl_cutoff_height\": null,\n            \"payment_proof\": null,\n            \"participant_data\": [\n                {\n                    \"id\": \"1\",\n                    \"public_blind_excess\": \"029e99ff15745fc6f3988957d34340ecdbeea7de7d9d231a827413ec9912c61aad\",\n                    \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\",\n                    \"part_sig\": null,\n                    \"message\": null,\n                    \"message_sig\": null\n                },\n                {\n                    \"id\": \"0\",\n                    \"public_blind_excess\": \"023be94e6254d688b05c0c593089ee551b62034c2a37950cff4ec4b2e2c3f280c4\",\n                    \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\",\n                    \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bea191bb6f1a43b1596ea5954d79816b49e267db71df6e2328b15fc34170fb37f\",\n                    \"message\": null,\n                    \"message_sig\": null\n                }\n            ]\n        }]\n    }\n</code></pre> <pre><code>{\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"amount\": \"600000000\",\n                \"fee\": \"700000\",\n                \"height\": \"5\",\n                \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n                \"lock_height\": \"0\",\n                \"ttl_cutoff_height\": null,\n                \"payment_proof\": null,\n                \"num_participants\": 2,\n                \"participant_data\": [\n                    {\n                        \"id\": \"1\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bbb71aee3aa45c5f9bbc9f9f2e92b5486b018f3b978a0bd5ffed7e674b16c747d\",\n                        \"public_blind_excess\": \"029e99ff15745fc6f3988957d34340ecdbeea7de7d9d231a827413ec9912c61aad\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    },\n                    {\n                        \"id\": \"0\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bea191bb6f1a43b1596ea5954d79816b49e267db71df6e2328b15fc34170fb37f\",\n                        \"public_blind_excess\": \"023be94e6254d688b05c0c593089ee551b62034c2a37950cff4ec4b2e2c3f280c4\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    }\n                ],\n                \"tx\": {\n                    \"body\": {\n                        \"inputs\": [\n                            {\n                                \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\",\n                                \"features\": \"Coinbase\"\n                            },\n                            {\n                                \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                                \"features\": \"Coinbase\"\n                            }\n                        ],\n                        \"kernels\": [\n                            {\n                                \"excess\": \"08d09187cb93cf5d6b97b28e8ca529912bf35ec8773d3e9af9b3c174a270dc7f05\",\n                                \"excess_sig\": \"66074d25a751c4743342c90ad8ead9454daa00d9b9aed29bca321036d16c4b4da58bc9999cea000f52b45347c1c46a3a4f3f70719696a09289ede2a9c87b27fd\",\n                                \"features\": \"Plain\",\n                                \"fee\": \"700000\",\n                                \"lock_height\": \"0\"\n                            }\n                        ],\n                        \"outputs\": [\n                            {\n                                \"commit\": \"091454e23b4dbc71f546a41035d69f4c87d0f6efb5ceb119cc0d2eef80ba1928d7\",\n                                \"features\": \"Plain\",\n                                \"proof\": \"c841838499e57d3cca5dffca671596c746b3b49150ca62b94928018337dc695ec646c3e38dbd291d7e1113f72c41e0597e0956261cf9384841d6d37953c8108a0285ba2f33d3b86a235c908a7a6ff8b6a2f7d3ee4ab05dd7a1e09064a72d993fec2d4ed03c89ca390598a9340bf8512cb8e57c3d62794386101d4563a3302041dfc364b9f96f2c06eecac1b33d608c59a84bd69f3d075b60896de76babfb538e558c844c6b09feff47dbfad3854275f68c2ce2e0d9a14fc0564bb069e3558df17447557bb501c3b0b97396b0f9b1cbc5f4f50feb33fd6c6f1cbf10b1d150f7c70144e0b28fa749dc4d0d45ac4382611a8e8b2a74f40d61411fd7fd0713ed075f2ce7d30a9b16f758177d94df2e6de611d7e75b87aa8303d544937ef4afec55d17e074817342fb498fb0c6ffca85f431cb520cd434d217ca303f5d194a39d0a93c0e3c37f5e503695502dc2a5cbe31911bc557402b36a9c2749e73ca8803f2962be75001042a03c9fce5dea2189fe05e61d4a7717397ff481566e77804bd51da8fc2f98bce3bab3c2c9b1ffa19b8840a752a8e9e0825cea9927b97c9ddb425ce5a9a689fb428e0890352b5c0fe93111cfaa1e5c6e06daebdbf242630d6b53c676241c33a17faed95901282f6e67b210e187e075f77f2582c9e23f3a386147c9f6a9432418ade828620a4fa0578ac04bb59b36b4ca679fc57d749d8dd47a1a61066ba6e0ff0a434b8f8668d9c9490735dd82c1cb4bcfafb1c213385ece71ef3c66e70aaeddf2bf35674e4f4c78868dfd8475f88fac65fade11de8b372337c6bdcf2d684b89094c732b8acf2bbe4ceedcb807da51171ffae4b51a80f221fb1b4f803ad1e13dff1b4a476297478a23d6382a98c6121018872bfbd85137cb30d230bea9c8ef42848e49f3dc92333a69dd50f525b24dab0b8c286f721e57462e4a538cc6019d\"\n                            },\n                            {\n                                \"commit\": \"09414416856d650cd42abad97943f8ea32ff19e7d5d10201ff790d1ca941f578ed\",\n                                \"features\": \"Plain\",\n                                \"proof\": \"f75fbd6a43556c5a0a18a1b304ce825684560c1f5591b572ea24f704d8b00c2df2b8bcfee98ede60ccacb45e146f3bd8b31e7f84019d68493c6a80be557d42a00db146eff731720c608e27c064dd236ab00a1e4e5d062ad371c1cbf5c3bb9a50edb2e6eaff9727c13b56c0834d311680092beb6aeeb76abe2cf352a4b79698da3a06d39a78c65c9113583a3ed7aef098e08138db7b0b6bbfce9bdcbe583c65590b27634fee1a1cccb59f054132cbc00a712ff0b4d9ce6d58a4a2bf62dce49defce48a5b72236db3632728e2effce93297f675743d41d5fdb5985fd11d7f4da201832274b9d53cbbbe221b39cbb71adf16d8ec00a1ed42f5593721396202bdf6ab802ea927f1e63456b61b679bffcf0bf7151b625f5179facfd2257ffe9e0c21dac4409100860e031a49587f4ad86cef66fcece0ef177bf0bda6f12cec3be09a659dd3feb954c36f655364845bf451b207cf500e44c9d1658fbd5248d2257ad783c6e02a32565ee056731d6a7b06669e6bf373f437c33dbb3b70dd913f83343f029dc288e311d92c0c8b42b227597679ebfad3cf371923530c87da23ff994a9278df2f74ce71687d5531d9594282ce0861954df896be88a01405291f0d51169fe2317e4b0769f41d9472c5ce239f53abd16b551024bc7f705d3bcd13f4118f105685a80b1aaded0bea9884f18600a9d6066c48edc596c62a69d357de14789eb60fe61de82aed04b7d5727ac25b976d1ebf60bdcaf6359329a69cac6db212cc049b5159a6e7b83453139cab4ae57b585f0ba1c8f90906db01a610af7a7a3a66e92223d91121643ad3ebbaf61ee8a2394062b9ea4b493a410ea9937ecb09ee31696412d024e455772788cb8a3b5c82699d1b723f2013f1e3a2c4c2f558d6adc8289147d171b88d9fc41e64c30ef1b064b08f7447b6b24b425103e8588203e7328b845b719\"\n                            }\n                        ]\n                    },\n                    \"offset\": \"d202964900000000d302964900000000d402964900000000d502964900000000\"\n                },\n                \"version_info\": {\n                    \"orig_version\": 2,\n                    \"version\": 2,\n                    \"block_header_version\": 6\n                }\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/","title":"Requirements to run the Owner API","text":"<p>Wallet data does not exist until the user runs <code>epic-wallet init</code>.  The init command creates <code>epic-wallet.toml</code>, prompts the user for a password, creates a seed file,  stores the resulting data files in the directory specified in <code>epic-wallet.toml</code> and initialises the wallet database.</p> <p>This will allow to run <code>epic-wallet owner_api</code> command to start a web server  listening for API calls done via <code>POST</code> requests with <code>JSON</code> payload.</p>"},{"location":"wallet/owner/#security-model","title":"Security Model","text":"<p>Documentation of the Secure API workflow source:  docs.grin.mw.</p> <p>Author: Michael Cordner</p> <p>Given that the Wallet's Owner API needs to deal with sensitive data such as passwords and seed phrases,  the API is enhanced with a ECDH and Token-based security model, the primary goals of which are to:</p> <ul> <li> <p>Ensure sensitive data such as passwords or seed phrases are always end-to-end encrypted between the client    and the Owner API server, regardless of what higher-level protocols are used during the exchange.</p> </li> <li> <p>Minimize the potential for damage that can be done by a third party listening on the exchange between    a wallet client and its corresponding server.</p> </li> <li> <p>Ensure that sensitive data such as passwords or seed phrases are not resident in server-side memory any    longer than they absolutely need to be.</p> </li> </ul> <p>Note that the \"SecureAPI\" mode and all lifecycle functions are implemented in a V3 API,  with the V2 API maintained for a time for backwards compatibility. The V3 API requires all JSON-RPC communication  to be encrypted, except for the <code>init_secure_api</code> function.</p> <p>SecureAPI Mode consists of an ECDH key agreement followed by the establishment of an API Token that's used to  XOR encrypt the wallet seed on the server side. The negotiated ECDH shared key is used to encrypt all requests and  responses between the client and the JSON-RPC layer, while the token must be included in all API requests to allow the wallet backend to decrypt the seed. 'Open' wallets store their in-memory seeds XORed against the token,  which is temporarily XORed against the supplied token during each request to reproduce the master seed.</p> <p>ECDH will use <code>secp256k1</code> for key agreement.</p> <p>Encryption of JSON-RPC requests and responses will be performed using AEAD in GCM mode with 128-bit tags, 96 bit nonces,  a 16 byte suffix length and an empty vector for the additional data.  A 12 byte nonce will be applied in the encryption and included in each request/response to use on the decrypting side.</p> Encrypted requests<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"encrypted_request_v3\",\n    \"id\": \"1\",\n    \"params\": {\n       \"nonce\": \"ef32...\",\n       \"body_enc\": \"e0bcd...\"\n    }\n}\n</code></pre>"},{"location":"wallet/owner/#security-mode-initialization","title":"Security Mode: Initialization","text":"<p>To initialize the Secure API, clients will generate an EC keypair using the <code>secp256k1</code> curve,  and provide the public key to the Owner API server via a new <code>init_secure_api</code> method.  Both client and server will calculate the shared key, and store this key for the remainder of the session.  The sequence of operations is outlined below:</p> <p> img.png </p> <p>The Secure API assumes that all requests (other than the actual call to <code>init_secure_api</code> itself) will be encrypted  with the shared secret and presented in the above JSON-RPC format. All API calls other than <code>open_wallet</code> will be  accompanied by a valid encrypted token derived during the call to the open_wallet function. This assumption will  remain until the server process exits or a call to a corresponding <code>close_wallet</code> function is called.</p> <p>The shared secret can be refreshed by the client at any time with another call to <code>init_secure_api</code>  (either encrypted or unencrypted). Closing a wallet via the <code>close_wallet</code> function does not regenerate  the shared secret but does invalidate the token and drops the XORed seed from memory.</p>"},{"location":"wallet/owner/#security-mode-opening-the-wallet","title":"Security Mode: Opening The Wallet","text":"<p>Opening a wallet in SecureAPI mode consists of encrypting a request to <code>open_wallet</code> (which contains the wallet password) with the shared secret <code>s</code>. The request is decrypted in the JSON-RPC layer and the password is used in the wallet  backend to unlock the wallet master seed. The master seed is stored XORed against a randomly-generated token <code>T</code>,  which is returned to the client in an encrypted response for inclusion in all further API calls.  <code>T</code> is valid for the lifetime of the process, or until a corresponding call to <code>close_wallet</code>.</p> <p> img_1.png </p>"},{"location":"wallet/owner/#security-mode-calling-api-functions","title":"Security Mode: Calling API Functions","text":"<p>Calls to each API function proceed as per a call to <code>open_wallet</code>, however each encrypted request must contain the token  provided by the <code>open_wallet</code> call. The token is XORed against the stored XORed seed to recover the original seed by the  backend for the duration of each call, and the seed value is dropped and zeroed from memory when each call returns.</p>"},{"location":"wallet/owner/#basic-authentication","title":"Basic Authentication","text":"<p>Each API call by default is also secured with the <code>basic authentication</code>, default credentials:</p> <ul> <li>user: <code>epic</code> </li> <li>password saved in <code>.owner_api_secret</code> file by default placed in the main waller directory.</li> </ul> <p>You can change the path of the <code>.owner_api_secret</code> file ine the <code>epic-wallet.toml</code> configuration file.</p> <p>Commenting out line starting with <code>api_secret_path</code> will disable the basic authentication.</p>"},{"location":"wallet/owner/#api-endpoint","title":"API Endpoint","text":"<p>When running <code>epic-wallet</code> with defaults, owner API URL is available at <code>localhost:3420/v3/owner</code>.</p>"},{"location":"wallet/owner/#code-examples","title":"Code Examples","text":"<p>Before running the code make sure your <code>epic-wallet</code> web server is running:</p> <p><code>epic-wallet owner_api</code></p> PythonNodeJS <p>Requires Python 3.10+ and following packages:</p> <pre><code>python3 -m pip install coincurve pycryptodome requests\n</code></pre> Retrieve wallet balance code example secure_api_example.py<pre><code>from typing import Union\nimport base64\nimport json\nimport os\n\nfrom coincurve import PublicKey, PrivateKey\nfrom Crypto.Cipher import AES\nimport requests\n\n\n# DEFAULT VALUES\napi_url = f\"http://127.0.0.1:3420/v3/owner\"\nauth_user = 'epic'\nowner_api_secret_path = f\"{os.environ['HOME']}/.epic/main/.owner_api_secret\"\nwallet_password = \"your_password\"\n\nwith open(owner_api_secret_path, 'r') as f:\n    owner_api_secret = f.read()\n\nbasic_auth = (auth_user, owner_api_secret)\n\n\ndef parse_api_response(response: Union[dict, requests.Response]):\n    \"\"\"\n    Parse EPIC API responses, handle different errors\n    and extract the data from different response formats.\n    \"\"\"\n    if isinstance(response, requests.Response):\n        if response.status_code not in [200, 201]:\n            if response.status_code == 401:\n                raise SystemExit(\"Unauthorized to access API\")\n            else:\n                raise SystemExit(f\"Error: {response.status_code}, {response.reason}\")\n        try:\n            response = response.json()\n        except ValueError as e:\n            raise SystemExit(f\"Error while reading api response: '{str(e)}'\\n\"\n                             f\"Make sure your auth credentials are valid.\")\n\n    if \"error\" in response:\n        raise SystemExit(f'{response[\"error\"]}')\n\n    elif \"Err\" in response:\n        raise SystemExit(f'{response[\"result\"]}')\n\n    elif 'Ok' in response['result']:\n        return response['result']['Ok']\n\n    else:\n        return response\n\n\ndef init_secure_api() -&gt; str:\n    \"\"\"\n    This is the first step in epic-wallet Secure API workflow\n    Initialize process of computing encryption_key to encrypt payloads\n    :return: encryption key\n    \"\"\"\n\n    # Randomly created encryption key valid during the session\n    secret_key = PrivateKey(os.urandom(32))\n\n    # Prepare payload for the API call\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': \"init_secure_api\",\n        'params': {'ecdh_pubkey': secret_key.public_key.format().hex()}\n        }\n\n    # POST your secret_key.public_key and receive new api_public_key\n    response = requests.post(api_url, json=payload, auth=basic_auth)\n    api_public_key_hex = parse_api_response(response)\n\n    # Parse received api_public_key from hex to bytes\n    api_public_key_bytes = PublicKey(bytes.fromhex(api_public_key_hex)).format()\n\n    # Compute new encryption_key used for further encryption every api_call in this session\n    encryption_key_ = PublicKey(api_public_key_bytes).multiply(secret_key.secret)\n\n    # Format to hex and remove first 2 bits\n    encryption_key_ = encryption_key_.format().hex()[2:]\n    print(f\"\u2705  Encryption key successfully generated\")\n\n    return encryption_key_\n\n\ndef encrypt(key: str, payload: dict) -&gt; dict:\n    \"\"\"\n    :param key: 32bit `secp256k1` ecdh encryption key computed via init_secure_api() func\n    :param payload: json payload to encrypt\n    :return: dict with base64 encoded AES-256-GMC encrypted payload and nonce as hex string\n\n    Encrypt api_call JSON payload with:\n     - encryption_key\n     - 12bit nonce,\n     - 16bit tag\n    \"\"\"\n    nonce = os.urandom(12)\n    message = json.dumps(payload).encode()\n    aes_cipher = AES.new(bytes.fromhex(key), AES.MODE_GCM, nonce=nonce)\n    ciphertext, tag = aes_cipher.encrypt_and_digest(message)\n    encrypted_params = {'nonce': nonce.hex(), 'body_enc': base64.b64encode(ciphertext + tag).decode()}\n\n    return encrypted_params\n\n\ndef decrypt(key: str, data: dict, nonce: bytes) -&gt; str:\n    \"\"\" Decrypt base64 encoded string\n    :param key: 32bit `secp256k1` ecdh encryption key computed via init_secure_api() func\n    :param data: encrypted message\n    :param nonce: 12bit nonce as hex string\n    :return: decoded string with JSON response\n    \"\"\"\n    data = base64.b64decode(data)\n    ciphertext = data[:-16]\n    aesCipher = AES.new(bytes.fromhex(key), AES.MODE_GCM, nonce=nonce)\n    plaintext = aesCipher.decrypt(ciphertext)\n\n    return plaintext.decode()\n\n\ndef secure_api_call(key: str, method: str, params: dict):\n    \"\"\"\n    Execute secure `owner_api` call, payload is encrypted\n    :param key: 32bit secp256k1 ecdh encryption key computed via init_secure_api() func\n    :param method: api call method name\n    :param params: dict with api_call params\n    :return: dict with decrypted data\n    \"\"\"\n\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': method,\n        'params': params\n        }\n\n    # Encrypt payload with computed encryption key\n    encrypted_payload = encrypt(key, payload)\n\n    # Execute owner_api call with encrypted payload\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': 'encrypted_request_v3',\n        'params': encrypted_payload\n        }\n\n    encrypted_response = requests.post(\n        url=api_url,\n        json=payload,\n        auth=basic_auth\n        )\n\n    encrypted_response = parse_api_response(encrypted_response)\n\n    # Decrypt response and return dict with response data\n    nonce = bytes.fromhex(encrypted_response['nonce'])\n    encrypted_response = encrypted_response['body_enc']\n\n    decrypted_response = decrypt(\n        encryption_key,\n        encrypted_response,\n        nonce\n        )\n\n    return parse_api_response(json.loads(decrypted_response))\n\n\ndef open_wallet(password, key) -&gt; str:\n    \"\"\"\n    This is the second step in epic-wallet API workflow\n    Make an `open_wallet` API call, get authentication token and use it\n    in all calls for this wallet instance during this session.\n    \"\"\"\n\n    open_wallet_params = {\n        'name': 'default',\n        'password': password,\n        }\n\n    response = secure_api_call(\n        key=key,\n        method='open_wallet',\n        params=open_wallet_params\n        )\n\n    print(f\"\u2705  Secure token successfully generated\")\n    return response\n\n\n\"\"\"\nIn the example below we will use defined functions to generate secure token \nand retrieve wallet balance. Different API endpoint will use different params\nbut the workflow will be the same.\n\"\"\"\n\n# Call `init_secure_api` API endpoint to initialize Secure API workflow,\n# and generate encryption_key used to encrypt data payload\nencryption_key = init_secure_api()\n\n# Call `open_wallet` API endpoint to generate authentication token\ntoken = open_wallet(\n    password=wallet_password,\n    key=encryption_key\n    )\n\n# Prepare `retrieve_summary_info` API call params\ninfo_params = {\n    \"token\": token,\n    \"refresh_from_node\": True,\n    \"minimum_confirmations\": 3\n    }\n\n# Call `retrieve_summary_info` endpoint and print the result\nbalance = secure_api_call(\n    key=encryption_key,\n    method='retrieve_summary_info',\n    params=info_params)\n\nprint(balance)\n</code></pre> <p>NodeJS and NPM package manager is required</p> <pre><code>npm i jayson\n</code></pre> Retrieve wallet balance and transactions code example secure_api_example.js<pre><code>/* Sample Code for connecting to the V3 Secure API via Node\n *\n * With thanks to xiaojay of Niffler Wallet:\n * https://github.com/epicfans/Niffler/blob/gw3/src/shared/walletv3.js\n *\n */\n\nlet password = \"\"; // your wallet pass\nlet port = \"3420\"; // :13420 = default floonet port, :3420 default mainnet port\nlet api_secret = \"\"; //`cat ~/.epic/main/.owner_api_secret` or `cat ~/.epic/floo/.owner_api_secret`\n\nconst jayson = require('jayson/promise');\nconst crypto = require('crypto');\n\n\n\nconst client = jayson.client.http('http://epic:'+ api_secret +'@127.0.0.1:' + port + '/v3/owner');\n\n// Demo implementation of using `aes-256-gcm` with node.js's `crypto` lib.\nconst aes256gcm = (shared_secret) =&gt; {\n    const ALGO = 'aes-256-gcm';\n\n    // encrypt returns base64-encoded ciphertext\n    const encrypt = (str, nonce) =&gt; {\n        let key = Buffer.from(shared_secret, 'hex')\n        const cipher = crypto.createCipheriv(ALGO, key, nonce)\n        const enc = Buffer.concat([cipher.update(str, 'utf8'), cipher.final()])\n        const tag = cipher.getAuthTag()\n        return Buffer.concat([enc, tag]).toString('base64')\n    };\n\n    // decrypt decodes base64-encoded ciphertext into a utf8-encoded string\n    const decrypt = (enc, nonce) =&gt; {\n        //key,nonce is all buffer type; data is base64-encoded string\n        let key = Buffer.from(shared_secret, 'hex')\n        const data_ = Buffer.from(enc, 'base64')\n        const decipher = crypto.createDecipheriv(ALGO, key, nonce)\n        const len = data_.length\n        const tag = data_.slice(len-16, len)\n        const text = data_.slice(0, len-16)\n        decipher.setAuthTag(tag)\n        const dec = decipher.update(text, 'binary', 'utf8') + decipher.final('utf8');\n        return dec\n    };\n\n    return {\n        encrypt,\n        decrypt,\n    };\n};\n\nclass JSONRequestEncrypted {\n    constructor(id, method, params) {\n        this.jsonrpc = '2.0'\n        this.method = method\n        this.id = id\n        this.params = params\n    }\n\n    async send(key){\n        const aesCipher = aes256gcm(key);\n        const nonce = new Buffer.from(crypto.randomBytes(12));\n        let enc = aesCipher.encrypt(JSON.stringify(this), nonce);\n        console.log(\"Encrypted: \" + enc)\n        let params = {\n            'nonce': nonce.toString('hex'),\n            'body_enc': enc,\n        }\n        let response = await client.request('encrypted_request_v3', params);\n\n        if (response.err) {\n            throw response.err\n        }\n\n        const nonce2 = Buffer.from(response.result.Ok.nonce, 'hex');\n        const data = Buffer.from(response.result.Ok.body_enc, 'base64');\n\n        let dec = aesCipher.decrypt(data, nonce2)\n        return dec\n    }\n}\n\nasync function initSecure() {\n    let ecdh = crypto.createECDH('secp256k1')\n    ecdh.generateKeys()\n    let publicKey = ecdh.getPublicKey('hex', 'compressed')\n    const params = {\n        'ecdh_pubkey': publicKey\n    }\n    let response = await client.request('init_secure_api', params);\n    if (response.err) {\n        throw response.err\n    }\n\n    return ecdh.computeSecret(response.result.Ok, 'hex', 'hex')\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nasync function main() {\n    let shared_key = await initSecure();\n\n    let response = await new JSONRequestEncrypted(1, 'open_wallet', {\n        \"name\": null,\n        \"password\": password,\n    }).send(shared_key);\n\n\n    let token = JSON.parse(response).result.Ok;\n\n    let iterations = 1;\n\n    for (i=0; i&lt;iterations*2; i+=2)  {\n        let info_response = await new JSONRequestEncrypted(i, 'retrieve_summary_info', {\n            \"token\": token,\n            \"refresh_from_node\": true,\n            \"minimum_confirmations\": 1,\n        }).send(shared_key)\n\n        console.log(\"Info Response: \", info_response);\n        await sleep(2000)\n\n        let txs_response = await new JSONRequestEncrypted(i+1, 'retrieve_txs', {\n            \"token\": token,\n            \"refresh_from_node\": true,\n            \"tx_id\": null,\n            \"tx_slate_id\": null,\n        }).send(shared_key)\n\n        console.log(\"Txs Response: \", txs_response);\n        await sleep(2000)\n    }\n}\n\n\nmain();\n</code></pre> Get transaction proof code example secure_api_example.js<pre><code>/* Sample Code for connecting to the V3 Secure API via Node\n *\n * With thanks to xiaojay of Niffler Wallet:\n * https://github.com/epicfans/Niffler/blob/gw3/src/shared/walletv3.js\n *\n */\n\nlet password = \"\"; // your wallet pass\nlet port = \"3420\"; // :13420 = default floonet port, :3420 default mainnet port\nlet api_secret = \"\"; //`cat ~/.epic/main/.owner_api_secret` or `cat ~/.epic/floo/.owner_api_secret`\n\nconst jayson = require('jayson/promise');\nconst crypto = require('crypto');\n\n\n\nconst client = jayson.client.http('http://epic:'+ api_secret +'@127.0.0.1:' + port + '/v3/owner');\n\n// Demo implementation of using `aes-256-gcm` with node.js's `crypto` lib.\nconst aes256gcm = (shared_secret) =&gt; {\n    const ALGO = 'aes-256-gcm';\n\n    // encrypt returns base64-encoded ciphertext\n    const encrypt = (str, nonce) =&gt; {\n        let key = Buffer.from(shared_secret, 'hex')\n        const cipher = crypto.createCipheriv(ALGO, key, nonce)\n        const enc = Buffer.concat([cipher.update(str, 'utf8'), cipher.final()])\n        const tag = cipher.getAuthTag()\n        return Buffer.concat([enc, tag]).toString('base64')\n    };\n\n    // decrypt decodes base64-encoded ciphertext into a utf8-encoded string\n    const decrypt = (enc, nonce) =&gt; {\n        //key,nonce is all buffer type; data is base64-encoded string\n        let key = Buffer.from(shared_secret, 'hex')\n        const data_ = Buffer.from(enc, 'base64')\n        const decipher = crypto.createDecipheriv(ALGO, key, nonce)\n        const len = data_.length\n        const tag = data_.slice(len-16, len)\n        const text = data_.slice(0, len-16)\n        decipher.setAuthTag(tag)\n        const dec = decipher.update(text, 'binary', 'utf8') + decipher.final('utf8');\n        return dec\n    };\n\n    return {\n        encrypt,\n        decrypt,\n    };\n};\n\nclass JSONRequestEncrypted {\n    constructor(id, method, params) {\n        this.jsonrpc = '2.0'\n        this.method = method\n        this.id = id\n        this.params = params\n    }\n\n    async send(key){\n        const aesCipher = aes256gcm(key);\n        const nonce = new Buffer.from(crypto.randomBytes(12));\n        let enc = aesCipher.encrypt(JSON.stringify(this), nonce);\n        console.log(\"Encrypted: \" + enc)\n        let params = {\n            'nonce': nonce.toString('hex'),\n            'body_enc': enc,\n        }\n        let response = await client.request('encrypted_request_v3', params);\n\n        if (response.err) {\n            throw response.err\n        }\n\n        const nonce2 = Buffer.from(response.result.Ok.nonce, 'hex');\n        const data = Buffer.from(response.result.Ok.body_enc, 'base64');\n\n        let dec = aesCipher.decrypt(data, nonce2)\n        return dec\n    }\n}\n\nasync function initSecure() {\n    let ecdh = crypto.createECDH('secp256k1')\n    ecdh.generateKeys()\n    let publicKey = ecdh.getPublicKey('hex', 'compressed')\n    const params = {\n        'ecdh_pubkey': publicKey\n    }\n    let response = await client.request('init_secure_api', params);\n    if (response.err) {\n        throw response.err\n    }\n\n    return ecdh.computeSecret(response.result.Ok, 'hex', 'hex')\n}\n\nasync function main() {\n    let shared_key = await initSecure();\n\n    let response = await new JSONRequestEncrypted(1, 'open_wallet', {\n        \"name\": null,\n        \"password\": password,\n    }).send(shared_key);\n\n  console.log(response);\n    let token = JSON.parse(response).result.Ok;\n    /* get data from a export with command ./epic-wallet export_proof -i 17 testproof.txt */\n    let info_response = await new JSONRequestEncrypted(2, 'verify_payment_proof', {\n            \"token\": token,\n            \"proof\": {\n              \"amount\": \"232400000\",\n              \"excess\": \"08a551b3b06fcac53fc719c08640a216839133438d313e7c7e5c0ce0b31c3056e1\",\n              \"recipient_address\": \"qjrfkoysp4mulzbxiyhsvik5t4yb4636hpuoxqveylg5dovm4nosx7id\",//Receiver Address (Onion V3)\n              \"recipient_sig\": \"ab6c4f6434a1f66d7106aa830d4784de428105754465ba864199690764c910d4ff425aefda04c16934311a9414eb9baf3da18b77b55e9c25ee15fdf998419a0d\",\n              \"sender_address\": \"v7yeumerch3svoeqomn2likjrucfhg2m3moucb5bcohxktmcbzmw2bqd\",//Sender Address (Onion V3)\n              \"sender_sig\": \"aa29e81034ae8a0764e3a20e3c3cdee37b5d86ba42e3cbc391c00517c5529c8f23b8cd1369582b72852a76815b1131b7b217ae06b4e35d40f13c451a1cd74400\"\n            }\n    }).send(shared_key)\n\n    console.log(\"Info Response: \", info_response);\n\n}\n\n\nmain();\n</code></pre>"},{"location":"wallet/owner/#methods","title":"Methods","text":""},{"location":"wallet/owner/#accounts","title":"<code>accounts</code>","text":"<p>Returns a list of accounts stored in the wallet (i.e. mappings between user-specified labels and BIP32 derivation paths).</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"accounts\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\"\n},\n\"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": [\n                {\n                    \"label\": \"default\",\n                    \"path\": \"0200000000000000000000000000000000\"\n                }\n            ]\n        },\n        \"id\": 1\n    }\n</code></pre>"},{"location":"wallet/owner/#create_account_path","title":"<code>create_account_path</code>","text":"<p>Creates a new \u2018account\u2019, which is a mapping of a user-specified label to a BIP32 path</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"create_account_path\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"label\": \"account1\"\n},\n\"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": \"0200000001000000000000000000000000\"\n        },\n        \"id\": 1\n    }\n</code></pre>"},{"location":"wallet/owner/#set_active_account","title":"<code>set_active_account</code>","text":"<p>Sets the wallet\u2019s currently active account. This sets the BIP32 parent path used for most key-derivation operations.</p> RequestResponse <pre><code>    {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"set_active_account\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"label\": \"default\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        },\n        \"id\": 1\n    }\n</code></pre>"},{"location":"wallet/owner/#retrieve_outputs","title":"<code>retrieve_outputs</code>","text":"<p>Returns a list of outputs from the active account in the wallet.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"retrieve_outputs\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"include_spent\": false,\n        \"refresh_from_node\": true,\n        \"tx_id\": null\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": [\n                true,\n                [\n                    {\n                        \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                        \"output\": {\n                            \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                            \"height\": \"1\",\n                            \"is_coinbase\": true,\n                            \"key_id\": \"0300000000000000000000000000000000\",\n                            \"lock_height\": \"4\",\n                            \"mmr_index\": null,\n                            \"n_child\": 0,\n                            \"root_key_id\": \"0200000000000000000000000000000000\",\n                            \"status\": \"Unspent\",\n                            \"tx_log_entry\": 0,\n                            \"value\": \"1457920000\"\n                        }\n                    },\n                    {\n                        \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\",\n                        \"output\": {\n                            \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\",\n                            \"height\": \"2\",\n                            \"is_coinbase\": true,\n                            \"key_id\": \"0300000000000000000000000100000000\",\n                            \"lock_height\": \"5\",\n                            \"mmr_index\": null,\n                            \"n_child\": 1,\n                            \"root_key_id\": \"0200000000000000000000000000000000\",\n                            \"status\": \"Unspent\",\n                            \"tx_log_entry\": 1,\n                            \"value\": \"1457920000\"\n                        }\n                    }\n                ]\n            ]\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#retrieve_txs","title":"<code>retrieve_txs</code>","text":"<p>Returns a list of Transaction Log Entries from the active account in the wallet.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"retrieve_txs\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"refresh_from_node\": true,\n        \"tx_id\": null,\n        \"tx_slate_id\": null\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"Ok\": [\n        true,\n        [\n            {\n            \"amount_credited\": \"1457920000\",\n            \"amount_debited\": \"0\",\n            \"confirmation_ts\": \"2019-01-15T16:01:26Z\",\n            \"confirmed\": true,\n            \"creation_ts\": \"2019-01-15T16:01:26Z\",\n            \"fee\": null,\n            \"id\": 0,\n            \"kernel_excess\": \"09a89280fa8d888358ab730383f00a3d990b7f2c6b17fc960501f30aac8e014478\",\n            \"kernel_lookup_min_height\": 1,\n            \"messages\": null,\n            \"num_inputs\": 0,\n            \"num_outputs\": 1,\n            \"parent_key_id\": \"0200000000000000000000000000000000\",\n            \"stored_tx\": null,\n            \"ttl_cutoff_height\": null,\n            \"tx_slate_id\": null,\n            \"payment_proof\": null,\n            \"tx_type\": \"ConfirmedCoinbase\"\n            },\n            {\n            \"amount_credited\": \"1457920000\",\n            \"amount_debited\": \"0\",\n            \"confirmation_ts\": \"2019-01-15T16:01:26Z\",\n            \"confirmed\": true,\n            \"creation_ts\": \"2019-01-15T16:01:26Z\",\n            \"fee\": null,\n            \"id\": 1,\n            \"kernel_excess\": \"08bae42ff7d5fa5aca058fd0889dd1e40df16bf3ee2eea6e5db720c0a6d638a7f8\",\n            \"kernel_lookup_min_height\": 2,\n            \"messages\": null,\n            \"num_inputs\": 0,\n            \"num_outputs\": 1,\n            \"parent_key_id\": \"0200000000000000000000000000000000\",\n            \"stored_tx\": null,\n            \"ttl_cutoff_height\": null,\n            \"payment_proof\": null,\n            \"tx_slate_id\": null,\n            \"tx_type\": \"ConfirmedCoinbase\"\n            }\n        ]\n        ]\n    }\n    }\n</code></pre>"},{"location":"wallet/owner/#retrieve_summary_info","title":"<code>retrieve_summary_info</code>","text":"<p>Returns summary information from the active account in the wallet.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"retrieve_summary_info\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"refresh_from_node\": true,\n        \"minimum_confirmations\": 3\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n    \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": [\n                true,\n                {\n                    \"amount_awaiting_confirmation\": \"0\",\n                    \"amount_awaiting_finalization\": \"0\",\n                    \"amount_currently_spendable\": \"1457920000\",\n                    \"amount_immature\": \"4373760000\",\n                    \"amount_locked\": \"0\",\n                    \"last_confirmed_height\": \"4\",\n                    \"minimum_confirmations\": 3\",\n                    \"total\": \"5831680000\"\n                }\n\n            ]\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#init_send_tx","title":"<code>init_send_tx</code>","text":"<p>Initiates a new transaction as the sender, creating a new Slate object containing the sender\u2019s inputs, change outputs, and public signature data. This slate can then be sent to the recipient to continue the transaction via the Foreign API\u2019s receive_tx method.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"init_send_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"args\": {\n            \"src_acct_name\": null,\n            \"amount\": \"60000000\",\n            \"minimum_confirmations\": 3,\n            \"max_outputs\": 500,\n            \"num_change_outputs\": 1,\n            \"selection_strategy_is_use_all\": true,\n            \"message\": \"my message\",\n            \"target_slate_version\": null,\n            \"payment_proof_recipient_address\": \"d03c09e9c19bb74aa9ea44e0fe5ae237a9bf40bddf0941064a80913a4459c8bb\",\n            \"ttl_blocks\": null,\n            \"send_args\": {\n                \"method\": \"http\",\n                \"dest\": \"http://127.0.0.1:3415\",\n                \"finalize\": true,\n                \"post_tx\": true,\n                \"fluff\": false\n              }\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"Ok\": {\n        \"amount\": \"60000000\",\n        \"fee\": \"800000\",\n        \"height\": \"4\",\n        \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n        \"lock_height\": \"0\",\n        \"num_participants\": 2,\n\n        \"participant_data\": [\n            {\n            \"id\": \"0\",\n            \"message\": \"my message\",\n            \"message_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bea065fb74c27c31d611427ac5fa1459d1db340d7475e2967f19e2fa95687d88c\",\n            \"part_sig\": null,\n            \"public_blind_excess\": \"039fbac4782fa1600aa704c38073eece85e3a085a90446ded19a9fec90e432b330\",\n            \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n            }\n        ],\n        \"payment_proof\": {\n            \"receiver_address\": \"d03c09e9c19bb74aa9ea44e0fe5ae237a9bf40bddf0941064a80913a4459c8bb\",\n            \"receiver_signature\": null,\n            \"sender_address\": \"32cdd63928854f8b2628b1dce4626ddcdf35d56cb7cfdf7d64cca5822b78d4d3\"\n            },\n            \"ttl_cutoff_height\": null,\n        \"tx\": {\n            \"body\": {\n            \"inputs\": [\n            {\n                \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                \"features\": \"Coinbase\"\n            }\n            ],\n            \"kernels\": [\n            {\n                \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                \"features\": \"Plain\",\n                \"fee\": \"800000\",\n                \"lock_height\": \"0\"\n            }\n            ],\n            \"outputs\": [\n            {\n                \"commit\": \"0832ca73c2049ee0c8f555c6297aa3658eb3f8ce711dfd63d6d5234cf3191c7756\",\n                \"features\": \"Plain\",\n                \"proof\": \"1393386202b2ba345e131efb1dfc3730c000ee6b6f3cb8d56e3d0680796b11940abeaed75e18458b544d28765b530a7ca2ed170b42c8bd5e07d4451b0cfa59c20fee43c9107091a328a9f745a255702ea17ac50f5e92b2daf51a7851e8ffde5e11a6837b5b6058aee5ab1e68bcd756646f36b38c6262aa20ff9c194d2e3e155b608216186fee66ef8ca269d31a015c63cca3cf5f0d40e4cccd13d390ed1aeed7a7c7d0709e9b509844462098d97e983ba6963ee3a68955d5317ecec47caeb8911784598be71d319ba8441c36388bf4a10ba2538f4f54f648b22a8f1e1f713dec36376936100b0fc5fb5ad4f51811ec96a76b564c3ee08305f5a2ad79a80152a03eb86d4dcd854a23818621d80771ceb169e45a692b45db77667beecd545e08b8afe8f8a3d049ae18e1cee5522769cd6b0131e036ee81d70df4cd679959fd82684bf9e1f4784325ef271eec2fb73ef4a9569fd76f7b1e55d8e2e87a5daa5ad5357cb401af13c2c695afc4b6a8a2004da1b0f5ebe7cb70cb2e15f0f3ca41eaca969abcb452f7a15fe9d004e66ff646e423366713632f1dedcb33bac1abbc47f1cf2b280f04cf85a7291bb4ecb2c1c252d65e933f5819ba4984b1018ec11ae36d2445af56900b9b6e746f84ddd6b06baab9d7c8f82f0b0bc7a61ade6eabe762ac0d3afe4b2102518361a9e54a4d9d51e4a25ccf1d40c36f6444d2271d03d91eb0f1f6895345c8758a7375926cf0ab75212ef7b4a0efa59a31decd995be2933e3da51efec22365521b8942f997789f9618cbbb422607c2414fc64bc558eca27df5fe7156954b98335a5cc63e6bfe7e076149c93e2314dd626f48bf6721b506b81962b6ca81bff28c7e216f49fcbf989045f97452f3b4ccdcaa7ca5a4ce0bd3f5e16440c6c0b73a42bfa6cfe8e31265b73b81b81c2d54e4f7aefb16ebfa1273adbfd57c08a6\"\n            }\n            ]\n            },\n            \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\"\n        },\n        \"version_info\": {\n                \"orig_version\": 3,\n                \"version\": 3,\n                \"block_header_version\": 6\n        }\n        }\n    }\n    }\n</code></pre>"},{"location":"wallet/owner/#issue_invoice_tx","title":"<code>issue_invoice_tx</code>","text":"<p>Issues a new invoice transaction slate, essentially a request for payment.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"issue_invoice_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"args\": {\n            \"amount\": \"60000000\",\n            \"message\": \"EPIC Invoice for...\",\n            \"dest_acct_name\": null,\n            \"target_slate_version\": null\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"amount\": \"60000000\",\n                \"fee\": \"0\",\n                \"height\": \"4\",\n                \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n                \"lock_height\": \"0\",\n                \"ttl_cutoff_height\": null,\n                \"num_participants\": 2,\n                \"payment_proof\": null,\n                \"participant_data\": [\n                    {\n                        \"id\": \"1\",\n                        \"message\": \"EPIC Invoice for...\",\n                        \"message_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bb06e3894e0db51e6015d2181f101d06722094128dbc316f7186b57edd68731cb\",\n                        \"part_sig\": null,\n                        \"public_blind_excess\": \"035ca9d2d82e0e31bc2add7ef9200066b257d9f72cb16c0e57455277b90e2b3503\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    }\n                ],\n                \"tx\": {\n                    \"body\": {\n                        \"inputs\": [],\n                        \"kernels\": [\n                            {\n                                \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                                \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                                \"features\": \"Plain\",\n                                \"fee\": \"0\",\n                                \"lock_height\": \"0\"\n                            }\n                        ],\n                        \"outputs\": [\n                            {\n                                \"commit\": \"083fe68fb96a0941f70e9412b4483621326abee9eccf10e7a7efef2a9b4e97df25\",\n                                \"features\": \"Plain\",\n                                \"proof\": \"2df8ba188baa701a7c07e23de108e8318797ba029319b4557db3c1c8af917f6361d9871520e33423131d5771b06566aba2469f1e9fcc8eda8203a5c241759e45041af26939c57946372bf330d09670eb30a08cae27b3015dac2efb518fbe2325487d8417f4014cb854aec9e4e1770d2f5d7a6e32e2bc904245505ebd952eda10b5c401f315a8cb969da4cc2dc1e656f33d870ca07ffbc45f58cae9f28b836d4bf3c1786b805ba9d8789cc211998981a8b4115aa7383ddbd10e656fc0a590c3e2cf8dd07e414217d9a1d1af32bcbd933448d0a89033cb93ba2eb0d3b973136d61ee7f109d0476ed3475b7328eff5e9d3362b5db4621682a443a382f7ef09304f9bff422885d23f62f9d7d1a9bbf888e5ba5678e347182770cbbf41cfb3002269607f085881ce0f0df01f34f34433ef04dd6008f9a0c13e47e6e386d62151386dfd20bdf812ae2fb580edc38f38bfc9cc543d1023889ee646d4e75a7382caa3bb00b970062ffdc1fc643ce56d25e2e73b556162c8441d5a667b36b840cc244f69395b46900dd1edc562ed741c239804588e94c071b621766b55f738802c376012fa577e0d82bdf7bf2f229a867d91ed177bacde44faadb6901066f84e21a5fb0b73ed7ef9ef4a1e2c65e6a28a0ae834a99ed1694889d885fc8e90c8e7507078603a9705cc3c57b8b0125ad385cb5ec564f9ca69b530307d91ef2c6bb49a39e30d9e68f2f67d99915d87d1a7776f4c0b61913ea661ebe320b8e99919c69d9dbdc527e787d46e772da9ab9f9cc60e43b41fb0981b6b882ed7a535451158c711210fe25e68d12719192c3d332aea9e047a0f7a292b8e6f13fd76ed47afbadf070392cc3f4a4ebb8ec9853587e30ad9b9794717c87bf962e2ab99ec543f5a24efda0cfc2bf51f23c8132aee6058189925febe1d9d3a145f580ef9835db3c1f3b6e97bd36331e\"\n                            }\n                        ]\n                    },\n                    \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\"\n                },\n                \"version_info\": {\n                    \"orig_version\": 3,\n                    \"version\": 3,\n                    \"block_header_version\": 6\n                }\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#process_invoice_tx","title":"<code>process_invoice_tx</code>","text":"<p>Processes an invoice transaction created by another party, essentially a request for payment.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"process_invoice_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"slate\": {\n            \"amount\": \"60000000\",\n            \"fee\": \"0\",\n            \"height\": \"4\",\n            \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"lock_height\": \"0\",\n            \"ttl_cutoff_height\": null,\n            \"num_participants\": 2,\n            \"payment_proof\": null,\n            \"participant_data\": [\n                {\n                    \"id\": \"1\",\n                    \"message\": \"EPIC Invoice for...\",\n                    \"message_sig\": \"1b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078fd2599ab38942986602e943f684a85992893a6d34367dc7cc2b403a5dcfcdbcd9\",\n                    \"part_sig\": null,\n                    \"public_blind_excess\": \"028e95921cc0d5be5922362265d352c9bdabe51a9e1502a3f0d4a10387f1893f40\",\n                    \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                }\n            ],\n            \"tx\": {\n                \"body\": {\n                    \"inputs\": [],\n                    \"kernels\": [\n                        {\n                            \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"features\": \"Plain\",\n                            \"fee\": \"0\",\n                            \"lock_height\": \"0\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"commit\": \"09cf47204446c326e361a1a92f34b174deff732daaedb80d7339fbe3db5ca2f6ba\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"8f511614315626b5f39224482351d766f5a8ef136262befc050d839be8479b0a13470cd88f4436346d213d83847a4055c6e0ac63681556470349a1aab47034a3015eb64d8163955998e2dd4165dd24386b1e279974b05deb5d46ba2bc321f7000c0784f8f10690605ffe717119d045e02b141ed12d8fc6d20930483a8af889ef533495eb442fcff36d98ebc104f13fc645c28431b3296e4a11f7c991ff97f9abbc2f8886762d7f29fdacb31d52c6850e6ccf5386117d89e8ea4ca3071c56c218dd5d3bcd65f6c06ed9f51f848507ca1d594f41796d1cf99f68a5c3f0c5dd9873602284cff31269b102fcc6c68607565faaf0adb04ed4ff3ea5d41f3b5235ac6cb90e4046c808c9c48c27172c891b20085c56a99913ef47fd8b3dc4920cef50534b9319a7cefe0df10a0206a634ac837e11da92df83ff58b1a14de81313400988aa48b946fcbe1b81f0e79e13f7c6c639b1c10983b424bda08d0ce593a20f1f47e0aa01473e7144f116b76d9ebc60599053d8f1542d60747793d99064e51fce8f8866390325d48d6e8e3bbdbc1822c864303451525c6cb4c6902f105a70134186fb32110d8192fc2528a9483fc8a4001f4bdeab1dd7b3d1ccb9ae2e746a78013ef74043f0b2436f0ca49627af1768b7c791c669bd331fd18c16ef88ad0a29861db70f2f76f3e74fde5accb91b73573e31333333223693d6fbc786e740c085e4fc6e7bde0a3f54e9703f816c54f012d3b1f41ec4d253d9337af61e7f1f1383bd929421ac346e3d2771dfee0b60503b33938e7c83eb37af3b6bf66041a3519a2b4cb557b34e3b9afcf95524f9a011425a34d32e7b6e9f255291094930acae26e8f7a1e4e6bc405d0f88e919f354f3ba85356a34f1aba5f7da1fad88e2692f4129cc1fb80a2122b2d996c6ccf7f08d8248e511d92af9ce49039de728848a2dc74101f4e94a\"\n                        }\n                    ]\n                },\n                \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\"\n            },\n            \"version_info\": {\n                \"orig_version\": 3,\n                \"version\": 3,\n                \"block_header_version\": 6\n            }\n        },\n        \"args\": {\n            \"src_acct_name\": null,\n            \"amount\": \"0\",\n            \"minimum_confirmations\": 3,\n            \"max_outputs\": 500,\n            \"num_change_outputs\": 1,\n            \"selection_strategy_is_use_all\": true,\n            \"message\": \"Invoice paid.\",\n            \"target_slate_version\": null,\n            \"payment_proof_recipient_address\": null,\n            \"ttl_blocks\": null,\n            \"send_args\": null\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"amount\": \"60000000\",\n                \"fee\": \"800000\",\n                \"height\": \"4\",\n                \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n                \"lock_height\": \"0\",\n                \"ttl_cutoff_height\": null,\n                \"num_participants\": 2,\n                \"payment_proof\": null,\n                \"participant_data\": [\n                    {\n                        \"id\": \"1\",\n                        \"message\": \"EPIC Invoice for...\",\n                        \"message_sig\": \"1b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078fd2599ab38942986602e943f684a85992893a6d34367dc7cc2b403a5dcfcdbcd9\",\n                        \"part_sig\": null,\n                        \"public_blind_excess\": \"028e95921cc0d5be5922362265d352c9bdabe51a9e1502a3f0d4a10387f1893f40\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    },\n                    {\n                        \"id\": \"0\",\n                        \"message\": \"Invoice paid.\",\n                        \"message_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bec8c1cac6cb5770a3c62c9bb95063581cc08bfccd72dac72be8ec4ba5374a9f3\",\n                        \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841bcec20532cbe7ce0a3152b61566785684fea3534b7f834f02f733fa524123ee54\",\n                        \"public_blind_excess\": \"02802124f21ba02769a3f05ecfe9662e8783fa0bd1a7b7d63cf3aea0ebc0d7af3a\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    }\n                ],\n                \"tx\": {\n                    \"body\": {\n                        \"inputs\": [\n                            {\n                                \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                                \"features\": \"Coinbase\"\n                            }\n                        ],\n                        \"kernels\": [\n                            {\n                                \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                                \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                                \"features\": \"Plain\",\n                                \"fee\": \"800000\",\n                                \"lock_height\": \"0\"\n                            }\n                        ],\n                        \"outputs\": [\n                            {\n                                \"commit\": \"0832ca73c2049ee0c8f555c6297aa3658eb3f8ce711dfd63d6d5234cf3191c7756\",\n                                \"features\": \"Plain\",\n                                \"proof\": \"1393386202b2ba345e131efb1dfc3730c000ee6b6f3cb8d56e3d0680796b11940abeaed75e18458b544d28765b530a7ca2ed170b42c8bd5e07d4451b0cfa59c20fee43c9107091a328a9f745a255702ea17ac50f5e92b2daf51a7851e8ffde5e11a6837b5b6058aee5ab1e68bcd756646f36b38c6262aa20ff9c194d2e3e155b608216186fee66ef8ca269d31a015c63cca3cf5f0d40e4cccd13d390ed1aeed7a7c7d0709e9b509844462098d97e983ba6963ee3a68955d5317ecec47caeb8911784598be71d319ba8441c36388bf4a10ba2538f4f54f648b22a8f1e1f713dec36376936100b0fc5fb5ad4f51811ec96a76b564c3ee08305f5a2ad79a80152a03eb86d4dcd854a23818621d80771ceb169e45a692b45db77667beecd545e08b8afe8f8a3d049ae18e1cee5522769cd6b0131e036ee81d70df4cd679959fd82684bf9e1f4784325ef271eec2fb73ef4a9569fd76f7b1e55d8e2e87a5daa5ad5357cb401af13c2c695afc4b6a8a2004da1b0f5ebe7cb70cb2e15f0f3ca41eaca969abcb452f7a15fe9d004e66ff646e423366713632f1dedcb33bac1abbc47f1cf2b280f04cf85a7291bb4ecb2c1c252d65e933f5819ba4984b1018ec11ae36d2445af56900b9b6e746f84ddd6b06baab9d7c8f82f0b0bc7a61ade6eabe762ac0d3afe4b2102518361a9e54a4d9d51e4a25ccf1d40c36f6444d2271d03d91eb0f1f6895345c8758a7375926cf0ab75212ef7b4a0efa59a31decd995be2933e3da51efec22365521b8942f997789f9618cbbb422607c2414fc64bc558eca27df5fe7156954b98335a5cc63e6bfe7e076149c93e2314dd626f48bf6721b506b81962b6ca81bff28c7e216f49fcbf989045f97452f3b4ccdcaa7ca5a4ce0bd3f5e16440c6c0b73a42bfa6cfe8e31265b73b81b81c2d54e4f7aefb16ebfa1273adbfd57c08a6\"\n                            },\n                            {\n                                \"commit\": \"09cf47204446c326e361a1a92f34b174deff732daaedb80d7339fbe3db5ca2f6ba\",\n                                \"features\": \"Plain\",\n                                \"proof\": \"8f511614315626b5f39224482351d766f5a8ef136262befc050d839be8479b0a13470cd88f4436346d213d83847a4055c6e0ac63681556470349a1aab47034a3015eb64d8163955998e2dd4165dd24386b1e279974b05deb5d46ba2bc321f7000c0784f8f10690605ffe717119d045e02b141ed12d8fc6d20930483a8af889ef533495eb442fcff36d98ebc104f13fc645c28431b3296e4a11f7c991ff97f9abbc2f8886762d7f29fdacb31d52c6850e6ccf5386117d89e8ea4ca3071c56c218dd5d3bcd65f6c06ed9f51f848507ca1d594f41796d1cf99f68a5c3f0c5dd9873602284cff31269b102fcc6c68607565faaf0adb04ed4ff3ea5d41f3b5235ac6cb90e4046c808c9c48c27172c891b20085c56a99913ef47fd8b3dc4920cef50534b9319a7cefe0df10a0206a634ac837e11da92df83ff58b1a14de81313400988aa48b946fcbe1b81f0e79e13f7c6c639b1c10983b424bda08d0ce593a20f1f47e0aa01473e7144f116b76d9ebc60599053d8f1542d60747793d99064e51fce8f8866390325d48d6e8e3bbdbc1822c864303451525c6cb4c6902f105a70134186fb32110d8192fc2528a9483fc8a4001f4bdeab1dd7b3d1ccb9ae2e746a78013ef74043f0b2436f0ca49627af1768b7c791c669bd331fd18c16ef88ad0a29861db70f2f76f3e74fde5accb91b73573e31333333223693d6fbc786e740c085e4fc6e7bde0a3f54e9703f816c54f012d3b1f41ec4d253d9337af61e7f1f1383bd929421ac346e3d2771dfee0b60503b33938e7c83eb37af3b6bf66041a3519a2b4cb557b34e3b9afcf95524f9a011425a34d32e7b6e9f255291094930acae26e8f7a1e4e6bc405d0f88e919f354f3ba85356a34f1aba5f7da1fad88e2692f4129cc1fb80a2122b2d996c6ccf7f08d8248e511d92af9ce49039de728848a2dc74101f4e94a\"\n                            }\n                        ]\n                    },\n                    \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\"\n                },\n                \"version_info\": {\n                    \"orig_version\": 3,\n                    \"version\": 3,\n                    \"block_header_version\": 6\n                }\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#finalize_tx","title":"<code>finalize_tx</code>","text":"<p>Finalizes a transaction, after all parties have filled in both rounds of Slate generation.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"finalize_tx\",\n    \"id\": 1,\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"slate\": {\n            \"version_info\": {\n                \"version\": 3,\n                \"orig_version\": 3,\n                \"block_header_version\": 6\n            },\n            \"num_participants\": 2,\n            \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"payment_proof\": null,\n            \"tx\": {\n                \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\",\n                \"body\": {\n                    \"inputs\": [\n                        {\n                            \"features\": \"Coinbase\",\n                            \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\"\n                        },\n                        {\n                            \"features\": \"Coinbase\",\n                            \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"features\": \"Plain\",\n                            \"commit\": \"091454e23b4dbc71f546a41035d69f4c87d0f6efb5ceb119cc0d2eef80ba1928d7\",\n                            \"proof\": \"1a32a93de1dad833b4ae66d042784c435f60ac452f769d2d778772b3e2f2ca9fb16191636222b35866f273935f657ff37e1d38b877e12b7bcce98b1aa71f47a701b9ed8c648e2d6ab18ac0f8f7cf4a7c0aebb2c15681a684ec6f4d385e5db20e7bf9e6f3d8554ada1b82ac2fa9b77cb0a4c4c6b6c740d938fc0c6031a1cc0c0839701e6dab439c4dcdb32ca87d510b582efbabe8f8b783a330bc2c4451d1c2949a6ad901d40f7abc6103fadebba22016a955eaec4a0215398afbc7d22a4ad5bf3103446f4fe5440ded3bd9db607a69b8ca7c005c09e82fa367febc532b8d5c573e2bcc65a972bf76cea98943d9baaf209c84b4b70d56444c22cd334c7299000122de110f957b7af1f4d7f3816e053c94731113fd098bd2c0ccbe4c19152dd07a8d137b453e5a9d19cca576b494f448c5673babf9122297e4d2f4bd4a5a768c4da040527816d6ff91edb57da4053df167a44d2d5cf194bf30a47bcdd4ff541638b3db02e8ac882fb00767bf50fe5bf1b6077c8ad4f163ce75f21c99f708a9bcc0676034351e5ca68894550fcca5ee868d3d9d87e164612f09c79f2676a4acd8a8266e0f794c49318f8a1595ee1ff4e55e9cf5f3361cc473a032bd3bbd36a085f0c03f9b451b472d6a6a7ea9d858fd42a49c2e68c25bf8f18dd8e691168fe6f10602c6ec04cbc2601afa479294da84ecb79bc9b225d8758f682a2df52882c586ead779711258a9443e43365df9d326ca9052615ce33efac4bd0452a18d5b294b9fcf86e860786a692bfbd84a8bf3a751adedd978b969177cd8897871c43cd28df40a4beefcc86b10e6822ba18673f396294c799e756c8a5f03c92499127ec567e9f5b794442c63be7119ce741e4e056f502ca4809f7c76dd6dad754a1b31201ca2e2540e125637e1da5d16c61e3bea90ded06892076268893c167e0faed26172f304900e\"\n                        },\n                        {\n                            \"features\": \"Plain\",\n                            \"commit\": \"09414416856d650cd42abad97943f8ea32ff19e7d5d10201ff790d1ca941f578ed\",\n                            \"proof\": \"bdd12075099d53912b42073fd9c2841f2e21dff01656e7f909e1bbd30ada9a18b2f645128676ecddaecbffdcce43e9ff0e850acbce0f9a1e3fc525a7424d09040da752a8db0c8173f31ec4696bf007bf76801f63cedeadc66f4198836494de20a3d48150776c819d2e0a8ef376622d8a1cef78cd6928b3aa38883f51594fa50c3a772c539071c1c05ac4fce08768076618e2d5c7b3d46e28f1459f84f143a943957a4294011b093caf0e077020caf0668b379525df35f626641be6e81d7b711f1b32a98596c1829b9671d574f793e7f9f08c9118bdda60577053456caace5071cc14b10a67205e1c263bb53990fcf4fbcaea9cae652bd9e7ad6c1573ff96cd9271ecf0fabb895cea13b80d59bf7093fa03907911f526cb60df2bf0d3e2d4b81be4bbae55c466d6b221fa70cb145e6550e37856d080304e104fb23be97ae1499b4d3a2f7a4550545a03c20d374c081ac4f592477e23a20f418bcc59d9b02f665b898400a74350b88d793d383a0dc57618d58711e85e221383abb170c4a7f1640f30f2fc8258074f882b56453befecf3a61ed194a8ad98d1f6ab38c565b7cde60a7bb258066d9c5363c6bd618a9b3473b70a516ad4a67c2571e62fec4970eb4df902143aa130d333825f0a4cde9f93d8249c32f26bfadb26be8a5ceb6b5b6cdd076baa1cbde1973d83e64a1b35075dba69682e51cedfb82484276d56cf9e0601a272c0148ce070c6019ab2882405900164871f6b59d2c2a9f5d92674fe58cd9e036752eae8fb58e0fc29e3d59330ac92c1f263988f67add07a22770c381f29a602785244dbd46e4416ca56f25fe0cdd21714bcdf58c28329e22124247416b8de61297b6bd1630b93692a3a81c3107689f35cf4be5a8472b31552973ef2bcee5a298a858a768eefd0e31a3936790dd1c6e1379fffa0235c188b2c0f8b8b41abb84c32c608\"\n                        }\n                    ],\n                    \"kernels\": [\n                        {\n                            \"features\": \"Plain\",\n                            \"fee\": \"700000\",\n                            \"lock_height\": \"0\",\n                            \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                            \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n                        }\n                    ]\n                }\n            },\n            \"amount\": \"600000000\",\n            \"fee\": \"700000\",\n            \"height\": \"5\",\n            \"lock_height\": \"0\",\n            \"ttl_cutoff_height\": null,\n            \"participant_data\": [\n                {\n                    \"id\": \"0\",\n                    \"public_blind_excess\": \"028e1bbb43e6038efc42054778d0a1aa184b2cf4d51acb40a2a8dc049788d97bd2\",\n                    \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\",\n                    \"part_sig\": null,\n                    \"message\": null,\n                    \"message_sig\": null\n                },\n                {\n                    \"id\": \"1\",\n                    \"public_blind_excess\": \"03e14bacb4cfeda43edf6c1b0ffced9a358a119c7936bc68af724477eb91d9e4eb\",\n                    \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\",\n                    \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b129340313ed7db02f6fd9a16c23ae8d5801af4fdc2ea580e2dec26e3821d5c17\",\n                    \"message\": null,\n                    \"message_sig\": null\n                }\n            ]\n        }\n    }\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"id\": 1,\n        \"result\": {\n        \"Ok\": {\n                \"amount\": \"600000000\",\n                \"fee\": \"700000\",\n                \"height\": \"5\",\n                \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n                \"lock_height\": \"0\",\n                \"ttl_cutoff_height\": null,\n                \"num_participants\": 2,\n                \"payment_proof\": null,\n                \"participant_data\": [\n                    {\n                        \"id\": \"0\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b93f888685e13250c5cb6b830ff898264ce247c73d3ab47845c01bcc6455ecbe5\",\n                        \"public_blind_excess\": \"028e1bbb43e6038efc42054778d0a1aa184b2cf4d51acb40a2a8dc049788d97bd2\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    },\n                    {\n                        \"id\": \"1\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"part_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b129340313ed7db02f6fd9a16c23ae8d5801af4fdc2ea580e2dec26e3821d5c17\",\n                        \"public_blind_excess\": \"03e14bacb4cfeda43edf6c1b0ffced9a358a119c7936bc68af724477eb91d9e4eb\",\n                        \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n                    }\n                ],\n                \"tx\": {\n                    \"body\": {\n                    \"inputs\": [\n                        {\n                            \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\",\n                            \"features\": \"Coinbase\"\n                        },\n                        {\n                            \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                            \"features\": \"Coinbase\"\n                        }\n                    ],\n                    \"kernels\": [\n                        {\n                            \"excess\": \"08d09187cb93cf5d6b97b28e8ca529912bf35ec8773d3e9af9b3c174a270dc7f05\",\n                            \"excess_sig\": \"66074d25a751c4743342c90ad8ead9454daa00d9b9aed29bca321036d16c4b4da58bc9999cea000f52b45347c1c46a3a4f3f70719696a09289ede2a9c87b27fd\",\n                            \"features\": \"Plain\",\n                            \"fee\": \"700000\",\n                            \"lock_height\": \"0\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"commit\": \"091454e23b4dbc71f546a41035d69f4c87d0f6efb5ceb119cc0d2eef80ba1928d7\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"1a32a93de1dad833b4ae66d042784c435f60ac452f769d2d778772b3e2f2ca9fb16191636222b35866f273935f657ff37e1d38b877e12b7bcce98b1aa71f47a701b9ed8c648e2d6ab18ac0f8f7cf4a7c0aebb2c15681a684ec6f4d385e5db20e7bf9e6f3d8554ada1b82ac2fa9b77cb0a4c4c6b6c740d938fc0c6031a1cc0c0839701e6dab439c4dcdb32ca87d510b582efbabe8f8b783a330bc2c4451d1c2949a6ad901d40f7abc6103fadebba22016a955eaec4a0215398afbc7d22a4ad5bf3103446f4fe5440ded3bd9db607a69b8ca7c005c09e82fa367febc532b8d5c573e2bcc65a972bf76cea98943d9baaf209c84b4b70d56444c22cd334c7299000122de110f957b7af1f4d7f3816e053c94731113fd098bd2c0ccbe4c19152dd07a8d137b453e5a9d19cca576b494f448c5673babf9122297e4d2f4bd4a5a768c4da040527816d6ff91edb57da4053df167a44d2d5cf194bf30a47bcdd4ff541638b3db02e8ac882fb00767bf50fe5bf1b6077c8ad4f163ce75f21c99f708a9bcc0676034351e5ca68894550fcca5ee868d3d9d87e164612f09c79f2676a4acd8a8266e0f794c49318f8a1595ee1ff4e55e9cf5f3361cc473a032bd3bbd36a085f0c03f9b451b472d6a6a7ea9d858fd42a49c2e68c25bf8f18dd8e691168fe6f10602c6ec04cbc2601afa479294da84ecb79bc9b225d8758f682a2df52882c586ead779711258a9443e43365df9d326ca9052615ce33efac4bd0452a18d5b294b9fcf86e860786a692bfbd84a8bf3a751adedd978b969177cd8897871c43cd28df40a4beefcc86b10e6822ba18673f396294c799e756c8a5f03c92499127ec567e9f5b794442c63be7119ce741e4e056f502ca4809f7c76dd6dad754a1b31201ca2e2540e125637e1da5d16c61e3bea90ded06892076268893c167e0faed26172f304900e\"\n                        },\n                        {\n                            \"commit\": \"09414416856d650cd42abad97943f8ea32ff19e7d5d10201ff790d1ca941f578ed\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"bdd12075099d53912b42073fd9c2841f2e21dff01656e7f909e1bbd30ada9a18b2f645128676ecddaecbffdcce43e9ff0e850acbce0f9a1e3fc525a7424d09040da752a8db0c8173f31ec4696bf007bf76801f63cedeadc66f4198836494de20a3d48150776c819d2e0a8ef376622d8a1cef78cd6928b3aa38883f51594fa50c3a772c539071c1c05ac4fce08768076618e2d5c7b3d46e28f1459f84f143a943957a4294011b093caf0e077020caf0668b379525df35f626641be6e81d7b711f1b32a98596c1829b9671d574f793e7f9f08c9118bdda60577053456caace5071cc14b10a67205e1c263bb53990fcf4fbcaea9cae652bd9e7ad6c1573ff96cd9271ecf0fabb895cea13b80d59bf7093fa03907911f526cb60df2bf0d3e2d4b81be4bbae55c466d6b221fa70cb145e6550e37856d080304e104fb23be97ae1499b4d3a2f7a4550545a03c20d374c081ac4f592477e23a20f418bcc59d9b02f665b898400a74350b88d793d383a0dc57618d58711e85e221383abb170c4a7f1640f30f2fc8258074f882b56453befecf3a61ed194a8ad98d1f6ab38c565b7cde60a7bb258066d9c5363c6bd618a9b3473b70a516ad4a67c2571e62fec4970eb4df902143aa130d333825f0a4cde9f93d8249c32f26bfadb26be8a5ceb6b5b6cdd076baa1cbde1973d83e64a1b35075dba69682e51cedfb82484276d56cf9e0601a272c0148ce070c6019ab2882405900164871f6b59d2c2a9f5d92674fe58cd9e036752eae8fb58e0fc29e3d59330ac92c1f263988f67add07a22770c381f29a602785244dbd46e4416ca56f25fe0cdd21714bcdf58c28329e22124247416b8de61297b6bd1630b93692a3a81c3107689f35cf4be5a8472b31552973ef2bcee5a298a858a768eefd0e31a3936790dd1c6e1379fffa0235c188b2c0f8b8b41abb84c32c608\"\n                        }\n                    ]\n                    },\n                    \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\"\n                },\n                \"version_info\": {\n                    \"orig_version\": 3,\n                    \"version\": 3,\n                    \"block_header_version\": 6\n                }\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#post_tx","title":"<code>post_tx</code>","text":"<p>Posts a completed transaction to the listening node for validation and inclusion in a block for mining.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"post_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"tx\": {\n        \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"body\": {\n            \"inputs\": [\n                {\n                    \"features\": \"Coinbase\",\n                    \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\"\n                },\n                {\n                    \"features\": \"Coinbase\",\n                    \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\"\n                }\n            ],\n            \"kernels\": [\n                {\n                    \"features\": \"Plain\",\n                    \"fee\": \"700000\",\n                    \"lock_height\": \"0\",\n                    \"excess\": \"08d09187cb93cf5d6b97b28e8ca529912bf35ec8773d3e9af9b3c174a270dc7f05\",\n                    \"excess_sig\": \"66074d25a751c4743342c90ad8ead9454daa00d9b9aed29bca321036d16c4b4da58bc9999cea000f52b45347c1c46a3a4f3f70719696a09289ede2a9c87b27fd\"\n                }\n            ],\n            \"outputs\": [\n                {\n                    \"features\": \"Plain\",\n                    \"commit\": \"091454e23b4dbc71f546a41035d69f4c87d0f6efb5ceb119cc0d2eef80ba1928d7\",\n                    \"proof\": \"1a32a93de1dad833b4ae66d042784c435f60ac452f769d2d778772b3e2f2ca9fb16191636222b35866f273935f657ff37e1d38b877e12b7bcce98b1aa71f47a701b9ed8c648e2d6ab18ac0f8f7cf4a7c0aebb2c15681a684ec6f4d385e5db20e7bf9e6f3d8554ada1b82ac2fa9b77cb0a4c4c6b6c740d938fc0c6031a1cc0c0839701e6dab439c4dcdb32ca87d510b582efbabe8f8b783a330bc2c4451d1c2949a6ad901d40f7abc6103fadebba22016a955eaec4a0215398afbc7d22a4ad5bf3103446f4fe5440ded3bd9db607a69b8ca7c005c09e82fa367febc532b8d5c573e2bcc65a972bf76cea98943d9baaf209c84b4b70d56444c22cd334c7299000122de110f957b7af1f4d7f3816e053c94731113fd098bd2c0ccbe4c19152dd07a8d137b453e5a9d19cca576b494f448c5673babf9122297e4d2f4bd4a5a768c4da040527816d6ff91edb57da4053df167a44d2d5cf194bf30a47bcdd4ff541638b3db02e8ac882fb00767bf50fe5bf1b6077c8ad4f163ce75f21c99f708a9bcc0676034351e5ca68894550fcca5ee868d3d9d87e164612f09c79f2676a4acd8a8266e0f794c49318f8a1595ee1ff4e55e9cf5f3361cc473a032bd3bbd36a085f0c03f9b451b472d6a6a7ea9d858fd42a49c2e68c25bf8f18dd8e691168fe6f10602c6ec04cbc2601afa479294da84ecb79bc9b225d8758f682a2df52882c586ead779711258a9443e43365df9d326ca9052615ce33efac4bd0452a18d5b294b9fcf86e860786a692bfbd84a8bf3a751adedd978b969177cd8897871c43cd28df40a4beefcc86b10e6822ba18673f396294c799e756c8a5f03c92499127ec567e9f5b794442c63be7119ce741e4e056f502ca4809f7c76dd6dad754a1b31201ca2e2540e125637e1da5d16c61e3bea90ded06892076268893c167e0faed26172f304900e\"\n                },\n                {\n                    \"features\": \"Plain\",\n                    \"commit\": \"09414416856d650cd42abad97943f8ea32ff19e7d5d10201ff790d1ca941f578ed\",\n                    \"proof\": \"bdd12075099d53912b42073fd9c2841f2e21dff01656e7f909e1bbd30ada9a18b2f645128676ecddaecbffdcce43e9ff0e850acbce0f9a1e3fc525a7424d09040da752a8db0c8173f31ec4696bf007bf76801f63cedeadc66f4198836494de20a3d48150776c819d2e0a8ef376622d8a1cef78cd6928b3aa38883f51594fa50c3a772c539071c1c05ac4fce08768076618e2d5c7b3d46e28f1459f84f143a943957a4294011b093caf0e077020caf0668b379525df35f626641be6e81d7b711f1b32a98596c1829b9671d574f793e7f9f08c9118bdda60577053456caace5071cc14b10a67205e1c263bb53990fcf4fbcaea9cae652bd9e7ad6c1573ff96cd9271ecf0fabb895cea13b80d59bf7093fa03907911f526cb60df2bf0d3e2d4b81be4bbae55c466d6b221fa70cb145e6550e37856d080304e104fb23be97ae1499b4d3a2f7a4550545a03c20d374c081ac4f592477e23a20f418bcc59d9b02f665b898400a74350b88d793d383a0dc57618d58711e85e221383abb170c4a7f1640f30f2fc8258074f882b56453befecf3a61ed194a8ad98d1f6ab38c565b7cde60a7bb258066d9c5363c6bd618a9b3473b70a516ad4a67c2571e62fec4970eb4df902143aa130d333825f0a4cde9f93d8249c32f26bfadb26be8a5ceb6b5b6cdd076baa1cbde1973d83e64a1b35075dba69682e51cedfb82484276d56cf9e0601a272c0148ce070c6019ab2882405900164871f6b59d2c2a9f5d92674fe58cd9e036752eae8fb58e0fc29e3d59330ac92c1f263988f67add07a22770c381f29a602785244dbd46e4416ca56f25fe0cdd21714bcdf58c28329e22124247416b8de61297b6bd1630b93692a3a81c3107689f35cf4be5a8472b31552973ef2bcee5a298a858a768eefd0e31a3936790dd1c6e1379fffa0235c188b2c0f8b8b41abb84c32c608\"\n                }\n            ]\n\n        }\n    },\n    \"fluff\": false\n    }\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#cancel_tx","title":"<code>cancel_tx</code>","text":"<p>Cancels a transaction. This entails:</p> <p>Setting the transaction status to either TxSentCancelled or TxReceivedCancelled Deleting all change outputs or recipient outputs associated with the transaction Setting the status of all associated inputs from <code>Locked</code> to <code>Spent</code>, so they can be used in new transactions.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"cancel_tx\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"tx_id\": null,\n        \"tx_slate_id\": \"0436430c-2b02-624c-2032-570501212b00\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#get_stored_tx","title":"<code>get_stored_tx</code>","text":"<p>Retrieves the stored transaction associated with a TxLogEntry. Can be used even after the transaction has completed.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_stored_tx\",\n    \"id\": 1,\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"tx\": {\n            \"amount_credited\": \"59993000000\",\n            \"amount_debited\": \"120000000000\",\n            \"confirmation_ts\": \"2019-01-15T16:01:26Z\",\n            \"confirmed\": false,\n            \"creation_ts\": \"2019-01-15T16:01:26Z\",\n            \"fee\": \"7000000\",\n            \"id\": 5,\n            \"messages\": {\n                \"messages\": [\n                    {\n                        \"id\": \"0\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"public_key\": \"033ac2158fa0077f087de60c19d8e431753baa5b63b6e1477f05a2a6e7190d4592\"\n                    },\n                    {\n                        \"id\": \"1\",\n                        \"message\": null,\n                        \"message_sig\": null,\n                        \"public_key\": \"024f9bc78c984c78d6e916d3a00746aa30fa1172124c8dbc0cbddcb7b486719bc7\"\n                    }\n                ]\n            },\n            \"num_inputs\": 2,\n            \"num_outputs\": 1,\n            \"parent_key_id\": \"0200000000000000000000000000000000\",\n            \"stored_tx\": \"0436430c-2b02-624c-2032-570501212b00.epictx\",\n            \"tx_slate_id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"tx_type\": \"TxSent\",\n            \"kernel_excess\": null,\n            \"kernel_lookup_min_height\": null\n        }\n    }\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"id\": 1,\n        \"result\": {\n            \"Ok\": {\n                \"body\": {\n                \"inputs\": [\n                    {\n                        \"commit\": \"09d8836ffd38ffca42567ef965fdcf1f35b05aeb357664d70cd482438ca0ca0c9e\",\n                        \"features\": \"Coinbase\"\n                    },\n                    {\n                        \"commit\": \"089be87c488db1e7c783b19272a83b23bce56a5263163554b345c6f7ffedac517e\",\n                        \"features\": \"Coinbase\"\n                    }\n                ],\n                \"kernels\": [\n                    {\n                        \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                        \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                        \"features\": \"Plain\",\n                        \"fee\": \"700000\",\n                        \"lock_height\": \"0\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"commit\": \"091454e23b4dbc71f546a41035d69f4c87d0f6efb5ceb119cc0d2eef80ba1928d7\",\n                        \"features\": \"Plain\",\n                        \"proof\": \"1a32a93de1dad833b4ae66d042784c435f60ac452f769d2d778772b3e2f2ca9fb16191636222b35866f273935f657ff37e1d38b877e12b7bcce98b1aa71f47a701b9ed8c648e2d6ab18ac0f8f7cf4a7c0aebb2c15681a684ec6f4d385e5db20e7bf9e6f3d8554ada1b82ac2fa9b77cb0a4c4c6b6c740d938fc0c6031a1cc0c0839701e6dab439c4dcdb32ca87d510b582efbabe8f8b783a330bc2c4451d1c2949a6ad901d40f7abc6103fadebba22016a955eaec4a0215398afbc7d22a4ad5bf3103446f4fe5440ded3bd9db607a69b8ca7c005c09e82fa367febc532b8d5c573e2bcc65a972bf76cea98943d9baaf209c84b4b70d56444c22cd334c7299000122de110f957b7af1f4d7f3816e053c94731113fd098bd2c0ccbe4c19152dd07a8d137b453e5a9d19cca576b494f448c5673babf9122297e4d2f4bd4a5a768c4da040527816d6ff91edb57da4053df167a44d2d5cf194bf30a47bcdd4ff541638b3db02e8ac882fb00767bf50fe5bf1b6077c8ad4f163ce75f21c99f708a9bcc0676034351e5ca68894550fcca5ee868d3d9d87e164612f09c79f2676a4acd8a8266e0f794c49318f8a1595ee1ff4e55e9cf5f3361cc473a032bd3bbd36a085f0c03f9b451b472d6a6a7ea9d858fd42a49c2e68c25bf8f18dd8e691168fe6f10602c6ec04cbc2601afa479294da84ecb79bc9b225d8758f682a2df52882c586ead779711258a9443e43365df9d326ca9052615ce33efac4bd0452a18d5b294b9fcf86e860786a692bfbd84a8bf3a751adedd978b969177cd8897871c43cd28df40a4beefcc86b10e6822ba18673f396294c799e756c8a5f03c92499127ec567e9f5b794442c63be7119ce741e4e056f502ca4809f7c76dd6dad754a1b31201ca2e2540e125637e1da5d16c61e3bea90ded06892076268893c167e0faed26172f304900e\"\n                    },\n                    {\n                        \"commit\": \"09414416856d650cd42abad97943f8ea32ff19e7d5d10201ff790d1ca941f578ed\",\n                        \"features\": \"Plain\",\n                        \"proof\": \"bdd12075099d53912b42073fd9c2841f2e21dff01656e7f909e1bbd30ada9a18b2f645128676ecddaecbffdcce43e9ff0e850acbce0f9a1e3fc525a7424d09040da752a8db0c8173f31ec4696bf007bf76801f63cedeadc66f4198836494de20a3d48150776c819d2e0a8ef376622d8a1cef78cd6928b3aa38883f51594fa50c3a772c539071c1c05ac4fce08768076618e2d5c7b3d46e28f1459f84f143a943957a4294011b093caf0e077020caf0668b379525df35f626641be6e81d7b711f1b32a98596c1829b9671d574f793e7f9f08c9118bdda60577053456caace5071cc14b10a67205e1c263bb53990fcf4fbcaea9cae652bd9e7ad6c1573ff96cd9271ecf0fabb895cea13b80d59bf7093fa03907911f526cb60df2bf0d3e2d4b81be4bbae55c466d6b221fa70cb145e6550e37856d080304e104fb23be97ae1499b4d3a2f7a4550545a03c20d374c081ac4f592477e23a20f418bcc59d9b02f665b898400a74350b88d793d383a0dc57618d58711e85e221383abb170c4a7f1640f30f2fc8258074f882b56453befecf3a61ed194a8ad98d1f6ab38c565b7cde60a7bb258066d9c5363c6bd618a9b3473b70a516ad4a67c2571e62fec4970eb4df902143aa130d333825f0a4cde9f93d8249c32f26bfadb26be8a5ceb6b5b6cdd076baa1cbde1973d83e64a1b35075dba69682e51cedfb82484276d56cf9e0601a272c0148ce070c6019ab2882405900164871f6b59d2c2a9f5d92674fe58cd9e036752eae8fb58e0fc29e3d59330ac92c1f263988f67add07a22770c381f29a602785244dbd46e4416ca56f25fe0cdd21714bcdf58c28329e22124247416b8de61297b6bd1630b93692a3a81c3107689f35cf4be5a8472b31552973ef2bcee5a298a858a768eefd0e31a3936790dd1c6e1379fffa0235c188b2c0f8b8b41abb84c32c608\"\n                    }\n                ]\n                },\n                \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\"\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#verify_slate_messages","title":"<code>verify_slate_messages</code>","text":"<p>Verifies all messages in the slate match their public keys.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"verify_slate_messages\",\n    \"id\": 1,\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"slate\": {\n            \"amount\": \"1457920000\",\n            \"fee\": \"8000000\",\n            \"height\": \"4\",\n            \"id\": \"0436430c-2b02-624c-2032-570501212b00\",\n            \"lock_height\": \"4\",\n            \"ttl_cutoff_height\": null,\n            \"num_participants\": 2,\n            \"participant_data\": [\n            {\n                \"id\": \"0\",\n                \"message\": \"my message\",\n                \"message_sig\": \"8f07ddd5e9f5179cff19486034181ed76505baaad53e5d994064127b56c5841b1d4c1358be398f801eb90d933774b5218fa7e769b11c4c640402253353656f75\",\n                \"part_sig\": null,\n                \"public_blind_excess\": \"034b4df2f0558b73ea72a1ca5c4ab20217c66bbe0829056fca7abe76888e9349ee\",\n                \"public_nonce\": \"031b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f\"\n            }\n            ],\n            \"tx\": {\n                \"body\": {\n                    \"inputs\": [\n                    {\n                        \"commit\": \"08e1da9e6dc4d6e808a718b2f110a991dd775d65ce5ae408a4e1f002a4961aa9e7\",\n                        \"features\": \"Coinbase\"\n                    }\n                    ],\n                    \"kernels\": [\n                    {\n                        \"excess\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n                        \"excess_sig\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                        \"features\": \"HeightLocked\",\n                        \"fee\": \"8000000\",\n                        \"lock_height\": \"4\"\n                    }\n                    ],\n                    \"outputs\": [\n                    {\n                        \"commit\": \"094be57c91787fc2033d5d97fae099f1a6ddb37ea48370f1a138f09524c767fdd3\",\n                        \"features\": \"Plain\",\n                        \"proof\": \"2a42e9e902b70ce44e1fccb14de87ee0a97100bddf12c6bead1b9c5f4eb60300f29c13094fa12ffeee238fb4532b18f6b61cf51b23c1c7e1ad2e41560dc27edc0a2b9e647a0b3e4e806fced5b65e61d0f1f5197d3e2285c632d359e27b6b9206b2caffea4f67e0c7a2812e7a22c134b98cf89bd43d9f28b8bec25cce037a0ac5b1ae8f667e54e1250813a5263004486b4465ad4e641ab2b535736ea26535a11013564f08f483b7dab1c2bcc3ee38eadf2f7850eff7e3459a4bbabf9f0cf6c50d0c0a4120565cd4a2ce3e354c11721cd695760a24c70e0d5a0dfc3c5dcd51dfad6de2c237a682f36dc0b271f21bb3655e5333016aaa42c2efa1446e5f3c0a79ec417c4d30f77556951cb0f05dbfafb82d9f95951a9ea241fda2a6388f73ace036b98acce079f0e4feebccc96290a86dcc89118a901210b245f2d114cf94396e4dbb461e82aa26a0581389707957968c7cdc466213bb1cd417db207ef40c05842ab67a01a9b96eb1430ebc26e795bb491258d326d5174ad549401059e41782121e506744af8af9d8e493644a87d613600888541cbbe538c625883f3eb4aa3102c5cfcc25de8e97af8927619ce6a731b3b8462d51d993066b935b0648d2344ad72e4fd70f347fbd81041042e5ea31cc7b2e3156a920b80ecba487b950ca32ca95fae85b759c936246ecf441a9fdd95e8fee932d6782cdec686064018c857efc47fb4b2a122600d5fdd79af2486f44df7e629184e1c573bc0a9b3feb40b190ef2861a1ab45e2ac2201b9cd42e495deea247269820ed32389a2810ad6c0f9a296d2a2d9c54089fed50b7f5ecfcd33ab9954360e1d7f5598c32128cfcf2a1d8bf14616818da8a5343bfa88f0eedf392e9d4ab1ace1b60324129cd4852c2e27813a9cf71a6ae6229a4fcecc1a756b3e664c5f50af333082616815a3bec8fc0b75b8e4e767d719\"\n                    }\n                    ]\n                },\n                \"offset\": \"&lt;token_obtained_via_open_wallet&gt;\",\n                \"payment_proof\": null\n            },\n            \"version_info\": {\n                \"orig_version\": 3,\n                \"version\": 3,\n                \"block_header_version\": 6\n            }\n        }\n    }\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"id\": 1,\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#scan","title":"<code>scan</code>","text":"<p>Scans the entire UTXO set from the node, identify which outputs belong to the given wallet, update the wallet state to be consistent with what\u2019s currently in the UTXO set.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"scan\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"start_height\": 1,\n        \"delete_unconfirmed\": false\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#node_height","title":"<code>node_height</code>","text":"<p>Retrieves the last known height known by the wallet. This is determined as follows:</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"node_height\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"header_hash\": \"d4b3d3c40695afd8c7760f8fc423565f7d41310b7a4e1c4a4a7950a66f16240d\",\n                \"height\": \"5\",\n                \"updated_from_node\": true\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#init_secure_api","title":"<code>init_secure_api</code>","text":"<p>Initializes the secure JSON-RPC API. This function must be called and a shared key established before any other OwnerAPI JSON-RPC function can be called.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"init_secure_api\",\n    \"id\": \"1\",\n    \"params\": {\n    \"ecdh_pubkey\": \"03aac..........\"\n    }\n}\n</code></pre> <pre><code>    {\n        \"jsonrpc\": \"2.0\",\n        \"id\": \"1\",\n        \"result\": {\n            \"Ok\": \"02359..........\"\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#get_top_level_directory","title":"<code>get_top_level_directory</code>","text":"<p>Retrieve the top-level directory for the wallet. This directory should contain the epic-wallet.toml file and the wallet_data directory that contains the wallet seed + data files.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_top_level_directory\",\n    \"params\": {\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": \"/doctest/dir\"\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#set_top_level_directory","title":"<code>set_top_level_directory</code>","text":"<p>Set the top-level directory for the wallet.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"set_top_level_directory\",\n    \"params\": {\n        \"dir\": \"/home/wallet_user/my_wallet_dir\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#create_config","title":"<code>create_config</code>","text":"<p>Create na <code>epic-wallet.toml</code> configuration file in the top-level directory for the specified chain type.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"create_config\",\n    \"params\": {\n        \"chain_type\": \"Mainnet\",\n        \"wallet_config\": {\n            \"epicbox_domain\": \"epicbox.io\",\n            \"epicbox_address_index\": 0,\n            \"chain_type\": null,\n            \"api_listen_interface\": \"127.0.0.1\",\n            \"api_listen_port\": 3415,\n            \"owner_api_listen_port\": 3420,\n            \"api_secret_path\": null,\n            \"node_api_secret_path\": null,\n            \"check_node_api_http_addr\": \"http://127.0.0.1:3413\",\n            \"owner_api_include_foreign\": false,\n            \"data_file_dir\": \"/path/to/data/file/dir\",\n            \"no_commit_cache\": null,\n            \"tls_certificate_file\": null,\n            \"tls_certificate_key\": null,\n            \"dark_background_color_scheme\": null,\n            \"keybase_notify_ttl\": null\n        },\n        \"logging_config\": {\n            \"log_to_stdout\": false,\n            \"stdout_log_level\": \"Info\",\n            \"log_to_file\": true,\n            \"file_log_level\": \"Debug\",\n            \"log_file_path\": \"/path/to/log/file\",\n            \"log_file_append\": true,\n            \"log_max_size\": null,\n            \"log_max_files\": null,\n            \"tui_running\": null\n        },\n        \"tor_config\" : {\n            \"use_tor_listener\": true,\n            \"socks_proxy_addr\": \"127.0.0.1:9050\",\n            \"send_config_dir\": \".\"\n        },\n        \"epicbox_config\" : {\n            \"epicbox_domain\": \"epicbox.io\",\n            \"epicbox_port\": 443,\n            \"epicbox_protocol_unsecure\": false,\n            \"epicbox_address_index\": 0\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#create_wallet","title":"<code>create_wallet</code>","text":"<p>Creates a new wallet seed and empty wallet database in the wallet_data directory of the top level directory.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"create_wallet\",\n    \"params\": {\n        \"name\": null,\n        \"mnemonic\": null,\n        \"mnemonic_length\": 0,\n        \"password\": \"my_secret_password\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#open_wallet","title":"<code>open_wallet</code>","text":"<p>Opens a wallet, populating the internal keychain with the encrypted seed, and optionally returning a keychain_mask token to the caller to provide in all future calls.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"open_wallet\",\n    \"params\": {\n        \"name\": null,\n        \"password\": \"my_secret_password\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": \"d096b3cb75986b3b13f80b8f5243a9edf0af4c74ac37578c5a12cfb5b59b1868\"\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#close_wallet","title":"<code>close_wallet</code>","text":"<p>Close a wallet, removing the master seed from memory.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"close_wallet\",\n    \"params\": {\n        \"name\": null\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#get_mnemonic","title":"<code>get_mnemonic</code>","text":"<p>Return the BIP39 mnemonic for the given wallet.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_mnemonic\",\n    \"params\": {\n        \"name\": null,\n        \"password\": \"\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": \"fat twenty mean degree forget shell check candy immense awful flame next during february bulb bike sun wink theory day kiwi embrace peace lunch\"\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#change_password","title":"<code>change_password</code>","text":"<p>Changes a wallet\u2019s password, meaning the old seed file is decrypted with the old password, and a new seed file is created with the same mnemonic and encrypted with the new password.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"change_password\",\n    \"params\": {\n        \"name\": null,\n        \"old\": \"\",\n        \"new\": \"new_password\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#delete_wallet","title":"<code>delete_wallet</code>","text":"<p>Deletes a wallet, removing the config file, seed file and all data files.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"delete_wallet\",\n    \"params\": {\n        \"name\": null\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#start_updater","title":"<code>start_updater</code>","text":"<p>Starts a background wallet update thread, which performs the wallet update process automatically at the frequency specified.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"start_updater\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"frequency\": 30000\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#stop_updater","title":"<code>stop_updater</code>","text":"<p>Stops the background update thread. If the updater is currently updating, the thread will stop after the next update</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"stop_updater\",\n    \"params\": null,\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#get_updater_messages","title":"<code>get_updater_messages</code>","text":"<p>Retrieve messages from the updater thread, up to count number of messages.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_updater_messages\",\n    \"params\": {\n        \"count\": 1\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": []\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#get_public_address","title":"<code>get_public_address</code>","text":"<p>Retrieve the public \u201caddresses\u201d associated with the active account at the given derivation path.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_public_address\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"derivation_index\": 0\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\":  {\n                \"domain\": \"\",\n                \"port\": 0,\n                \"public_key\": \"esWVpwMwUyYoxta4EpGPQQEBYdm3wBqCcggVswNyquoLHaLjFdwq\"\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#get_public_proof_address","title":"<code>get_public_proof_address</code>","text":"<p>Retrieve the public proof \u201caddresses\u201d associated with the active account at the given derivation path.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_public_proof_address\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"derivation_index\": 0\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": \"32cdd63928854f8b2628b1dce4626ddcdf35d56cb7cfdf7d64cca5822b78d4d3\"\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#proof_address_from_onion_v3","title":"<code>proof_address_from_onion_v3</code>","text":"<p>Helper function to convert an Onion v3 address to a payment proof address  (essentially extracting and verifying the public key).</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"proof_address_from_onion_v3\",\n    \"params\": {\n        \"address_v3\": \"2a6at2obto3uvkpkitqp4wxcg6u36qf534eucbskqciturczzc5suyid\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": \"d03c09e9c19bb74aa9ea44e0fe5ae237a9bf40bddf0941064a80913a4459c8bb\"\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#retrieve_payment_proof","title":"<code>retrieve_payment_proof</code>","text":"<p>Returns a single, exportable PaymentProof from a completed transaction within the wallet.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"retrieve_payment_proof\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"refresh_from_node\": true,\n        \"tx_id\": null,\n        \"tx_slate_id\": \"0436430c-2b02-624c-2032-570501212b00\"\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": {\n                \"amount\": \"600000000\",\n                \"excess\": \"08d09187cb93cf5d6b97b28e8ca529912bf35ec8773d3e9af9b3c174a270dc7f05\",\n                \"recipient_address\": \"pa7wkkdgs5bkteha7lykl7ff2wztgdrxxo442xdcq2lnaphe5aidd4id\",\n                \"recipient_sig\": \"b9ac5e18fd13ce72923cc47796bd5af09b5247c52da3634c9b934d4e111a43f53f1c55e3f3be36a79450e18f8989d81a0c21c4b2c16c208753a9971a5ffee406\",\n                \"sender_address\": \"glg5mojiqvhywjriwhooiytn3tptlvlmw7h567lezssyek3y2tjzznad\",\n                \"sender_sig\": \"d26fa48e9a32058b4dc9e9098edd3b98bf2e5286024adc5f7555aa4804acdb1c5506412dfae7d087c138d727da427e14c6c5b7dc2008fc7ed55ab95e8bac3e06\"\n            }\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#verify_payment_proof","title":"<code>verify_payment_proof</code>","text":"<p>Verifies a PaymentProof. This process entails:</p> <p>Ensuring the kernel identified by the proof\u2019s stored excess commitment exists in the kernel set. Reproducing the signed message amount|kernel_commitment|sender_address. Validating the proof\u2019s recipient_sig against the message using the recipient\u2019s address as the public key. Validating the proof\u2019s sender_sig against the message using the sender's address as the public key.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"verify_payment_proof\",\n    \"params\": {\n        \"token\": \"&lt;token_obtained_via_open_wallet&gt;\",\n        \"proof\": {\n            \"amount\": \"600000000\",\n            \"excess\": \"08d09187cb93cf5d6b97b28e8ca529912bf35ec8773d3e9af9b3c174a270dc7f05\",\n            \"recipient_address\": \"pa7wkkdgs5bkteha7lykl7ff2wztgdrxxo442xdcq2lnaphe5aidd4id\",\n            \"recipient_sig\": \"b9ac5e18fd13ce72923cc47796bd5af09b5247c52da3634c9b934d4e111a43f53f1c55e3f3be36a79450e18f8989d81a0c21c4b2c16c208753a9971a5ffee406\",\n            \"sender_address\": \"glg5mojiqvhywjriwhooiytn3tptlvlmw7h567lezssyek3y2tjzznad\",\n            \"sender_sig\": \"d26fa48e9a32058b4dc9e9098edd3b98bf2e5286024adc5f7555aa4804acdb1c5506412dfae7d087c138d727da427e14c6c5b7dc2008fc7ed55ab95e8bac3e06\"\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": [\n                true,\n                false\n            ]\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#set_tor_config","title":"<code>set_tor_config</code>","text":"<p>Set the TOR configuration for this instance of the OwnerAPI, used during init_send_tx when send args are present and a TOR address is specified.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"set_tor_config\",\n    \"params\": {\n        \"tor_config\": {\n            \"use_tor_listener\": true,\n            \"socks_proxy_addr\": \"127.0.0.1:59050\",\n            \"send_config_dir\": \".\"\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/owner/#set_epicbox_config","title":"<code>set_epicbox_config</code>","text":"<p>Set the Epicbox configuration for this instance of the OwnerAPI,  used during init_send_tx when send args are present and an Epicbox address is specified.</p> RequestResponse <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"set_epicbox_config\",\n    \"params\": {\n        \"epicbox_config\": {\n            \"epicbox_domain\": \"epicbox.io\",\n            \"epicbox_port\": 443,\n            \"epicbox_protocol_unsecure\": false,\n            \"epicbox_address_index\": 0\n        }\n    },\n    \"id\": 1\n}\n</code></pre> <pre><code>    {\n        \"id\": 1,\n        \"jsonrpc\": \"2.0\",\n        \"result\": {\n            \"Ok\": null\n        }\n    }\n</code></pre>"},{"location":"wallet/tx_workflow/","title":"Tx Workflow","text":""},{"location":"wallet/tx_workflow/#transaction-workflow-using-cli","title":"Transaction Workflow Using CLI","text":"<ol> <li> <p>Run the node server and ensure the node is synced to the latest block.</p> </li> <li> <p>Start the HTTP Foreign Listener by using the command </p> <pre><code>./epic-wallet -p &lt;user's wallet password&gt; listen\n</code></pre> <p>The above command gives this output:</p> <p> listenerResponse.png </p> </li> <li> <p>Use the below command to send Epic Cash to other wallets.</p> <pre><code>./epic-wallet -p &lt;user's wallet password&gt; send -d &lt;receiver's address&gt; &lt;amount&gt;\n</code></pre> </li> </ol> <p>The above command will look like the following when used with a real address and amount.</p> <pre><code>    ./epic-wallet -p &lt;user's wallet password&gt; send -d https://h11a-49-805-39-262.ngrok-free.app 2\n</code></pre> <ol> <li> <p>For additional help and options use the following command:</p> <pre><code>./epic-wallet -p &lt;user's wallet password&gt; send -h\n</code></pre> </li> <li> <p>Both the sender's and receiver's wallets should be actively listening, and their node servers must be fully synced. If both wallets' nodes are operational at the same time ,the transaction will be completed within two hours.</p> </li> </ol>"},{"location":"wallet/tx_workflow/#transaction-workflow-using-javascript","title":"Transaction Workflow Using JavaScript","text":"<ol> <li> <p>Run the node server and ensure the node is synced to the latest block.</p> </li> <li> <p>Start the HTTP Owner Listener by using the command: </p> <pre><code>./epic-wallet -p &lt;user's wallet password&gt; owner_api\n</code></pre> <p>The above command gives this output:</p> <p> ownerResponse.png </p> </li> <li> <p>Code Examples for JavaScript and Python to send Epic Cash to other wallets are given below.</p> <p>For the JavaScript code example:</p> <ul> <li> <p>In the line number 125, update value of the <code>dest</code> key with the receiver wallet's ngrok address.</p> </li> <li> <p>In the line number 114, multiply the amount of Epic Cash you want to send with <code>10^8</code> and update value of the <code>amount</code> key with it. For example, we are sending <code>0.1</code> Epic Cash here, but the value of the <code>amount</code> key is <code>10000000</code>.</p> </li> </ul> <p>For the Python code example:</p> <ul> <li> <p>In the line number 225, update value of the <code>dest</code> key with the receiver wallet's ngrok address.</p> </li> <li> <p>In the line number 214, multiply the amount of Epic Cash you want to send with <code>10^8</code> and update value of the <code>amount</code> key with it. For example, we are sending <code>0.1</code> Epic Cash here, but the value of the <code>amount</code> key is <code>10000000</code>.</p> </li> </ul> </li> </ol> NodeJSPython <p>NodeJS and NPM package manager is required</p> <pre><code>npm i jayson\n</code></pre> Sending Epic Cash code example send_tx_example.js<pre><code>/* Sample Code for connecting to the V3 Secure API via Node\n *\n * With thanks to xiaojay of Niffler Wallet:\n * https://github.com/epicfans/Niffler/blob/gw3/src/shared/walletv3.js\n *\n */\n\nlet password = \"\"; // your wallet pass\nlet port = \"3420\"; // :13420 = default floonet port, :3420 default mainnet port\nlet api_secret = \"\"; //`cat ~/.epic/main/.owner_api_secret` or `cat ~/.epic/floo/.owner_api_secret`\n\nconst jayson = require('jayson/promise');\nconst crypto = require('crypto');\n\n\n\nconst client = jayson.client.http('http://epic:'+ api_secret +'@127.0.0.1:' + port + '/v3/owner');\n\n// Demo implementation of using `aes-256-gcm` with node.js's `crypto` lib.\nconst aes256gcm = (shared_secret) =&gt; {\n    const ALGO = 'aes-256-gcm';\n\n    // encrypt returns base64-encoded ciphertext\n    const encrypt = (str, nonce) =&gt; {\n        let key = Buffer.from(shared_secret, 'hex')\n        const cipher = crypto.createCipheriv(ALGO, key, nonce)\n        const enc = Buffer.concat([cipher.update(str, 'utf8'), cipher.final()])\n        const tag = cipher.getAuthTag()\n        return Buffer.concat([enc, tag]).toString('base64')\n    };\n\n    // decrypt decodes base64-encoded ciphertext into a utf8-encoded string\n    const decrypt = (enc, nonce) =&gt; {\n        //key,nonce is all buffer type; data is base64-encoded string\n        let key = Buffer.from(shared_secret, 'hex')\n        const data_ = Buffer.from(enc, 'base64')\n        const decipher = crypto.createDecipheriv(ALGO, key, nonce)\n        const len = data_.length\n        const tag = data_.slice(len-16, len)\n        const text = data_.slice(0, len-16)\n        decipher.setAuthTag(tag)\n        const dec = decipher.update(text, 'binary', 'utf8') + decipher.final('utf8');\n        return dec\n    };\n\n    return {\n        encrypt,\n        decrypt,\n    };\n};\n\nclass JSONRequestEncrypted {\n    constructor(id, method, params) {\n        this.jsonrpc = '2.0'\n        this.method = method\n        this.id = id\n        this.params = params\n    }\n\n    async send(key){\n        const aesCipher = aes256gcm(key);\n        const nonce = new Buffer.from(crypto.randomBytes(12));\n        let enc = aesCipher.encrypt(JSON.stringify(this), nonce);\n        //console.log(\"Encrypted: \" + enc)\n        let params = {\n            'nonce': nonce.toString('hex'),\n            'body_enc': enc,\n        }\n        let response = await client.request('encrypted_request_v3', params);\n\n        if (response.err) {\n            throw response.err\n        }\n\n        const nonce2 = Buffer.from(response.result.Ok.nonce, 'hex');\n        const data = Buffer.from(response.result.Ok.body_enc, 'base64');\n\n        let dec = aesCipher.decrypt(data, nonce2)\n        return dec\n    }\n}\n\nasync function initSecure() {\n    let ecdh = crypto.createECDH('secp256k1')\n    ecdh.generateKeys()\n    let publicKey = ecdh.getPublicKey('hex', 'compressed')\n    const params = {\n        'ecdh_pubkey': publicKey\n    }\n    let response = await client.request('init_secure_api', params);\n    if (response.err) {\n        throw response.err\n    }\n\n    return ecdh.computeSecret(response.result.Ok, 'hex', 'hex')\n}\n\nasync function main() {\n    let shared_key = await initSecure();\n\n    let response = await new JSONRequestEncrypted(1, 'open_wallet', {\n        \"name\": null,\n        \"password\": password,\n    }).send(shared_key);\n\n\n    let token = JSON.parse(response).result.Ok;\n\n    let sendtx_response = await new JSONRequestEncrypted(1, 'init_send_tx', {\n\n        \"token\": token,\n        \"args\": {\n            \"src_acct_name\": null,\n            \"amount\": \"10000000\",\n            \"minimum_confirmations\": 3,\n            \"max_outputs\": 500,\n            \"num_change_outputs\": 1,\n            \"selection_strategy_is_use_all\": true,\n            \"message\": \"my message - test\",\n            \"target_slate_version\": null,\n            \"payment_proof_recipient_address\": null,\n            \"ttl_blocks\": null,\n            \"send_args\": {\n                \"method\": \"http\",\n                \"dest\": \"https://1038-41-285-93-201.ngrok-free.app\",\n                \"finalize\": true,\n                \"post_tx\": true,\n                \"fluff\": false\n              }\n        }\n    }\n\n    ).send(shared_key);\n\n    console.log(sendtx_response)  // Prints the response of init_send_tx method  \n\n}\n\nmain();\n</code></pre> <p>If the transaction is successful, you will see a response similar to the following in your terminal.</p> Sending Epic Cash response example send_tx_response_js.json<pre><code>{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"Ok\": {\n            \"amount\": \"10000000\",\n            \"fee\": \"800000\",\n            \"height\": \"1974026\",\n            \"id\": \"dacaf05e-5c67-477a-a290-0919c78d4af5\",\n            \"lock_height\": \"0\",\n            \"num_participants\": 2,\n            \"participant_data\": [\n                {\n                    \"id\": \"0\",\n                    \"message\": \"my message - test\",\n                    \"message_sig\": \"f869a73fb9dd14d496f073af3a9890adf0f4010e8be8567e843676f0712d7f1f0fe8c1d96d51d400088161bcd951686ebd179e019b43b321858ef93ceabe725a\",\n                    \"part_sig\": \"60d5d49c224c973acecdd8d1689aec3f3c848069fff4439fc5125d5683be0055909e8c9311fc9fc2672a33a1f4b2312ccef39fa0e5c4194727797cf9d02a7e2f\",\n                    \"public_blind_excess\": \"025378ff1e64e72f69a4fb9a35e0c9d36647d5255e4a9d45d85d3b6f712b91477a\",\n                    \"public_nonce\": \"025500be83565d12c59f43f4ff6980843c3fec9a68d1d8cdce3a974c229cd4d560\"\n                },\n                {\n                    \"id\": \"1\",\n                    \"message\": null,\n                    \"message_sig\": null,\n                    \"part_sig\": \"1ba695ec3f16d669d52a14fa6a6eed196f826acaf9ce46037e6722cc45545c719d6e47bddb3d732010293f9c3d79083d2209aca55b0b8e53c00c52a5077fd74a\",\n                    \"public_blind_excess\": \"035f8ab054e30fd642da9638c690613ca61cde8b6c7cc84b386fe4d2604fb39873\",\n                    \"public_nonce\": \"02715c5445cc22677e0346cef9ca6a826f19ed6e6afa142ad569d6163fec95a61b\"\n                }\n            ],\n            \"payment_proof\": null,\n            \"ttl_cutoff_height\": null,\n            \"tx\": {\n                \"body\": {\n                    \"inputs\": [\n                        {\n                            \"commit\": \"0854f3647921d5fd74e3c81859033ebbec96fc3e101169f3ade73edbcf49706ee6\",\n                            \"features\": \"Plain\"\n                        }\n                    ],\n                    \"kernels\": [\n                        {\n                            \"excess\": \"09a26f08543fa55afc15201165892c844236415d0541b35980d177f7264e7a2a5d\",\n                            \"excess_sig\": \"add904cb9f103f2c9eab4480cd5391c0e91dac5c91ad6ea04318af3bb8c7e1952d0dd450ed3913e37753723d322c3a69f0fc4b4641d0a79ae785ce9ed8a9557a\",\n                            \"features\": \"Plain\",\n                            \"fee\": \"800000\",\n                            \"lock_height\": \"0\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"commit\": \"091517a40cef5ebc3c4cffe19092f5d184584f89c66c779e3847323984bfdfe878\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"9a4c842629020f2fae09b102b866b0580f85b25f2a55a067909b496b00761151105a00d931490bfc8476b700d07121ad1c81699cf120fb4d04b50a88bf889da6010aff4c58eec4f02df701ede19e28b6507548bb29d23bf8e0d47fec5659743297d39ce33b8e8f47de2ee08c90cea2db54a8649af8e470acccc9be1172fb3d187df4a80c10969ed7211c681d234963464511385c6cc8811b272e8d6f51403001b6896a24c330a4ec3baf2032f1d5a8b6b26d9d4f48e911c161d14feca95e5044b41959c32a83c1abd6f9bc71bd386b681766d59566aaeb068406af9aea6f6f7e456fb926d46e2a7fe84e87efab51bb10c93e1bb45803e97610fee4930f2c5692fbd9069569d8490d4ec111e567c3a0446ec082f5043bc86efa2be43b7ebe231991bda3417979098010092322e76cc6aa538cd2a631d36a4c34bf4b1bd861646e28836ea0d5a82347478781ec4abba29dd59b4cedb01c99cfdc7931b6929af3bb721e0333fff551309c5ee7291e46984fbe89245e8c3df4098ed9cf703202c555ed710be613e5d70d75ac25b900aeabbca2adc598335e1be03ecde650a248e73892f0630bd9a25f8a9796bbabeb7bae13712e90ffba7dbbe8d94dea11dbacd287482e9d89a82168c498d79e481cd563d51c907ed58b8aa4c4c6d0ee0adcadca0f9207e82aeaecaf1d34c4457caad8dada473fb2b37d572c35496ebc720747a4c252be36559fccc073da6ec0fbcf8f3d5ca47e63197cb90d9e73a6df74842ff2e2808db94076f38b5acb745dff20cb7629b84056cfa139ee12526108a3b0d8600ac2e29ab264a2fe4de36600251e00ead350bceec149f6195f1540eeade752b1ca5b4a92d4bfce8cdf3635180b045a3630ceb40eeaf7f8841a2d3dde714042658e96025d017f4d997b4a2a2263ae367ebf2d7e37fbf52a74109b868d6e96b0f9729ee5ce\"\n                        },\n                        {\n                            \"commit\": \"09c1406847fee2aca2103b0438253b43bcfc628360928a1617cb7d43d192e601b6\",\n                            \"features\": \"Plain\",\n                            \"proof\": \"d1b14a845a61174646d33bbee43bdc672411e9b83854d28e64de31e7297a9eb66e11003885ac1bd7943e89e39fc143e07d2963e3b83feb0ee8e8c1df009cf99e0bbd29ef29b7e4755731595c29997301e22acca2096ac72b649a8379c37c12985d624add95d8c80eba6bd2c957d10c7c828a6617f26446123c5688396cda4c0f0e6ba87d55fd1cca30a666338882afe886f6f96a012fbed529789071654408dce115d68ab4a4bc254e16372e4a30c588317ef0f0c21b796424ebe5903c665433feecfa4623c1af118392a130b042e8675b90baedaa7c8f3b9e382d003242b50bc5794d56bc15c04a086d8dd5e74a172f0eb72141d073f2b3d8bd996ebe23bd24090e88be00bc50448c25891adc0efcc2cb38c3eb1474a956340b2878895d3efcbd029b27f8b38ee3e1a3bba0447e7443026d934fd596f8463a996b2b7d4755c1f9390ecb0505f1a44f1a5a4ff4ef0eb7835203e35fa1bef086d16b52c7aa527b706e02957853a4a4468feaba40848db1ab02d86409773239631f06d97c012938823ba5f3cd0bf785687290231cc8200078d2c2ca5f31ac5c62d407317d8a08e99f7dc1526c9f1077a874f4ec22161daaff93f4e857b55a164c2b2967532bf4e3a218a4c6d308fd50846bc486b5910c247bdcebb422453ee5dede4607afe3371b531468ddba77042894f0140142842f6032ce49a23f7857ca7b434707bbff60b6921ab029e911dd5b8160e8a1545e0b337af1d88144d7a7d8aef8a53cc933330aedabfc97ee211129c0ab8c4c91e54ecfaf60d4195d6bb6f4aec11f171ae9c2cb860124810419a76ad4987d4443209084941491f58cbe9522b2555033e3876a2d8a353f8245068236ccc013b28e3de4ae6ee25e8e17989be0ec372cbb7909f3827002472c02284058f8935245f914eacd6380261f3953b98eb8589472dd8fde8e9301ed\"\n                        }\n                    ]\n                },\n                \"offset\": \"e5f6e5ebb7bd83d41eed511764bbe27a4927f194d9f28da5d77b7e2dd3ac39d0\"\n            },\n            \"version_info\": {\n                \"block_header_version\": 6,\n                \"orig_version\": 3,\n                \"version\": 3\n            }\n        }\n    }\n} \n</code></pre> <p>Requires Python 3.10+ and following packages:</p> <pre><code>python3 -m pip install coincurve pycryptodome requests\n</code></pre> Sending Epic Cash code example send_tx_example.py<pre><code>from typing import Union\nimport base64\nimport json\nimport os\n\nfrom coincurve import PublicKey, PrivateKey\nfrom Crypto.Cipher import AES\nimport requests\n\n\n# DEFAULT VALUES\napi_url = f\"http://127.0.0.1:3420/v3/owner\"\nauth_user = 'epic'\nowner_api_secret_path = f\"{os.environ['HOME']}/.epic/main/.owner_api_secret\"\nwallet_password = \"\"\n\nwith open(owner_api_secret_path, 'r') as f:\n    owner_api_secret = f.read()\n\nbasic_auth = (auth_user, owner_api_secret)\n\n\ndef parse_api_response(response: Union[dict, requests.Response]):\n    \"\"\"\n    Parse EPIC API responses, handle different errors\n    and extract the data from different response formats.\n    \"\"\"\n    if isinstance(response, requests.Response):\n        if response.status_code not in [200, 201]:\n            if response.status_code == 401:\n                raise SystemExit(\"Unauthorized to access API\")\n            else:\n                raise SystemExit(f\"Error: {response.status_code}, {response.reason}\")\n        try:\n            response = response.json()\n        except ValueError as e:\n            raise SystemExit(f\"Error while reading api response: '{str(e)}'\\n\"\n                             f\"Make sure your auth credentials are valid.\")\n\n    if \"error\" in response:\n        raise SystemExit(f'{response[\"error\"]}')\n\n    elif \"Err\" in response:\n        raise SystemExit(f'{response[\"result\"]}')\n\n    elif 'Ok' in response['result']:\n        return response['result']['Ok']\n\n    else:\n        return response\n\n\ndef init_secure_api() -&gt; str:\n    \"\"\"\n    This is the first step in epic-wallet Secure API workflow\n    Initialize process of computing encryption_key to encrypt payloads\n    :return: encryption key\n    \"\"\"\n\n    # Randomly created encryption key valid during the session\n    secret_key = PrivateKey(os.urandom(32))\n\n    # Prepare payload for the API call\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': \"init_secure_api\",\n        'params': {'ecdh_pubkey': secret_key.public_key.format().hex()}\n        }\n\n    # POST your secret_key.public_key and receive new api_public_key\n    response = requests.post(api_url, json=payload, auth=basic_auth)\n    api_public_key_hex = parse_api_response(response)\n\n    # Parse received api_public_key from hex to bytes\n    api_public_key_bytes = PublicKey(bytes.fromhex(api_public_key_hex)).format()\n\n    # Compute new encryption_key used for further encryption every api_call in this session\n    encryption_key_ = PublicKey(api_public_key_bytes).multiply(secret_key.secret)\n\n    # Format to hex and remove first 2 bits\n    encryption_key_ = encryption_key_.format().hex()[2:]\n    print(f\"\u2705  Encryption key successfully generated\")\n\n    return encryption_key_\n\n\ndef encrypt(key: str, payload: dict) -&gt; dict:\n    \"\"\"\n    :param key: 32bit `secp256k1` ecdh encryption key computed via init_secure_api() func\n    :param payload: json payload to encrypt\n    :return: dict with base64 encoded AES-256-GMC encrypted payload and nonce as hex string\n\n    Encrypt api_call JSON payload with:\n     - encryption_key\n     - 12bit nonce,\n     - 16bit tag\n    \"\"\"\n    nonce = os.urandom(12)\n    message = json.dumps(payload).encode()\n    aes_cipher = AES.new(bytes.fromhex(key), AES.MODE_GCM, nonce=nonce)\n    ciphertext, tag = aes_cipher.encrypt_and_digest(message)\n    encrypted_params = {'nonce': nonce.hex(), 'body_enc': base64.b64encode(ciphertext + tag).decode()}\n\n    return encrypted_params\n\n\ndef decrypt(key: str, data: dict, nonce: bytes) -&gt; str:\n    \"\"\" Decrypt base64 encoded string\n    :param key: 32bit `secp256k1` ecdh encryption key computed via init_secure_api() func\n    :param data: encrypted message\n    :param nonce: 12bit nonce as hex string\n    :return: decoded string with JSON response\n    \"\"\"\n    data = base64.b64decode(data)\n    ciphertext = data[:-16]\n    aesCipher = AES.new(bytes.fromhex(key), AES.MODE_GCM, nonce=nonce)\n    plaintext = aesCipher.decrypt(ciphertext)\n\n    return plaintext.decode()\n\n\ndef secure_api_call(key: str, method: str, params: dict):\n    \"\"\"\n    Execute secure `owner_api` call, payload is encrypted\n    :param key: 32bit secp256k1 ecdh encryption key computed via init_secure_api() func\n    :param method: api call method name\n    :param params: dict with api_call params\n    :return: dict with decrypted data\n    \"\"\"\n\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': method,\n        'params': params\n        }\n\n    # Encrypt payload with computed encryption key\n    encrypted_payload = encrypt(key, payload)\n\n    # Execute owner_api call with encrypted payload\n    payload = {\n        'jsonrpc': '2.0',\n        'id': 1,\n        'method': 'encrypted_request_v3',\n        'params': encrypted_payload\n        }\n\n    encrypted_response = requests.post(\n        url=api_url,\n        json=payload,\n        auth=basic_auth\n        )\n\n    encrypted_response = parse_api_response(encrypted_response)\n\n    # Decrypt response and return dict with response data\n    nonce = bytes.fromhex(encrypted_response['nonce'])\n    encrypted_response = encrypted_response['body_enc']\n\n    decrypted_response = decrypt(\n        encryption_key,\n        encrypted_response,\n        nonce\n        )\n\n    return parse_api_response(json.loads(decrypted_response))\n\n\ndef open_wallet(password, key) -&gt; str:\n    \"\"\"\n    This is the second step in epic-wallet API workflow\n    Make an `open_wallet` API call, get authentication token and use it\n    in all calls for this wallet instance during this session.\n    \"\"\"\n\n    open_wallet_params = {\n        'name': 'default',\n        'password': password,\n        }\n\n    response = secure_api_call(\n        key=key,\n        method='open_wallet',\n        params=open_wallet_params\n        )\n\n    print(f\"\u2705  Secure token successfully generated\")\n    return response\n\n\n\"\"\"\nIn the example below we will use defined functions to generate secure token \nand retrieve wallet balance. Different API endpoint will use different params\nbut the workflow will be the same.\n\"\"\"\n\n# Call `init_secure_api` API endpoint to initialize Secure API workflow,\n# and generate encryption_key used to encrypt data payload\nencryption_key = init_secure_api()\n\n# Call `open_wallet` API endpoint to generate authentication token\ntoken = open_wallet(\n    password=wallet_password,\n    key=encryption_key\n    )\n\n# Prepare `retrieve_summary_info` API call params\ninfo_params = {\n    \"token\": token,\n        \"args\": {\n        \"src_acct_name\": None,\n        \"amount\": \"10000000\",\n        \"minimum_confirmations\": 3,\n        \"max_outputs\": 500,\n        \"num_change_outputs\": 1,\n        \"selection_strategy_is_use_all\": True,\n        \"message\": \"my message\",\n        \"target_slate_version\": None,\n        \"payment_proof_recipient_address\": None,\n        \"ttl_blocks\": None,\n        \"send_args\": {\n            \"method\": \"http\",\n            \"dest\": \"https://7f88-49-002-32-25.ngrok-free.app\",\n            \"finalize\": True,\n            \"post_tx\": True,\n            \"fluff\": False\n        }\n    }\n}    \n\n# Call `retrieve_summary_info` endpoint and print the result\nsend_tx_response = secure_api_call(\n    key=encryption_key,\n    method='init_send_tx',\n    params=info_params)\n\nprint(json.dumps(send_tx_response))\n</code></pre> <p>If the transaction is successful, you will see a response similar to the following in your terminal.</p> Sending Epic Cash response example send_tx_response_py.json<pre><code>{\n    \"amount\": \"10000000\",\n    \"fee\": \"800000\",\n    \"height\": \"1979603\",\n    \"id\": \"01740886-bbff-4b7b-9796-41cf2cb74df0\",\n    \"lock_height\": \"0\",\n    \"num_participants\": 2,\n    \"participant_data\": [\n        {\n            \"id\": \"0\",\n            \"message\": \"my message\",\n            \"message_sig\": \"4e2482734ed9d43ea092c02412078f98e10fb1382ae6682bed7311017a3065b7bcab3faca231a775576831ebb97c8d21c421924c31dd332697311ceb8ba81ff8\",\n            \"part_sig\": \"958ddf5a2c0becedb75480d18301238f7006bd88902623fa889a8dce611825ddddb4b8232f6e70a7d07f53aaa1c62512a97f65fb622459b1eb532796eacd85e3\",\n            \"public_blind_excess\": \"03fbe1484b37bf395a396ade6e4f6ac3cff98b1601db7983e2a723b71109f61956\",\n            \"public_nonce\": \"02dd251861ce8d9a88fa23269088bd06708f230183d18054b7edec0b2c5adf8d95\"\n        },\n        {\n            \"id\": \"1\",\n            \"message\": null,\n            \"message_sig\": null,\n            \"part_sig\": \"fd46c43ccc42c96ed4d1b85e3482e89a215b77f25f4db4ab74046daee2a19dc3ed4157b335bce8ccb8023a3484c28c65589c2963d7b50f6bca0c6f6586a7125b\",\n            \"public_blind_excess\": \"03ca9a42982b82692c672be27876482f22cc5a471377751aa79addaeb585db1cd6\",\n            \"public_nonce\": \"02c39da1e2ae6d0474abb44d5ff2775b219ae882345eb8d1d46ec942cc3cc446fd\"\n        }\n    ],\n    \"payment_proof\": null,\n    \"ttl_cutoff_height\": null,\n    \"tx\": {\n        \"body\": {\n            \"inputs\": [\n                {\n                    \"commit\": \"094026bd2ffbb32ca84b41e0a4b19607c69fbdb4d4d9ef667d19c92c084ff0d721\",\n                    \"features\": \"Plain\"\n                }\n            ],\n            \"kernels\": [\n                {\n                    \"excess\": \"09e8653eb45df78084cfe4ba868f3e7aba0c5f5a9e1ee624ad69e5aeefdc66c459\",\n                    \"excess_sig\": \"24444dbd104749709ce29f8de620b78f8da693c8c937d411db86b7f7e81ea2e389b5d906d8cb86b44de2442f3fac03bd021c8f5e3ada681cb66096fb7075983e\",\n                    \"features\": \"Plain\",\n                    \"fee\": \"800000\",\n                    \"lock_height\": \"0\"\n                }\n            ],\n            \"outputs\": [\n                {\n                    \"commit\": \"09d658336c5403a07670682511b6e72fc8a32c1f3717aff2264eafdd11d6985179\",\n                    \"features\": \"Plain\",\n                    \"proof\": \"e5cd651b8889e747bd255e456ce4db5cb319323794aee208c38ac9407468927fee50a6a3cba132a65df1e7674bedc2abe776708028c771159cfbf52daf9cb7d10de1e171c2e3abfaad5c599903a0f05640f6664757c18ee132a1130a3b5f2293fd5e0ee5c9b772bf542e2c00fd300bdab26cbcbf6bb91534b36e32e6be1f8e43b59a88c18cbe5062c7c344c2aaccbd4ca7350cd17ee37fdee860dd090fc547eea376fd0a6609bca7bc4bb6ddd044f79dfb9df45a44f709853666b878785aaec29b634440a1de28c09976310e30a11bf4701a5cddafad254f0129c0499684d595840ac126d6e6f252f611219beb9d5cbc22f3ab5b3e39ead8698585ce73721d7b890e5bd8ad8df71eb49b64130eb29f854534caa48bfc62e9d2c5682e9ed287015e10b0da9da34eb1aaa2c7a81b61ce921d13c105a700dad08eb8a17f782aafdcacf0050ce4e9e01aaab2d38108d09c78b25522a88afab8286accf1acafb8266276fc015fec7bf8b2e68d48cc3f449795b640a396dea7a248855d23e709cc23948d16472090d9a2c08135176538bb199ac620abff1749dbfabf0f726ad83a8c4ab84cedf42a8a781681b3fb2b3231992236227c7bc4c3d0125bafe096b6ebd2544e3b362fd4af7ea4050e7ccec1c6d5eab136cc622ab888967935bdb795a060750f4e26ae80b5dbca28a6e4d7847abea01a76c2d457e18891787ff13f8c8053f316db4c41a4734442d57792d06041976fadc2d24e66680816aaef07a5c30e82da8d9aa9b95bd78ce61d1b23950c446f46e941b16e9761e391ac9a996d19e7e3b001eca29a0eff712fda54f8b803226097cdc04e4879bbc9d4f25ac2368320c084b0ad4657552b4750e0b63c2f9a312669013ef16906ad41f762f22c871443f07587d9d64bcac372d5b535e961cff07be24616e089abdb3cb82eaa1dc7c2324a657acb71\"\n                },\n                {\n                    \"commit\": \"09611534a8a7157292fc3b6a87402b7af935783784805820430812428f4174eecf\",\n                    \"features\": \"Plain\",\n                    \"proof\": \"ff15aa11d280cdb11fd3d5e603ca9d78100d85385af5e39b78a880e1d06f7462b8b2f58dddf4cc32aa3b557e62d7ea296f7d49fa2e2f3ccfd61f03092e8ae4430907990de86bcba9913f5393839ad433aa29a3be21248f7e0e6df6b42bc1c70b2e159cb95733d383cfe986853f8fbf37838bc538610eb2c46c320450004593a8a0624f6b07bf6211cace8656a66197c4aacba33c79650177802e82309ad17098e0f6125535e214f77ec307da1832b47b1ff84c0824706e5462389fcc2cdb2c91b31b5545c5443ac4d7df6d7cd9bc55a555e3936e0fd94df040b823ad5e43b60fd72f52c9e88590fc4f6d765b19bb15c811a262685a6d62cb5af0b6607d8d0a45c2c997684e20b976c753a41b24658fd963de925868ebeb94e640ab3e328167b04cab361af689f6a806911f6343c68ba50c3c07e592b4b7ab6140da096692ecde0e4db03afbdb8fc4786fbdc30cf929141fca81c49f1df05dcd4df6099c5f1cf57bb3031604c048344c7a485170116a038a6dd97f12304c2904d67586dd574f35ab63aa2f0f06fa4310139c60b3a24b93856a982611af461c19572f7397b42fe6e46ad1859dee7c6b9a829db395385df60835db81dd331f27b635f201da337f0da532935a4a940f0d986b00fe87f3390cfb86bef546e4af2c5cbc7a9dfb8617074d9cf8cc725ad5dd52b0f1f045520292503740e62e863072298f55f06274e7d4a201cb8c50759b73ae1d30a3cd89bfb4613e029495cf42838d3eebbbcc5fc821f6964e561765158a1e8ea824cdcfbbea1947fb988bc8230e198964ff3636a15b6e148ffe94838fb99f06d8294ab631278e7644d59b9e6676d4ea2c8da8845b921e493f8dba3ebfa7777a48bb383ac1f1381858aac7bd94155457793bb983f1d5dea432683179f81386628864376e72173c2ab965cb490121f43f92f2e8458fbf8041e1\"\n                }\n            ]\n        },\n        \"offset\": \"9bd9865b92fe4392906b8326c1083ce72ab3ae1fdd0b6f8e298e178eacada903\"\n    },\n    \"version_info\": {\n        \"block_header_version\": 6,\n        \"orig_version\": 3,\n        \"version\": 3\n    }\n}\n</code></pre>"}]}